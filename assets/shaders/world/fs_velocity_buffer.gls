#version 440

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define PUSH_USER_CONSTANTS \
	float padding0; \
	float padding1; \
	float padding2; \
	mat4 prevPose;

#include "prepass/sh_prepass.gls"
//#include "prepass/sh_prepass_vertex_data.gls"

//layout(LAYOUT_ID(DESCRIPTOR_SET_MATERIAL,DESCRIPTOR_SET_MATERIAL_BINDING_ALBEDO_MAP)) uniform sampler2D u_albedoMap;

layout(location = 0) out vec4 fs_normalBuffer;

layout(location = 0) EXPORT_VS VS_OUT
{
	vec4 curPos;
	vec4 prevPos;
}
#ifdef GLS_FRAGMENT_SHADER
	fs_in
#else
	vs_out
#endif
;

void main()
{
	vec3 velocity = fs_in.curPos.xyz -fs_in.prevPos.xyz;

	vec4 curPos = fs_in.curPos;
	vec4 prevPos = fs_in.prevPos;
	//prevPos.xy -= vec2(5,4);
	vec2 a = (curPos.xy / curPos.w) * 0.5 + 0.5;
	vec2 b = (prevPos.xy / prevPos.w) * 0.5 + 0.5;
	vec2 oVelocity = a - b;

	fs_normalBuffer = vec4(oVelocity,0,0);
	/*if(CSPEC_ENABLE_ALPHA_TEST == 1)
	{
		if(is_alpha_test_enabled())
		{
			vec2 texCoords = fs_in.vert_uv; // apply_parallax(use_parallax_map(),fs_in.vert_uv);
			vec4 albedoColor = texture(u_albedoMap,texCoords);
			if(albedoColor.a < u_pushConstants.alphaCutoff)
				discard;
		}
	}
	if(CSPEC_ENABLE_NORMAL_OUTPUT == 1)
		fs_normalBuffer = vec4(fs_in.vert_normal_cs,1.0);*/
}