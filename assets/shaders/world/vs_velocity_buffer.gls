#version 440

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define PUSH_USER_CONSTANTS \
	float padding0; \
	float padding1; \
	float padding2; \
	mat4 prevPose; // Last row is angular camera velocity

#include "prepass/sh_prepass.gls"
#include "/modules/vs_weighted.gls"
#include "/modules/vs_vertex_animation.gls"
#include "/modules/sh_material.gls"
#include "/modules/sh_clip_plane.gls"

layout(location = 0) EXPORT_VS VS_OUT
{
	vec4 curPos;
	vec4 prevPos;
}
#ifdef GLS_FRAGMENT_SHADER
	fs_in
#else
	vs_out
#endif
;

layout(std140,LAYOUT_ID(4,0)) uniform MotionBlurData
{
	vec4 linearCameraVelocity;
	vec4 angularCameraVelocity;
} u_motionBlurData;

layout(location = SHADER_VERTEX_BUFFER_LOCATION) in vec3 in_vert_pos;

void main()
{
	vec3 vertPos = in_vert_pos.xyz;
	uint vertexAnimOffset = (u_pushConstants.scene.vertexAnimInfo<<16)>>16;
	uint vertexAnimCount = u_pushConstants.scene.vertexAnimInfo>>16;
	for(uint i=0;i<vertexAnimCount;++i)
	{
		uint offset = vertexAnimOffset +i;
		VertexAnimationFrameData frameData = vaFrameData.data[offset];

		vec3 vpos0;
		vec3 vnorm0;
		float vwrinkle0;
		get_vertex_anim_vertex_position(frameData.srcFrameOffset,vpos0,vnorm0,vwrinkle0);

		vec3 vpos1;
		vec3 vnorm1;
		float vwrinkle1;
		get_vertex_anim_vertex_position(frameData.srcFrameOffset,vpos1,vnorm1,vwrinkle1);

		vertPos += vpos0 *frameData.blend;//v0 +(v1 -v0) *frameData.blend;
	}

	mat4 mBone = calc_bone_matrix(is_weighted(),is_weighted_ext());
	vec4 weightedVertPos = mBone *vec4(vertPos,1.0);

	mat4 mdlMatrix = get_model_matrix();
	vec4 vposWs = mdlMatrix *weightedVertPos;
	if(is_3d_sky())
	{
		vposWs.xyz -= u_pushConstants.scene.drawOrigin.xyz;
		vposWs.xyz *= u_pushConstants.scene.drawOrigin.w;
	}

	vec4 origPos = vposWs;

	mat4 V = get_view_matrix();
	gl_Position = API_COORD_TRANSFORM(u_camera.P) *V *vposWs;

	vposWs.xyz /= vposWs.w;
	vposWs.w = 1.0;

	apply_clip_plane(u_pushConstants.scene.clipPlane,vposWs.xyz);

	// Prev pos
	mat4 prevMdlMatrix = u_pushConstants.prevPose;
	vec3 angularVelocity = u_motionBlurData.angularCameraVelocity.xyz /100.0;
	vec4 vposWsPrev = prevMdlMatrix *weightedVertPos;

	vec3 camVel = u_motionBlurData.linearCameraVelocity.xyz;
	mat4 TEST = inverse(V);
	vec3 camPos = vec3(TEST[3][0],TEST[3][1],TEST[3][2]);//94.0427 ,64.4967 ,-274.699);//V[0][3],V[1][3],V[2][3]);

	vec3 r = origPos.xyz - camPos;
	camVel = camVel + cross(angularVelocity, r);

	vposWs.xyz += camVel;

	//vposWsPrev.xyz /= vposWsPrev.w;
	//vposWsPrev.w = 1.0;

	vec4 prevPos = API_COORD_TRANSFORM(u_camera.P) *V *vposWsPrev;

	vs_out.curPos = API_COORD_TRANSFORM(u_camera.P) *V *vposWs;
	vs_out.prevPos = prevPos;
}
