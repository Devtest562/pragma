#ifndef F_FS_PBR_LIGHTING_GLS
#define F_FS_PBR_LIGHTING_GLS

#include "material.gls"
#include "normal.gls"
#include "lighting_direct.gls"
#include "lighting/ibl.gls"
#include "lighting/light_spot.gls"
#include "lighting/light_point.gls"
#include "lighting/light_directional.gls"
#include "/modules/fs_renderer.gls"
#include "/modules/sh_entity_info.gls"
#include "/modules/sh_instance_info.gls"
#include "/modules/light_map/fs_lightmap.gls"
#include "/modules/fs_ssao.gls"

vec3 apply_lighting(LightSourceData light,uint lightIndex,MaterialInfo materialInfo,vec3 normal,vec3 view)
{
	bool enableShadows = are_shadows_enabled();
	return ((light.flags &FLIGHT_TYPE_SPOT) == 0) ? apply_spot_light(light,lightIndex,materialInfo,normal,view,fs_in.vert_pos_ws.xyz,enableShadows) :
		apply_point_light(light,lightIndex,materialInfo,normal,view,fs_in.vert_pos_ws.xyz,enableShadows);
}

vec3 calc_pbr_lighting(vec2 uv,MaterialInfo materialInfo,vec4 baseColor)
{
	vec3 color = vec3(0.0, 0.0, 0.0);

	vec3 normal = get_normal_from_map(uv);
	normal = normalize((get_model_matrix() *vec4(normal.xyz,0.0)).xyz);

	vec3 view = normalize(u_renderSettings.posCam - fs_in.vert_pos_ws.xyz);

	bool useLightmaps = false;
	if(CSPEC_ENABLE_LIGHT_MAPS == 1)
	{
		useLightmaps = is_light_map_enabled();
		if(useLightmaps)
			color = baseColor.rgb;
	}
	if(CSPEC_ENABLE_IBL == 1)
	{
		/*else *///if(is_ibl_enabled())
		   color += get_ibl_contribution(materialInfo, normal, view, get_reflection_probe_intensity());
	}

	if(CSPEC_ENABLE_LIGHT_MAPS == 1)
	{
		if(useLightmaps)
		{
			vec4 colLightMap = texture(u_lightMap,fs_in.vert_uv_lightmap.xy);
			color.rgb = color.rgb *(get_lightmap_exposure_pow() *colLightMap.rgb);
		}
	}

	if(CSPEC_ENABLE_LIGHT_SOURCES == 1 && CSPEC_ENABLE_DYNAMIC_LIGHTING == 1)
		color += calc_pbr_direct_lighting(materialInfo,normal,view,fs_in.vert_pos_ws.xyz,are_shadows_enabled());
	return color;
}

#endif
