#ifndef F_ANIMATED_TEXTURE_GLS
#define F_ANIMATED_TEXTURE_GLS

// Obsolete!
// TODO: Remove this file
#if 0
#include "sh_time.gls"

layout(std140,LAYOUT_ID(SHADER_UNIFORM_TEXTURE_ANIMATION_SET,SHADER_UNIFORM_TEXTURE_ANIMATION_BINDING)) uniform TextureAnimation
{
	int offset;
	int frames;
	int fps;
	int rows;
	int columns;
} u_animation;

vec2 get_animation_frame_uv_coordinates(vec2 UV,uint frame)
{
	float w = 1.0 /u_animation.columns;
	float h = 1.0 /u_animation.rows;
	frame %= u_animation.frames;

	vec2 texUV;
	texUV.x = UV.x /u_animation.columns +w *(frame -1);
	texUV.y = (UV.y /u_animation.rows) +h *(floor((frame -1) /u_animation.columns));
	return texUV;
}
vec2 get_animated_texture_uv(vec2 UV,float tCur,float tStart,out float remainder,out uint frameIndex)
{
	if(u_animation.frames == 0)
	{
		remainder = 0.0;
		frameIndex = 0;
		return UV;
	}
	float frame = u_animation.offset;
	float w = 1.0 /u_animation.columns;
	float h = 1.0 /u_animation.rows;
	if(u_animation.fps > 0)
	{
		float t = max(tCur -tStart,0.0);
		float scale = float(u_animation.frames) /float(u_animation.fps);
		float r = t /scale;
		r = (t -floor(r) *scale) /scale;
		r *= u_animation.frames;
		remainder = mod(r,1.0);
		frame += floor(r);
	}
	else
	{
		float t = tStart;
		float scale = t;
		float r = scale *u_animation.frames;
		float rFloor = floor(r);
		remainder = r -rFloor;
		frame += rFloor;
	}
	++frame;
	frameIndex = uint(frame);
	return get_animation_frame_uv_coordinates(UV,frameIndex);
}
vec2 get_animated_texture_uv(vec2 UV,float tCur,float tStart)
{
	float remainder;
	uint frameIndex;
	return get_animated_texture_uv(UV,tCur,tStart,remainder,frameIndex);
}
vec2 get_animated_texture_uv(vec2 UV,float tStart) {return get_animated_texture_uv(UV,u_time.curTime,tStart);}
vec2 get_animated_texture_uv(vec2 UV) {return get_animated_texture_uv(UV,0);}
#endif

#endif
