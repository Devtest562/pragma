#version 440

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(location = 0) in vec2 vs_vert_uv;

layout(LAYOUT_ID(0,0)) uniform sampler2D u_texture;
layout(LAYOUT_ID(1,0)) uniform sampler2D u_textureVelocity;

layout(location = 0) out vec4 fs_color;

void main()
{
	vec4 color = texture(u_texture,vs_vert_uv);
	vec3 velocity = texture(u_textureVelocity,vs_vert_uv).xyz;

	//if(true)
	//{
	//	fs_color = vec4(velocity,1);
	//	return;
	//}

	//velocity *= uVelocityScale;
	float uVelocityScale = 4.0;
	velocity.xy = velocity.xy *uVelocityScale;




	    // Get the initial color at this pixel.   
	    vec2 texCoord = vs_vert_uv;
	    vec4 testColor = texture(u_texture, texCoord); 
	    texCoord += velocity.xy; 
	    uint g_numSamples = 20;
	    for(int i = 1; i < g_numSamples; ++i, texCoord += velocity.xy) {   
	    	// Sample the color buffer along the velocity vector.    
	    	vec4 currentColor = texture(u_texture, texCoord);   
	    	// Add the current color to our color sum.   
	    	testColor += currentColor; 
	    } // Average all of the samples to get the final blur color.    
	    vec4 finalColor = testColor / g_numSamples;






	//float speed = length(velocity / texelSize);
	//nSamples = clamp(int(speed), 1, MAX_SAMPLES);
	vec2 texelSize = 1.0 / vec2(1920,1080);
	float speed = length(velocity.xy /texelSize);
	uint MAX_SAMPLES = 40;
	uint nSamples = clamp(int(speed), 1, MAX_SAMPLES);

	for (int i = 1; i < nSamples; ++i) {
		vec2 offset = velocity.xy * (float(i) / float(nSamples - 1) - 0.5);
		color.rgb += texture(u_texture, vs_vert_uv + offset).rgb;
	}
	color.rgb /= float(nSamples);
	fs_color = finalColor;//color;
}
