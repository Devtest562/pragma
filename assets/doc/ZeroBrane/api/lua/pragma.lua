return {
	["_G"] = {
		type = "lib",
		description = [[]],
		childs = {
			["e"] = {
				type = "function",
				description = [[]],
				args = "(l: ,o: )",
				returns = "()",
				valuetype = ""
			},
			["class_names"] = {
				type = "function",
				description = [[]],
				args = "(arg0: )",
				returns = "()",
				valuetype = ""
			},
			["ec"] = {
				type = "function",
				description = [[]],
				args = "(l: ,o: ,o2: )",
				returns = "()",
				valuetype = ""
			},
			["Quaternion"] = {
				type = "function",
				description = [[]],
				args = "(forward: root.vector.Vector,up: root.vector.Vector)",
				returns = "(root.math.QuaternionInternal)",
				valuetype = "QuaternionInternal"
			},
			["class_info"] = {
				type = "function",
				description = [[]],
				args = "(arg0: )",
				returns = "(root.class_info_data)",
				valuetype = "class_info_data"
			},
			["exec"] = {
				type = "function",
				description = [[]],
				args = "(l: ,f: )",
				returns = "()",
				valuetype = ""
			},
			["include"] = {
				type = "function",
				description = [[]],
				args = "(l: ,f: )",
				returns = "()",
				valuetype = ""
			},
			["get_script_path"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["ents"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_closest"] = {
				type = "function",
				description = [[]],
				args = "(l: ,origin: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["get_all"] = {
				type = "function",
				description = [[]],
				args = "(l: ,filters: )",
				returns = "()",
				valuetype = ""
			},
			["get_spawned"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["find_by_component"] = {
				type = "function",
				description = [[]],
				args = "(l: ,componentName: )",
				returns = "()",
				valuetype = ""
			},
			["get_players"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_by_index"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_npcs"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["find_in_sphere"] = {
				type = "function",
				description = [[]],
				args = "(l: ,origin: root.vector.Vector,radius: )",
				returns = "()",
				valuetype = ""
			},
			["get_world"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_weapons"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_vehicles"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["find_by_class"] = {
				type = "function",
				description = [[]],
				args = "(l: ,className: )",
				returns = "()",
				valuetype = ""
			},
			["get_by_local_index"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["find_by_unique_index"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["iterator"] = {
				type = "function",
				description = [[]],
				args = "(arg0: ,arg1: ,arg2: )",
				returns = "()",
				valuetype = ""
			},
			["get_null"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_component_id"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["find_by_filter"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: )",
				returns = "()",
				valuetype = ""
			},
			["find_by_name"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: )",
				returns = "()",
				valuetype = ""
			},
			["find_in_aabb"] = {
				type = "function",
				description = [[]],
				args = "(l: ,min: root.vector.Vector,max: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["get_sorted_by_distance"] = {
				type = "function",
				description = [[]],
				args = "(l: ,origin: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["find_in_cone"] = {
				type = "function",
				description = [[]],
				args = "(l: ,origin: root.vector.Vector,dir: root.vector.Vector,radius: ,angle: )",
				returns = "()",
				valuetype = ""
			},
			["create_trigger"] = {
				type = "function",
				description = [[]],
				args = "(l: ,origin: root.vector.Vector,radius: )",
				returns = "()",
				valuetype = ""
			},
			["create_prop"] = {
				type = "function",
				description = [[]],
				args = "(l: ,mdl: )",
				returns = "()",
				valuetype = ""
			},
			["register"] = {
				type = "function",
				description = [[]],
				args = "(arg0: ,arg1: ,arg2: )",
				returns = "()",
				valuetype = ""
			},
			["get_farthest"] = {
				type = "function",
				description = [[]],
				args = "(l: ,origin: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["get_random"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["register_component_net_event"] = {
				type = "function",
				description = [[]],
				args = "(l: ,componentId: ,name: )",
				returns = "()",
				valuetype = ""
			},
			["register_component_event"] = {
				type = "function",
				description = [[]],
				args = "(l: ,componentId: ,name: )",
				returns = "()",
				valuetype = ""
			},
			["get_component_name"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["create"] = {
				type = "function",
				description = [[]],
				args = "(l: ,classname: )",
				returns = "()",
				valuetype = ""
			},
			["tf2"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["LightSpotVolComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ObservableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetLocalCameraOrigin"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ObservableComponent,camType: ,origin: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalCameraOrigin"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ObservableComponent,camType: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocalCameraOffset"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ObservableComponent,camType: ,offset: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalCameraOffset"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ObservableComponent,camType: )",
						returns = "()",
						valuetype = ""
					},
					["GetCameraOffsetProperty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ObservableComponent,camType: )",
						returns = "()",
						valuetype = ""
					},
					["GetCameraData"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ObservableComponent,camType: )",
						returns = "()",
						valuetype = ""
					},
					["SetCameraEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ObservableComponent,camType: ,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetCameraEnabledProperty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ObservableComponent,camType: )",
						returns = "()",
						valuetype = ""
					},
					["CAMERA_TYPE_FIRST_PERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CAMERA_TYPE_THIRD_PERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CameraData"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetAngleLimits"] = {
								type = "method",
								description = [[]],
								args = "(obsCamData: root.ents.ObservableComponent.CameraData)",
								returns = "()",
								valuetype = ""
							},
							["ClearAngleLimits"] = {
								type = "method",
								description = [[]],
								args = "(obsCamData: root.ents.ObservableComponent.CameraData)",
								returns = "()",
								valuetype = ""
							},
							["SetAngleLimits"] = {
								type = "method",
								description = [[]],
								args = "(obsCamData: root.ents.ObservableComponent.CameraData,min: root.math.EulerAngles,max: root.math.EulerAngles)",
								returns = "()",
								valuetype = ""
							},
							["enabled"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["localOrigin"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["offset"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rotateWithObservee"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["IteratorFilterBox"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.vector.Vector,arg2: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DebugConeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilter"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["DebugPlaneComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["Animated2Component"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.Animated2Component,playbackRate: )",
						returns = "()",
						valuetype = ""
					},
					["ClearAnimationManagers"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.Animated2Component)",
						returns = "()",
						valuetype = ""
					},
					["RemoveAnimationManager"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.Animated2Component,manager: root.animation.Manager)",
						returns = "()",
						valuetype = ""
					},
					["GetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.Animated2Component)",
						returns = "()",
						valuetype = ""
					},
					["GetPlaybackRateProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.Animated2Component)",
						returns = "()",
						valuetype = ""
					},
					["AddAnimationManager"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.Animated2Component)",
						returns = "(root.animation.Manager)",
						valuetype = "Manager"
					},
					["GetAnimationManagers"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.Animated2Component)",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationManager"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.Animated2Component,idx: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["FuncPhysicsComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["DebugBoxComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["LogicComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["EVENT_ON_TICK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IteratorFilterSphere"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.vector.Vector,arg2: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IOComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["Input"] = {
						type = "method",
						description = [[]],
						args = "(hIo: root.ents.IOComponent,input: )",
						returns = "()",
						valuetype = ""
					},
					["StoreOutput"] = {
						type = "method",
						description = [[]],
						args = "(hIo: root.ents.IOComponent,name: ,info: )",
						returns = "()",
						valuetype = ""
					},
					["FireOutput"] = {
						type = "method",
						description = [[]],
						args = "(hIo: root.ents.IOComponent,name: ,hEnt: root.ents.Entity,flags: )",
						returns = "()",
						valuetype = ""
					},
					["IO_FLAG_BIT_FORCE_DELAYED_FIRE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IO_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DebugSphereComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["FuncPortalComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ShooterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["FireBullets"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ShooterComponent,o: )",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_FIRE_BULLETS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IteratorFilterName"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["LogicRelayComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintBallSocketComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["LightPointComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["FlammableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetIgnitableProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.FlammableComponent)",
						returns = "()",
						valuetype = ""
					},
					["Ignite"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlammableComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsOnFire"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlammableComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsIgnitable"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlammableComponent)",
						returns = "()",
						valuetype = ""
					},
					["Extinguish"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlammableComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetIgnitable"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlammableComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetOnFireProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.FlammableComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_EXTINGUISHED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_IGNITED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["WaterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["CreateSplash"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent,origin: root.vector.Vector,radius: ,force: )",
						returns = "()",
						valuetype = ""
					},
					["GetStiffness"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent,coefficient: )",
						returns = "()",
						valuetype = ""
					},
					["SetStiffness"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent,stiffness: )",
						returns = "()",
						valuetype = ""
					},
					["GetPropagation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetPropagation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent,propagation: )",
						returns = "()",
						valuetype = ""
					},
					["GetWaterVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetDensity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent,coefficient: )",
						returns = "()",
						valuetype = ""
					},
					["SetWaterVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent,velocity: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetDensity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent,density: )",
						returns = "()",
						valuetype = ""
					},
					["GetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["CalcLineSurfaceIntersection"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent,lineOrigin: root.vector.Vector,lineDir: root.vector.Vector,bCull: )",
						returns = "()",
						valuetype = ""
					},
					["GetWaterPlane"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["ProjectToSurface"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetWaterSceneDepthTexture"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetReflectionScene"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetWaterSceneTexture"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WaterComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_WATER_SURFACE_SIMULATOR_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["CharacterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetStepOffset"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["NormalizeViewRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewForward"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetTurnSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewUp"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewRight"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GiveWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,className: )",
						returns = "()",
						valuetype = ""
					},
					["Ragdolize"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetUpDirectionProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent,slopeLimit: )",
						returns = "()",
						valuetype = ""
					},
					["SetNoTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetStepOffset"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent,stepOffset: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveWeapons"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetTurnSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent,turnSpeed: )",
						returns = "()",
						valuetype = ""
					},
					["SetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent,up: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetViewAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["SetViewRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["HolsterWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetHitboxPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetActiveWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["LocalOrientationToWorld"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetJumpPowerProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetWeapons"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,className: )",
						returns = "()",
						valuetype = ""
					},
					["GetAmmoCount"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.CharacterComponent,ammoType: )",
						returns = "()",
						valuetype = ""
					},
					["GetWeaponCount"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMoveController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,className: )",
						returns = "()",
						valuetype = ""
					},
					["GetAimRayData"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,maxDist: )",
						returns = "()",
						valuetype = ""
					},
					["GetSlopeLimitProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["FootStep"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,foot: )",
						returns = "()",
						valuetype = ""
					},
					["SetNeckControllers"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,yawController: ,pitchController: )",
						returns = "()",
						valuetype = ""
					},
					["GetNeckYawController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetNeckPitchController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetOrientationAxes"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetMoveController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,moveController: ,moveControllerY: )",
						returns = "()",
						valuetype = ""
					},
					["GetMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRelativeVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetOrientation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,up: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["RemoveAmmo"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.CharacterComponent,ammoType: ,count: )",
						returns = "()",
						valuetype = ""
					},
					["IsMoving"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalOrientationAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalOrientationRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["DropActiveWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["DeployWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,hWep: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalOrientationViewAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalOrientationViewRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["Attack4"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["WorldToLocalOrientation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["PrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetShootPos"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetAmmoCount"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.CharacterComponent,ammoType: ,count: )",
						returns = "()",
						valuetype = ""
					},
					["AddAmmo"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.CharacterComponent,ammoType: ,count: )",
						returns = "()",
						valuetype = ""
					},
					["GetStepOffsetProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetJumpPower"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetJumpPower"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CharacterComponent,jumpPower: )",
						returns = "()",
						valuetype = ""
					},
					["DropWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,hWep: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["ReloadWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["Jump"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CharacterComponent,velocity: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["RemoveWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,hWep: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["SelectNextWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SelectPreviousWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["TertiaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetNoTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetFaction"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent,faction: )",
						returns = "()",
						valuetype = ""
					},
					["SetGodMode"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetGodMode"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFaction"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFrozenProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsAlive"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsDead"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsFrozen"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetFrozen"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["Kill"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetOrientationAxesRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "(hEntity: root.ents.CharacterComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_CALC_MOVEMENT_ACCELERATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CALC_MOVEMENT_DIRECTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CALC_MOVEMENT_SPEED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_JUMP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEPLOY_WEAPON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CALC_AIR_MOVEMENT_MODIFIER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_FOOT_STEP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_VIEW_ROTATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_IS_MOVING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_CHARACTER_ORIENTATION_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEATH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_KILLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RESPAWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SET_ACTIVE_WEAPON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PLAY_FOOTSTEP_SOUND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOOT_LEFT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOOT_RIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderTargetComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ViewBodyComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointTargetComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterEntity"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IteratorFilterUuid"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SkyboxComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetSkyAngles"] = {
						type = "method",
						description = [[]],
						args = "(hNPC: root.ents.SkyboxComponent,skyAngles: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetSkyAngles"] = {
						type = "method",
						description = [[]],
						args = "(hNPC: root.ents.SkyboxComponent,skyAngles: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IteratorFilterModel"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["FogControllerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundEmitterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["CreateSound"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.SoundEmitterComponent,sndname: ,soundType: ,bTransmit: )",
						returns = "()",
						valuetype = ""
					},
					["StopSounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.SoundEmitterComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.SoundEmitterComponent)",
						returns = "()",
						valuetype = ""
					},
					["EmitSound"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.SoundEmitterComponent,sndname: ,soundType: ,gain: ,pitch: ,bTransmit: )",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_SOUND_CREATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["WorldComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetBSPTree"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WorldComponent)",
						returns = "()",
						valuetype = ""
					},
					["BSPTree"] = {
						type = "class",
						description = [[]],
						childs = {
							["IsValid"] = {
								type = "method",
								description = [[]],
								args = "(tree: root.ents.WorldComponent.BSPTree)",
								returns = "()",
								valuetype = ""
							},
							["IsClusterVisible"] = {
								type = "method",
								description = [[]],
								args = "(tree: root.ents.WorldComponent.BSPTree,clusterSrc: ,clusterDst: )",
								returns = "()",
								valuetype = ""
							},
							["GetRootNode"] = {
								type = "method",
								description = [[]],
								args = "(tree: root.ents.WorldComponent.BSPTree)",
								returns = "()",
								valuetype = ""
							},
							["GetClusterVisibility"] = {
								type = "method",
								description = [[]],
								args = "(tree: root.ents.WorldComponent.BSPTree)",
								returns = "()",
								valuetype = ""
							},
							["GetNodes"] = {
								type = "method",
								description = [[]],
								args = "(tree: root.ents.WorldComponent.BSPTree)",
								returns = "()",
								valuetype = ""
							},
							["GetClusterCount"] = {
								type = "method",
								description = [[]],
								args = "(tree: root.ents.WorldComponent.BSPTree)",
								returns = "()",
								valuetype = ""
							},
							["FindLeafNode"] = {
								type = "method",
								description = [[]],
								args = "(tree: root.ents.WorldComponent.BSPTree,origin: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["FindLeafNodesInAABB"] = {
								type = "method",
								description = [[]],
								args = "(tree: root.ents.WorldComponent.BSPTree,min: root.vector.Vector,max: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["Node"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetInternalNodeFaceCount"] = {
										type = "method",
										description = [[]],
										args = "(node: root.ents.WorldComponent.BSPTree.Node)",
										returns = "()",
										valuetype = ""
									},
									["GetBounds"] = {
										type = "method",
										description = [[]],
										args = "(node: root.ents.WorldComponent.BSPTree.Node)",
										returns = "()",
										valuetype = ""
									},
									["GetChildren"] = {
										type = "method",
										description = [[]],
										args = "(node: root.ents.WorldComponent.BSPTree.Node)",
										returns = "()",
										valuetype = ""
									},
									["GetIndex"] = {
										type = "method",
										description = [[]],
										args = "(node: root.ents.WorldComponent.BSPTree.Node)",
										returns = "()",
										valuetype = ""
									},
									["IsLeaf"] = {
										type = "method",
										description = [[]],
										args = "(node: root.ents.WorldComponent.BSPTree.Node)",
										returns = "()",
										valuetype = ""
									},
									["GetCluster"] = {
										type = "method",
										description = [[]],
										args = "(node: root.ents.WorldComponent.BSPTree.Node)",
										returns = "()",
										valuetype = ""
									},
									["GetVisibleLeafAreaBounds"] = {
										type = "method",
										description = [[]],
										args = "(node: root.ents.WorldComponent.BSPTree.Node)",
										returns = "()",
										valuetype = ""
									},
									["GetInternalNodePlane"] = {
										type = "method",
										description = [[]],
										args = "(node: root.ents.WorldComponent.BSPTree.Node)",
										returns = "()",
										valuetype = ""
									},
									["GetInternalNodeFirstFaceIndex"] = {
										type = "method",
										description = [[]],
										args = "(node: root.ents.WorldComponent.BSPTree.Node)",
										returns = "()",
										valuetype = ""
									}
								}
							},

						}
					},

				}
			},
			["SceneComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetParticleSystemColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderParticleSystems"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetDebugMode"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,drawSceneInfo: root.game.DrawSceneInfo,renderMode: )",
						returns = "()",
						valuetype = ""
					},
					["GetRenderQueue"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,renderMode: ,translucent: )",
						returns = "()",
						valuetype = ""
					},
					["InitializeRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,width: ,height: )",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["BuildRenderQueue"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,drawSceneInfo: root.game.DrawSceneInfo)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,width: ,height: )",
						returns = "()",
						valuetype = ""
					},
					["SetOcclusionCullingMethod"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,method: )",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,sceneOther: root.ents.SceneComponent,linkCamera: )",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetActiveCamera"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetActiveCamera"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,hCam: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["BeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["UpdateBuffers"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,hCommandBuffer: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetWorldEnvironment"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetWorldEnvironment"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["ClearWorldEnvironment"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetCameraDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewCameraDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetDebugMode"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,debugMode: )",
						returns = "()",
						valuetype = ""
					},
					["RenderPrepass"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,drawSceneInfo: root.game.DrawSceneInfo,renderMode: )",
						returns = "()",
						valuetype = ""
					},
					["GetRenderer"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetRenderer"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,renderer: root.ents.RendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSceneIndex"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetParticleSystemColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(scene: root.ents.SceneComponent,factor: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["DEBUG_MODE_ALBEDO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_REFLECTANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_AMBIENT_OCCLUSION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_DIFFUSE_LIGHTING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_NORMAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_EMISSION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_NORMAL_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_METALNESS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_ROUGHNESS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_BRUTE_FORCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_CHC_PLUSPLUS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_BSP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_INERT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_OCTREE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_TARGET_TEXTURE_BLOOM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_TARGET_TEXTURE_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_TARGET_TEXTURE_DEPTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_IBL_IRRADIANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_IBL_PREFILTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ACTIVE_CAMERA_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CreateInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["sampleCount"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["PointConstraintSliderComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["FlashlightComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["GamemodeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(hGm: root.ents.GamemodeComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetIdentifier"] = {
						type = "method",
						description = [[]],
						args = "(hGm: root.ents.GamemodeComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAuthor"] = {
						type = "method",
						description = [[]],
						args = "(hGm: root.ents.GamemodeComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetGamemodeVersion"] = {
						type = "method",
						description = [[]],
						args = "(hGm: root.ents.GamemodeComponent)",
						returns = "(root.util.Version)",
						valuetype = "Version"
					},
					["EVENT_ON_PLAYER_JOINED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_GAME_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_GAME_READY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MAP_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_DEATH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_SPAWNED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_DROPPED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_READY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FuncSoftPhysicsComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ExplosionComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ButtonComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintHingeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["EnvSoundProbeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PlayerSpawnComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["LightComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetFalloffExponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLightIntensityCandela"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetFalloffExponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightComponent,falloffExponent: )",
						returns = "()",
						valuetype = ""
					},
					["SetLightIntensityType"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightComponent,type: )",
						returns = "()",
						valuetype = ""
					},
					["SetLightIntensity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightComponent,intensity: ,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetLightIntensityType"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLightIntensity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightComponent)",
						returns = "()",
						valuetype = ""
					},
					["UpdateBuffers"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.LightComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetAddToGameScene"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.LightComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetShadowType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.LightComponent,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetShadowType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.LightComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetMorphTargetsInShadowsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.LightComponent,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["AreMorphTargetsInShadowsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.LightComponent)",
						returns = "()",
						valuetype = ""
					},
					["INTENSITY_TYPE_CANDELA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INTENSITY_TYPE_LUX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INTENSITY_TYPE_LUMEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_PASS_ENTITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_PASS_MESH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_PASS_ENTITY_MESH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SHADOW_BUFFER_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_GET_TRANSFORMATION_MATRIX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_UPDATE_RENDER_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_SHADOW_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SHADOW_TYPE_FULL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SHADOW_TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SHADOW_TYPE_STATIC_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["EntityComponent"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetNextTick"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,dt: )",
						returns = "()",
						valuetype = ""
					},
					["AddEventCallback"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,eventId: ,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["RegisterNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetComponentName"] = {
						type = "method",
						description = [[]],
						args = "(component: root.ents.EntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,udm: root.udm.LinkedPropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["InjectEvent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,eventId: ,object: )",
						returns = "()",
						valuetype = ""
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,udm: root.udm.LinkedPropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,hComponentOther: root.ents.EntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["SendNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,eventId: ,packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["BroadcastEvent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,eventId: ,object: )",
						returns = "()",
						valuetype = ""
					},
					["InvokeEventCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,eventId: ,object: )",
						returns = "()",
						valuetype = ""
					},
					["GetEntity"] = {
						type = "method",
						description = [[]],
						args = "(component: root.ents.EntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetComponentId"] = {
						type = "method",
						description = [[]],
						args = "(component: root.ents.EntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetTickPolicy"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent,tickPolicy: )",
						returns = "()",
						valuetype = ""
					},
					["GetTickPolicy"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetNextTick"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.EntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["CALLBACK_TYPE_COMPONENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CALLBACK_TYPE_ENTITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FREGISTER_BIT_NETWORKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FREGISTER_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["CSMComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ModelComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetBodyGroups"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,t: )",
						returns = "()",
						valuetype = ""
					},
					["LookupAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ModelComponent,anim: )",
						returns = "()",
						valuetype = ""
					},
					["GetModelName"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetMaterialOverride"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,matSrc: ,matDst: )",
						returns = "()",
						valuetype = ""
					},
					["LookupBlendController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ModelComponent,controller: )",
						returns = "()",
						valuetype = ""
					},
					["LookupAttachment"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ModelComponent,attachment: )",
						returns = "()",
						valuetype = ""
					},
					["GetHitboxCount"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetHitboxBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ModelComponent,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ModelComponent,boneName: )",
						returns = "()",
						valuetype = ""
					},
					["GetAttachmentTransform"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ModelComponent,attachment: )",
						returns = "()",
						valuetype = ""
					},
					["GetLOD"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetModel"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,mdl: )",
						returns = "()",
						valuetype = ""
					},
					["SetSkin"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,skin: )",
						returns = "()",
						valuetype = ""
					},
					["GetSkin"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSkinProperty"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetRandomSkin"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetModel"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,groupId: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxDrawDistance"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,maxDrawDist: )",
						returns = "()",
						valuetype = ""
					},
					["GetBodyGroups"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,groupId: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetRenderMaterial"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,matIdx: )",
						returns = "()",
						valuetype = ""
					},
					["ClearMaterialOverride"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,matIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaterialOverride"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent,matIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxDrawDistance"] = {
						type = "method",
						description = [[]],
						args = "(hModel: root.ents.ModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_MODEL_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MODEL_MATERIALS_LOADED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_MESHES_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["GenericComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintConeTwistComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointAtTargetComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetPointAtTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PointAtTargetComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPointAtTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PointAtTargetComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["PointConstraintDoFComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintFixedComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PropComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspFlangerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PathNodeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspEchoComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterNameOrClass"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["PropDynamicComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PropPhysicsComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["FireComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["TriggerGravityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["TriggerHurtComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspEqualizerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["TriggerPushComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["TriggerRemoveComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["LightMapComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetLightmapTexture"] = {
						type = "method",
						description = [[]],
						args = "(hLightMapC: root.ents.LightMapComponent)",
						returns = "()",
						valuetype = ""
					},
					["ConvertLightmapToBSPLuxelData"] = {
						type = "method",
						description = [[]],
						args = "(hLightMapC: root.ents.LightMapComponent)",
						returns = "()",
						valuetype = ""
					},
					["UpdateLightmapUvBuffers"] = {
						type = "method",
						description = [[]],
						args = "(hLightMapC: root.ents.LightMapComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetLightmapAtlas"] = {
						type = "method",
						description = [[]],
						args = "(hLightMapC: root.ents.LightMapComponent,path: )",
						returns = "()",
						valuetype = ""
					},
					["ReloadLightmapData"] = {
						type = "method",
						description = [[]],
						args = "(hLightMapC: root.ents.LightMapComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetExposure"] = {
						type = "method",
						description = [[]],
						args = "(hLightMapC: root.ents.LightMapComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetExposure"] = {
						type = "method",
						description = [[]],
						args = "(hLightMapC: root.ents.LightMapComponent,exposure: )",
						returns = "()",
						valuetype = ""
					},
					["GetExposureProperty"] = {
						type = "method",
						description = [[]],
						args = "(hLightMapC: root.ents.LightMapComponent)",
						returns = "()",
						valuetype = ""
					},
					["BakeSettings"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetColorTransform"] = {
								type = "method",
								description = [[]],
								args = "(bakeSettings: root.ents.LightMapComponent.BakeSettings,config: ,look: )",
								returns = "()",
								valuetype = ""
							},
							["ResetColorTransform"] = {
								type = "method",
								description = [[]],
								args = "(bakeSettings: root.ents.LightMapComponent.BakeSettings)",
								returns = "()",
								valuetype = ""
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["globalLightIntensityFactor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["denoise"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["createAsRenderJob"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["samples"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rebuildUvAtlas"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["height"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["exposure"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["width"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["TriggerTeleportComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SpriteComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["StopAndRemoveEntity"] = {
						type = "method",
						description = [[]],
						args = "(hSprite: root.ents.SpriteComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TouchComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetTriggerFlags"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.TouchComponent,triggerFlags: )",
						returns = "()",
						valuetype = ""
					},
					["GetTriggerFlags"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.TouchComponent,triggerFlags: )",
						returns = "()",
						valuetype = ""
					},
					["GetTouchingEntityCount"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.TouchComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetTouchingEntities"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.TouchComponent)",
						returns = "()",
						valuetype = ""
					},
					["TRIGGER_FLAG_EVERYTHING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_BIT_PLAYERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_BIT_NPCS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_BIT_PHYSICS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CAN_TRIGGER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_TOUCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_START_TOUCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TRIGGER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TRIGGER_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IteratorFilterClass"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["FilterNameComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["ShouldPass"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.FilterNameComponent,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_NAME_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["CompositeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["AddEntity"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CompositeComponent,hEnt: root.ents.Entity,groupName: )",
						returns = "()",
						valuetype = ""
					},
					["ClearEntities"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CompositeComponent,groupName: ,safely: )",
						returns = "()",
						valuetype = ""
					},
					["GetEntities"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CompositeComponent,groupName: )",
						returns = "()",
						valuetype = ""
					},
					["GetRootGroup"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CompositeComponent,name: )",
						returns = "(root.ents.CompositeComponent.CompositeGroup)",
						valuetype = "CompositeGroup"
					},
					["CompositeGroup"] = {
						type = "class",
						description = [[]],
						childs = {
							["AddEntity"] = {
								type = "method",
								description = [[]],
								args = "(hComponent: root.ents.CompositeComponent.CompositeGroup,hEnt: root.ents.Entity,groupName: )",
								returns = "()",
								valuetype = ""
							},
							["GetChildGroups"] = {
								type = "method",
								description = [[]],
								args = "(hComponent: root.ents.CompositeComponent.CompositeGroup,name: )",
								returns = "()",
								valuetype = ""
							},
							["RemoveEntity"] = {
								type = "method",
								description = [[]],
								args = "(hComponent: root.ents.CompositeComponent.CompositeGroup,hEnt: root.ents.Entity)",
								returns = "()",
								valuetype = ""
							},
							["ClearEntities"] = {
								type = "method",
								description = [[]],
								args = "(hComponent: root.ents.CompositeComponent.CompositeGroup,groupName: ,safely: )",
								returns = "()",
								valuetype = ""
							},
							["AddChildGroup"] = {
								type = "method",
								description = [[]],
								args = "(hComponent: root.ents.CompositeComponent.CompositeGroup,name: )",
								returns = "(root.ents.CompositeComponent.CompositeGroup)",
								valuetype = "CompositeGroup"
							},
							["GetEntities"] = {
								type = "method",
								description = [[]],
								args = "(hComponent: root.ents.CompositeComponent.CompositeGroup)",
								returns = "()",
								valuetype = ""
							}
						}
					},

				}
			},
			["InfoLandmarkComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["DecalComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["CreateFromProjection"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.DecalComponent,tMeshes: )",
						returns = "()",
						valuetype = ""
					},
					["DebugDraw"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.DecalComponent,duration: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["LightDirectionalComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightDirectionalComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAmbientColorProperty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightDirectionalComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightDirectionalComponent,color: root.util.Color)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["GravityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetGravityScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.GravityComponent,scale: )",
						returns = "()",
						valuetype = ""
					},
					["SetGravityOverride"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.GravityComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasGravityForceOverride"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.GravityComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasGravityDirectionOverride"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.GravityComponent)",
						returns = "()",
						valuetype = ""
					},
					["CalcBallisticVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.GravityComponent,origin: root.vector.Vector,destPos: root.vector.Vector,fireAngle: ,maxSpeed: ,spread: ,maxPitch: ,maxYaw: )",
						returns = "()",
						valuetype = ""
					},
					["GetGravityDirection"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.GravityComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetGravity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.GravityComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetGravityForce"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.GravityComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["LightSpotComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetOuterCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightSpotComponent,ang: )",
						returns = "()",
						valuetype = ""
					},
					["GetOuterCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightSpotComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetInnerCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightSpotComponent,ang: )",
						returns = "()",
						valuetype = ""
					},
					["GetInnerCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.LightSpotComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RadiusComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetRadiusProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RadiusComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRadius"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RadiusComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetRadius"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RadiusComponent,radius: )",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_RADIUS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetRenderClipPlane"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent,clipPlane: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderModeProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetTransformationMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent,mode: )",
						returns = "()",
						valuetype = ""
					},
					["GetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderOffsetTransform"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalRenderSphereBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["ClearRenderClipPlane"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["ClearDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAbsoluteRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAbsoluteRenderSphereBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsReceivingShadows"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetLocalRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent,min: root.vector.Vector,max: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLODMeshes"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetRenderBufferDirty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderMeshes"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLodRenderMeshes"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent,lod: )",
						returns = "()",
						valuetype = ""
					},
					["SetExemptFromOcclusionCulling"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent,exempt: )",
						returns = "()",
						valuetype = ""
					},
					["ClearRenderOffsetTransform"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsExemptFromOcclusionCulling"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent,d: ,delta: )",
						returns = "()",
						valuetype = ""
					},
					["CalcRayIntersection"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent,start: root.vector.Vector,dir: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetDepthPassEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent,depthPassEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["IsDepthPassEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderClipPlane"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderPose"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["ShouldCastShadows"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetRenderOffsetTransform"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent,pose: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["ShouldDraw"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["ShouldDrawShadow"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["ClearBuffers"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetReceiveShadows"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.RenderComponent,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["EVENT_SHOULD_DRAW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_DRAW_SHADOW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_WORLD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_SKYBOX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_VIEW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_WATER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEPTH_BIAS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_CLIP_PLANE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_BOUNDS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_MODE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_BUFFERS_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_UPDATE_RENDER_MATRICES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_UPDATE_INSTANTIABILITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ToggleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["TurnOn"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ToggleComponent)",
						returns = "()",
						valuetype = ""
					},
					["Toggle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ToggleComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ToggleComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsTurnedOff"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ToggleComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ToggleComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetTurnedOnProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ToggleComponent)",
						returns = "()",
						valuetype = ""
					},
					["TurnOff"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.ToggleComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_TURN_OFF"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TURN_ON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TimeScaleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetTimeScale"] = {
						type = "method",
						description = [[]],
						args = "(hTimeScale: root.ents.TimeScaleComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetTimeScale"] = {
						type = "method",
						description = [[]],
						args = "(hTimeScale: root.ents.TimeScaleComponent,timeScale: )",
						returns = "()",
						valuetype = ""
					},
					["GetEffectiveTimeScale"] = {
						type = "method",
						description = [[]],
						args = "(hTimeScale: root.ents.TimeScaleComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Entity"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["Disable"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,key: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["IsWorld"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["Spawn"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["RemoveComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,componentId: )",
						returns = "()",
						valuetype = ""
					},
					["InitializePhysics"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,type: )",
						returns = "()",
						valuetype = ""
					},
					["IsCharacter"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsNPC"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.ents.Entity,1: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetClass"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["DestroyPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["DropToFloor"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["BroadcastNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,protocol: ,eventId: )",
						returns = "()",
						valuetype = ""
					},
					["ClearParent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalIndex"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetShared"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsMapEntity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsPlayer"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsInert"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["RemoveSafely"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsScripted"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsStatic"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetParent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,hParent: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsSpawned"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsVehicle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["ClearModel"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["RemoveEntityOnRemoval"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,hEntOther: root.ents.Entity,Bool: )",
						returns = "()",
						valuetype = ""
					},
					["IsDisabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetSpawnFlags"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetPose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["ClearComponents"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetPose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,t: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["GetCenter"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["AddComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,componentId: )",
						returns = "()",
						valuetype = ""
					},
					["GetPhysicsComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetNameComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetModelComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["HasComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,object: )",
						returns = "()",
						valuetype = ""
					},
					["GetComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,object: )",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["C"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,object: )",
						returns = "()",
						valuetype = ""
					},
					["GetWeaponComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetComponents"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetTransformComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetModel"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetGenericComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetAirDensity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetSkin"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsDynamic"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetVehicleComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,bgId: )",
						returns = "()",
						valuetype = ""
					},
					["SetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,bgId: ,id: )",
						returns = "()",
						valuetype = ""
					},
					["GetAnimatedComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetModelName"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetUuid"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,uuid: )",
						returns = "()",
						valuetype = ""
					},
					["GetAttachmentPose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,attId: )",
						returns = "()",
						valuetype = ""
					},
					["IsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["Enable"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsShared"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsSynchronized"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetSynchronized"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetSnapshotDirty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,b: )",
						returns = "()",
						valuetype = ""
					},
					["AddNetworkedComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,component: )",
						returns = "()",
						valuetype = ""
					},
					["SetOwner"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,hOwner: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,udm: root.udm.LinkedPropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,udm: root.udm.LinkedPropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SendNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,protocol: ,eventId: ,rp: root.net.RecipientFilter)",
						returns = "()",
						valuetype = ""
					},
					["PlayActivity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,activity: )",
						returns = "()",
						valuetype = ""
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,anim: )",
						returns = "()",
						valuetype = ""
					},
					["GetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,velocity: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["AddVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,velocity: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,velocity: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["AddAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,velocity: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["PlayLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,slot: ,anim: ,flags: )",
						returns = "()",
						valuetype = ""
					},
					["PlayLayeredActivity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,slot: ,activity: ,flags: )",
						returns = "()",
						valuetype = ""
					},
					["StopLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,slot: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,mask: )",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,group: )",
						returns = "()",
						valuetype = ""
					},
					["TakeDamage"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,dmgInfo: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["CreateSound"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,sndname: ,soundType: )",
						returns = "()",
						valuetype = ""
					},
					["EmitSound"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,sndname: ,soundType: )",
						returns = "()",
						valuetype = ""
					},
					["TurnOn"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["TurnOff"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsTurnedOff"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetOwner"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetHealth"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetHealth"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,health: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,health: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,v: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["RemoveFromScene"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "(root.util.Color)",
						valuetype = "Color"
					},
					["Input"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,input: )",
						returns = "()",
						valuetype = ""
					},
					["SetSkin"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,skin: )",
						returns = "()",
						valuetype = ""
					},
					["GetUuid"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetAIComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetTimeScaleComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetPlayerComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetCharacterComponent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetModel"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,mdl: )",
						returns = "()",
						valuetype = ""
					},
					["GetActivity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["AddChild"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,hEntOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["IsInScene"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsClientsideOnly"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetClientIndex"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetSceneFlags"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["AddToScene"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity,scene: root.ents.SceneComponent)",
						returns = "()",
						valuetype = ""
					},
					["RemoveFromAllScenes"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_POST_SPAWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_KEY_VALUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_COMPONENT_ADDED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_REMOVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_COMPONENT_REMOVED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SPAWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SCENE_FLAGS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SHARED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_LOCAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["AttachableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["AttachToEntity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent,hParent: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["ClearAttachment"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetLocalPose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent,pose: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["AttachToBone"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent,hParent: root.ents.Entity,bone: )",
						returns = "()",
						valuetype = ""
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent)",
						returns = "()",
						valuetype = ""
					},
					["AttachToAttachment"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent,hParent: root.ents.Entity,attachment: )",
						returns = "()",
						valuetype = ""
					},
					["GetLocalPose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetBone"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetAttachmentFlags"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent,flags: )",
						returns = "()",
						valuetype = ""
					},
					["GetAttachmentFlags"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AttachableComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_ATTACHMENT_UPDATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_PLAYER_VIEW_YAW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_PLAYER_VIEW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_BONEMERGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_POSITION_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_UPDATE_EACH_FRAME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_SNAP_TO_ORIGIN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_FORCE_IN_PLACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_FORCE_ROTATION_IN_PLACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_FORCE_TRANSLATION_IN_PLACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AttachmentInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetRotation"] = {
								type = "method",
								description = [[]],
								args = "(attInfo: root.ents.AttachableComponent.AttachmentInfo)",
								returns = "()",
								valuetype = ""
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["SetOffset"] = {
								type = "method",
								description = [[]],
								args = "(attInfo: root.ents.AttachableComponent.AttachmentInfo)",
								returns = "()",
								valuetype = ""
							},
							["flags"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["TransformComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["LocalToWorld"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,origin: root.vector.Vector,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLastMoveTime"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,hOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetEyePos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,scale: )",
						returns = "()",
						valuetype = ""
					},
					["SetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,offset: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["WorldToLocal"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,origin: root.vector.Vector,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetYaw"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRoll"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,pitch: )",
						returns = "()",
						valuetype = ""
					},
					["SetYaw"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,yaw: )",
						returns = "()",
						valuetype = ""
					},
					["SetRoll"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,roll: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxAxisScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetDirection"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,hOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetAbsMaxAxisScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetDistance"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,hOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetDotProduct"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.TransformComponent,hOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ParentComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["OwnableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetOwner"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.OwnableComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetOwner"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.OwnableComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_OWNER_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DebugTextComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.DebugTextComponent,text: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DebugPointComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["DebugLineComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["HealthComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetHealth"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.HealthComponent,health: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.HealthComponent,maxHealth: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.HealthComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetHealth"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.HealthComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetHealthProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.HealthComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxHealthProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.HealthComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_TAKEN_DAMAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_HEALTH_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ColorComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetColorProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ColorComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ColorComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ColorComponent,color: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_COLOR_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DamageableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["TakeDamage"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.DamageableComponent,info: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_TAKE_DAMAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DebugCylinderComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["WheelComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["MicrophoneComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ParticleSystemComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["Die"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,t: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxParticleCount"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsActive"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetEffectiveAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetEmissionRate"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetNextParticleEmissionCount"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,count: )",
						returns = "()",
						valuetype = ""
					},
					["SetEmissionRate"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,emissionRate: )",
						returns = "()",
						valuetype = ""
					},
					["PauseEmission"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["ResumeEmission"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetLifeTime"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetStartTime"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsActiveOrPaused"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetNodeCount"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPrevControlPointPose"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,cpIdx: )",
						returns = "()",
						valuetype = ""
					},
					["SetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,alphaMode: )",
						returns = "()",
						valuetype = ""
					},
					["SetSortParticles"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,bSort: )",
						returns = "()",
						valuetype = ""
					},
					["GetSoftParticles"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["ShouldAutoSimulate"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["Simulate"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,tDelta: )",
						returns = "()",
						valuetype = ""
					},
					["IsAnimated"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsDying"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetAutoSimulate"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,autoSimulate: )",
						returns = "()",
						valuetype = ""
					},
					["GetSortParticles"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetSoftParticles"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,bSoft: )",
						returns = "()",
						valuetype = ""
					},
					["GetInitialColor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetControlPointRotation"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,cpIdx: ,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["SetControlPointPose"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,cpIdx: ,pose: root.phys.Transform,timeStamp: )",
						returns = "()",
						valuetype = ""
					},
					["GetParticleBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GenerateModel"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetInitialColor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,col: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["IsEmissionPaused"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,drawCmd: ,scene: root.ents.SceneComponent,renderer: ,renderFlags: )",
						returns = "()",
						valuetype = ""
					},
					["GetControlPointEntity"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,cpIdx: )",
						returns = "()",
						valuetype = ""
					},
					["SetParent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,hParent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsStatic"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,factor: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,bStopImmediately: )",
						returns = "()",
						valuetype = ""
					},
					["GetParticleBufferIndexFromParticleIndex"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,ptIdx: )",
						returns = "()",
						valuetype = ""
					},
					["SetControlPointPosition"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,cpIdx: ,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["CalcRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRadius"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetParticleAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSpriteSheetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["AddOperator"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["GetRenderParticleCount"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetParticleIndexFromParticleBufferIndex"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,ptBufIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetSimulationTime"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["RemoveChild"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,hChild: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasChild"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,hChild: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationSpriteSheetBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetExtent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,renderMode: )",
						returns = "()",
						valuetype = ""
					},
					["InitializeFromParticleSystemDefinition"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetControlPointEntity"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,cpIdx: ,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetControlPointPose"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,cpIdx: ,timeStamp: )",
						returns = "()",
						valuetype = ""
					},
					["GetParticles"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["AddInitializer"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["Start"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["AddChild"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,hChild: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetRadius"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,radius: )",
						returns = "()",
						valuetype = ""
					},
					["GetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["AddRenderer"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveInitializer"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveOperator"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveRenderer"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveInitializerByType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveOperatorByType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveRendererByType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetInitializers"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetOperators"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderers"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["FindInitializer"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["FindOperator"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["FindRenderer"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["FindInitializerByType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["FindOperatorByType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["FindRendererByType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetNodeTarget"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,nodeId: ,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetNodePosition"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,nodeId: )",
						returns = "()",
						valuetype = ""
					},
					["GetNodeTarget"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,nodeId: )",
						returns = "()",
						valuetype = ""
					},
					["SetRemoveOnComplete"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetExtent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,extent: )",
						returns = "()",
						valuetype = ""
					},
					["SetOrientationType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,orientationType: )",
						returns = "()",
						valuetype = ""
					},
					["GetOrientationType"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsContinuous"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetContinuous"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetRemoveOnComplete"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetBloomColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,factor: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["GetBloomColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetEffectiveBloomColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsBloomEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetParticleCount"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetParticle"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ParticleSystemComponent,idx: )",
						returns = "()",
						valuetype = ""
					},
					["RENDER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_WORLD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_STATIC"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_ALIGNED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_BILLBOARD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_UPRIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_FLAG_BIT_BLOOM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_FLAG_BIT_DEPTH_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_ADDITIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_PREMULTIPLIED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_ADDITIVE_BY_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_TRANSLUCENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_MASKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_OPAQUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ParticleOperator"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["CalcStrength"] = {
								type = "method",
								description = [[]],
								args = "(op: root.ents.ParticleSystemComponent.ParticleOperator,curTime: )",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["Particle"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetRadius"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,radius: )",
								returns = "()",
								valuetype = ""
							},
							["Die"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetInitialAnimationFrameOffset"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetLifeSpan"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetPosition"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["IsDying"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetColor"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,color: root.math.Vector4)",
								returns = "()",
								valuetype = ""
							},
							["SetSequence"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,sequence: )",
								returns = "()",
								valuetype = ""
							},
							["SetPosition"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,pos: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["Resurrect"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetColor"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["CalcRandomFloatExp"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,min: ,max: ,exp: ,seed: )",
								returns = "()",
								valuetype = ""
							},
							["CalcRandomInt"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,min: ,max: ,seed: )",
								returns = "()",
								valuetype = ""
							},
							["ShouldDraw"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["CalcRandomFloat"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,min: ,max: ,seed: )",
								returns = "()",
								valuetype = ""
							},
							["GetInitialLife"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetInitialRotation"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetTimeAlive"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetCameraDistance"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,dist: )",
								returns = "()",
								valuetype = ""
							},
							["GetInitialRadius"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetInitialLength"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetAlpha"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,a: )",
								returns = "()",
								valuetype = ""
							},
							["GetIndex"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetRotation"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,rot: )",
								returns = "()",
								valuetype = ""
							},
							["GetInitialColor"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetInitialAlpha"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetSequence"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetAlpha"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetOrigin"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetField"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,fieldId: )",
								returns = "()",
								valuetype = ""
							},
							["IsAlive"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetRotation"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetVelocity"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,vel: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["SetAlive"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,alive: )",
								returns = "()",
								valuetype = ""
							},
							["SetOrigin"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,origin: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["SetAngularVelocity"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,vel: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["GetVelocity"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetAngularVelocity"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetWorldRotation"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,rot: root.math.QuaternionInternal)",
								returns = "()",
								valuetype = ""
							},
							["GetWorldRotation"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetAnimationFrameOffset"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetDeathTime"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetTimeCreated"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetRotationYaw"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,rot: )",
								returns = "()",
								valuetype = ""
							},
							["SetLife"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,life: )",
								returns = "()",
								valuetype = ""
							},
							["SetPreviousPosition"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,prevPos: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["Reset"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,t: )",
								returns = "()",
								valuetype = ""
							},
							["GetLength"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetExtent"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetField"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,fieldId: ,value: )",
								returns = "()",
								valuetype = ""
							},
							["GetRotationYaw"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetRadius"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetPreviousPosition"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["GetLife"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetTimeAlive"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,life: )",
								returns = "()",
								valuetype = ""
							},
							["SetTimeCreated"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,time: )",
								returns = "()",
								valuetype = ""
							},
							["SetLength"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,len: )",
								returns = "()",
								valuetype = ""
							},
							["GetCameraDistance"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["SetAnimationFrameOffset"] = {
								type = "method",
								description = [[]],
								args = "(pt: root.ents.ParticleSystemComponent.Particle,offset: )",
								returns = "()",
								valuetype = ""
							},
							["FIELD_ID_ANGULAR_VELOCITY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ALPHA"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_CREATION_TIME"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_COLOR"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_VELOCITY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_INVALID"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_COUNT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_LENGTH"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_LIFE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ORIGIN"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_POS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_RADIUS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ROT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ROT_YAW"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_SEQUENCE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["BaseRenderer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleRenderer ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["SetShader"] = {
								type = "method",
								description = [[]],
								args = "(renderer: root.ents.ParticleSystemComponent.BaseRenderer,shader: root.shader.BaseParticle2D)",
								returns = "()",
								valuetype = ""
							},
							["OnParticleCreated"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["OnParticleSystemStopped"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["OnParticleSystemStarted"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["OnParticleDestroyed"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["Render"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.prosper.CommandBuffer,arg2: ,arg3: ,arg4: )",
								returns = "()",
								valuetype = ""
							},
							["GetShader"] = {
								type = "method",
								description = [[]],
								args = "(renderer: root.ents.ParticleSystemComponent.BaseRenderer)",
								returns = "()",
								valuetype = ""
							},
							["Initialize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["ParticleModifier"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(ptm: root.ents.ParticleSystemComponent.ParticleModifier,key: ,value: )",
								returns = "()",
								valuetype = ""
							},
							["SetPriority"] = {
								type = "method",
								description = [[]],
								args = "(ptm: root.ents.ParticleSystemComponent.ParticleModifier,priority: )",
								returns = "()",
								valuetype = ""
							},
							["GetKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(ptm: root.ents.ParticleSystemComponent.ParticleModifier,key: )",
								returns = "()",
								valuetype = ""
							},
							["GetPriority"] = {
								type = "method",
								description = [[]],
								args = "(ptm: root.ents.ParticleSystemComponent.ParticleModifier)",
								returns = "()",
								valuetype = ""
							},
							["GetType"] = {
								type = "method",
								description = [[]],
								args = "(ptm: root.ents.ParticleSystemComponent.ParticleModifier)",
								returns = "()",
								valuetype = ""
							},
							["GetKeyValues"] = {
								type = "method",
								description = [[]],
								args = "(ptm: root.ents.ParticleSystemComponent.ParticleModifier)",
								returns = "()",
								valuetype = ""
							},
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "(ptm: root.ents.ParticleSystemComponent.ParticleModifier)",
								returns = "()",
								valuetype = ""
							},
							["GetParticleSystem"] = {
								type = "method",
								description = [[]],
								args = "(ptm: root.ents.ParticleSystemComponent.ParticleModifier)",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["ParticleRenderer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {

						}
					},
					["BaseOperator"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleOperator ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["OnParticleDestroyed"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["Initialize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["OnParticleSystemStopped"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["OnParticleSystemStarted"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["Simulate"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.ents.ParticleSystemComponent.Particle,arg2: ,arg3: )",
								returns = "()",
								valuetype = ""
							},
							["OnParticleCreated"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["ParticleInitializer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {

						}
					},
					["BaseInitializer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleInitializer ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["OnParticleDestroyed"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							},
							["Initialize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["OnParticleSystemStopped"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["OnParticleSystemStarted"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["OnParticleCreated"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.ents.ParticleSystemComponent.Particle)",
								returns = "()",
								valuetype = ""
							}
						}
					},

				}
			},
			["QuakeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SmokeTrailComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetSoundSource"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,sndName: )",
						returns = "()",
						valuetype = ""
					},
					["SetGain"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,gain: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxDistance"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,maxDist: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxGain"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,maxGain: )",
						returns = "()",
						valuetype = ""
					},
					["SetRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,rolloffFactor: )",
						returns = "()",
						valuetype = ""
					},
					["SetMinGain"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,minGain: )",
						returns = "()",
						valuetype = ""
					},
					["SetInnerConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,angle: )",
						returns = "()",
						valuetype = ""
					},
					["SetOffset"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,offset: )",
						returns = "()",
						valuetype = ""
					},
					["SetOuterConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,angle: )",
						returns = "()",
						valuetype = ""
					},
					["GetOffset"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,offset: )",
						returns = "()",
						valuetype = ""
					},
					["GetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetReferenceDistance"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,referenceDist: )",
						returns = "()",
						valuetype = ""
					},
					["SetRelativeToListener"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,bRelative: )",
						returns = "()",
						valuetype = ""
					},
					["SetPlayOnSpawn"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,bPlayOnSpawn: )",
						returns = "()",
						valuetype = ""
					},
					["IsPaused"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetLooping"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,bLoop: )",
						returns = "()",
						valuetype = ""
					},
					["SetSoundTypes"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,soundTypes: )",
						returns = "()",
						valuetype = ""
					},
					["Play"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent)",
						returns = "()",
						valuetype = ""
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsPlaying"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent)",
						returns = "()",
						valuetype = ""
					},
					["Pause"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent,pitch: )",
						returns = "()",
						valuetype = ""
					},
					["GetSound"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SoundComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BaseEntity"] = {
				type = "class",
				inherits = "ents.Entity",
				description = [[]],
				childs = {
					["Initialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BaseEntityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["Initialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnTick"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["OnRemove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnEntitySpawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SendData"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,packet: root.net.Packet,rp: root.net.ClientRecipientFilter)",
						returns = "()",
						valuetype = ""
					},
					["SendSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,packet: root.net.Packet,pl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetEntityComponent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,componentName: )",
						returns = "()",
						valuetype = ""
					},
					["ReceiveNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,pl: root.ents.PlayerComponent,evId: ,packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["SetNetworked"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,bNetworked: )",
						returns = "()",
						valuetype = ""
					},
					["IsNetworked"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetShouldTransmitSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,bSend: )",
						returns = "()",
						valuetype = ""
					},
					["ShouldTransmitSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["AddEntityComponent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,name: ,methodNameOrFunction: )",
						returns = "()",
						valuetype = ""
					},
					["GetVersion"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.ents.BaseEntityComponent)",
						returns = "()",
						valuetype = ""
					},
					["BindComponentInitEvent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,componentId: ,methodNameOrFunction: )",
						returns = "()",
						valuetype = ""
					},
					["BindEvent"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,eventId: ,methodNameOrFunction: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnDetachedFromEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnAttachedToEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnMemberValueChanged"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,memberIndex: )",
						returns = "()",
						valuetype = ""
					},
					["FlagCallbackForRemoval"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,hCb: root.util.Callback,callbackType: )",
						returns = "()",
						valuetype = ""
					},
					["ReceiveData"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReceiveSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.BaseEntityComponent,packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_USE_HAS_GETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_USE_IS_GETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT_NETWORKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT_SNAPSHOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_SNAPSHOT_DATA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_TRANSMIT_ON_CHANGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_GETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_STORE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_SETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_KEY_VALUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_PROPERTY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_NETWORKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_OUTPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["PlayerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetObserverMode"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,mode: )",
						returns = "()",
						valuetype = ""
					},
					["GetSprintSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetObserverMode"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetFlashlightEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetObserverModeProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetActionInput"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,input: )",
						returns = "()",
						valuetype = ""
					},
					["ToggleFlashlight"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsFlashlightEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetActionInputAxisMagnitude"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,input: )",
						returns = "()",
						valuetype = ""
					},
					["SetObserverTarget"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,hEntTarget: )",
						returns = "()",
						valuetype = ""
					},
					["GetObserverTarget"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewPos"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsKeyDown"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,key: )",
						returns = "()",
						valuetype = ""
					},
					["ApplyViewRotationOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["SetRunSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,speed: )",
						returns = "()",
						valuetype = ""
					},
					["PrintMessage"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,msg: ,messageType: )",
						returns = "()",
						valuetype = ""
					},
					["Respawn"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["Kick"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,reason: )",
						returns = "()",
						valuetype = ""
					},
					["GetActionInputs"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetActionInputAxisMagnitude"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,input: ,magnitude: )",
						returns = "()",
						valuetype = ""
					},
					["SetActionInput"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,input: ,pressed: )",
						returns = "()",
						valuetype = ""
					},
					["SendResource"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetUtilityDrone"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)"
					},
					["GetTimeConnected"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRunSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,speed: )",
						returns = "()",
						valuetype = ""
					},
					["SetSprintSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,speed: )",
						returns = "()",
						valuetype = ""
					},
					["GetCrouchedWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetStandEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,eyelevel: )",
						returns = "()",
						valuetype = ""
					},
					["SetCrouchedWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,speed: )",
						returns = "()",
						valuetype = ""
					},
					["IsLocalPlayer"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetStandHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetStandHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,height: )",
						returns = "()",
						valuetype = ""
					},
					["GetCrouchHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetCrouchHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,height: )",
						returns = "()",
						valuetype = ""
					},
					["GetStandEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetCrouchEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetCrouchEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,eyelevel: )",
						returns = "()",
						valuetype = ""
					},
					["SetViewOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent,offset: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetViewOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsInFirstPersonMode"] = {
						type = "method",
						description = [[]],
						args = "(hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["MESSAGE_TYPE_CHAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MESSAGE_TYPE_CONSOLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_FIRSTPERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_THIRDPERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_ROAMING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_SHOULDER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_ACTION_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_OBSERVATION_MODE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RaytracingRendererComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["BrushComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["VelocityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetLocalVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetVelocityProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.VelocityComponent)",
						returns = "()",
						valuetype = ""
					},
					["AddLocalVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularVelocityProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.VelocityComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent)",
						returns = "()",
						valuetype = ""
					},
					["AddVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["AddAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetLocalAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["AddLocalAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VelocityComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["GlobalComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetGlobalName"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.GlobalComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetGlobalName"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.GlobalComponent,globalName: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["VehicleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetSpeedKmh"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSteeringFactor"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSteeringWheel"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasDriver"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetDriver"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent,hDriver: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetDriver"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent)",
						returns = "()",
						valuetype = ""
					},
					["ClearDriver"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPhysicsVehicle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetupSteeringWheel"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent,model: ,maxSteeringAngle: )",
						returns = "()",
						valuetype = ""
					},
					["SetupPhysics"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.VehicleComponent,vhcCreateInfo: root.phys.VehicleCreateInfo,oWheelModels: )",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_DRIVER_EXITED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DRIVER_ENTERED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IKComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetIKControllerEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.IKComponent,ikControllerId: ,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsIKControllerEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.IKComponent,ikControllerId: )",
						returns = "()",
						valuetype = ""
					},
					["SetIKEffectorPos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.IKComponent,ikControllerId: ,effectorIdx: ,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetIKEffectorPos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.IKComponent,ikControllerId: ,effectorIdx: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["WeaponComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetMaxPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,size: )",
						returns = "()",
						valuetype = ""
					},
					["AddPrimaryClip"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,num: )",
						returns = "()",
						valuetype = ""
					},
					["Holster"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetMaxSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,size: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPrimaryAmmoTypeProperty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["AddSecondaryClip"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,num: )",
						returns = "()",
						valuetype = ""
					},
					["RefillSecondaryClip"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["RefillPrimaryClip"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["Attack4"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["RemoveSecondaryClip"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["RemovePrimaryClip"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewModel"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetPrimaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,type: )",
						returns = "()",
						valuetype = ""
					},
					["SetSecondaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,type: )",
						returns = "()",
						valuetype = ""
					},
					["SecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPrimaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["TertiaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["PrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasPrimaryAmmo"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetNextPrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,t: )",
						returns = "()",
						valuetype = ""
					},
					["SetNextSecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,t: )",
						returns = "()",
						valuetype = ""
					},
					["SetNextAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,t: )",
						returns = "()",
						valuetype = ""
					},
					["SetAutomaticPrimary"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,size: )",
						returns = "()",
						valuetype = ""
					},
					["SetAutomaticSecondary"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["EndSecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetHideWorldModelInFirstPerson"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsAutomaticPrimary"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsAutomaticSecondary"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["Deploy"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsDeployed"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPrimaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSecondaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSecondaryAmmoTypeProperty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsPrimaryClipEmpty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewModelOffset"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasSecondaryAmmo"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsSecondaryClipEmpty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent,size: )",
						returns = "()",
						valuetype = ""
					},
					["HasAmmo"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["Reload"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSecondaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxPrimaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxSecondaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["EndAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["EndPrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["PlayViewActivity"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent,activity: )",
						returns = "()",
						valuetype = ""
					},
					["SetViewModel"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent,mdl: )",
						returns = "()",
						valuetype = ""
					},
					["GetHideWorldModelInFirstPerson"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetViewModelOffset"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent,offset: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetViewFOV"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent,fov: )",
						returns = "()",
						valuetype = ""
					},
					["GetViewFOV"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsInFirstPersonMode"] = {
						type = "method",
						description = [[]],
						args = "(hWep: root.ents.WeaponComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_PRIMARY_CLIP_SIZE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ATTACK4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PRIMARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TERTIARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SECONDARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEPLOY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_PRIMARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RELOAD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_SECONDARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_HOLSTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SECONDARY_CLIP_SIZE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ATTACH_TO_OWNER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SoundDspChorusComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["UsableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["EVENT_CAN_USE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_USE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["MapComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetMapIndex"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.MapComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SubmergibleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["IsSubmerged"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.SubmergibleComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSubmergedFraction"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.SubmergibleComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsInWater"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.SubmergibleComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsFullySubmerged"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.SubmergibleComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSubmergedFractionProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SubmergibleComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetWaterEntity"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.SubmergibleComponent)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_WATER_EMERGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WATER_ENTERED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WATER_EXITED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WATER_SUBMERGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["AIComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetMoveSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hNPC: root.ents.AIComponent,animId: ,speed: )",
						returns = "()",
						valuetype = ""
					},
					["CanHear"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetMaxViewDistance"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,distance: )",
						returns = "()",
						valuetype = ""
					},
					["GetLookTarget"] = {
						type = "method",
						description = [[]],
						args = "(hNPC: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMoveSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hNPC: root.ents.AIComponent,animId: )",
						returns = "()",
						valuetype = ""
					},
					["SetLookTarget"] = {
						type = "method",
						description = [[]],
						args = "(hNPC: root.ents.AIComponent,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["ClearMoveSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hNPC: root.ents.AIComponent,animId: )",
						returns = "()",
						valuetype = ""
					},
					["GetPrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["PlayActivity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,activity: ,info: root.ents.AIComponent.AnimationInfo)",
						returns = "()",
						valuetype = ""
					},
					["CancelSchedule"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["ClearLookTarget"] = {
						type = "method",
						description = [[]],
						args = "(hNPC: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["StartSchedule"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,sched: )",
						returns = "()",
						valuetype = ""
					},
					["SetSquad"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,squadName: )",
						returns = "()",
						valuetype = ""
					},
					["IsMoving"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSquadName"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["ClearRelationship"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,faction: )",
						returns = "()",
						valuetype = ""
					},
					["SetRelationship"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,faction: ,disposition: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxViewDistance"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxViewAngle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsInMemory"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,hEntOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetMaxViewAngle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,ang: )",
						returns = "()",
						valuetype = ""
					},
					["GetSquad"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetDisposition"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,faction: )",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentSchedule"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMemory"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMemoryDuration"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetControllable"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["Memorize"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,hEntOther: root.ents.Entity,memType: )",
						returns = "()",
						valuetype = ""
					},
					["GetController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsAnimationLocked"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["Forget"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,hEntOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetHearingStrength"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,strength: )",
						returns = "()",
						valuetype = ""
					},
					["ClearMemory"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsInViewCone"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,hEntOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetHearingStrength"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetMemoryDuration"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,dur: )",
						returns = "()",
						valuetype = ""
					},
					["IsAIEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["CanSee"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMemoryFragmentCount"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasPrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetNPCState"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetNPCState"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,state: )",
						returns = "()",
						valuetype = ""
					},
					["SetAIEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["EnableAI"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["DisableAI"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["MoveTo"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,pos: root.vector.Vector,info: root.ai.MoveInfo)",
						returns = "()",
						valuetype = ""
					},
					["IsControllable"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["StartControl"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["LockAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["EndControl"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsControlled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["StopMoving"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsEnemy"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,hEntOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["TurnStep"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,turnTarget: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetDistanceToMoveTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMoveTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasReachedDestination"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMoveActivity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetControllerActionInput"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["TriggerScheduleInterrupt"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,flags: )",
						returns = "()",
						valuetype = ""
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AIComponent,animation: ,info: root.ents.AIComponent.AnimationInfo)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_CONTROLLER_ACTION_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_CONTROL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_NPC_STATE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MEMORY_GAINED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_LOOK_TARGET_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TARGET_ACQUIRED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MEMORY_LOST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PATH_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PATH_NODE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PRIMARY_TARGET_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SUSPICIOUS_SOUND_HEARED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SCHEDULE_COMPLETE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SCHEDULE_STARTED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_START_CONTROL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TARGET_VISIBILITY_LOST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TARGET_VISIBILITY_REACQUIRED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SELECT_CONTROLLER_SCHEDULE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SELECT_SCHEDULE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AnimationInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetFacePrimaryTarget"] = {
								type = "method",
								description = [[]],
								args = "(info: root.ents.AIComponent.AnimationInfo)",
								returns = "()",
								valuetype = ""
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["ClearFaceTarget"] = {
								type = "method",
								description = [[]],
								args = "(info: root.ents.AIComponent.AnimationInfo)",
								returns = "()",
								valuetype = ""
							},
							["SetFaceTarget"] = {
								type = "method",
								description = [[]],
								args = "(info: root.ents.AIComponent.AnimationInfo,hEnt: root.ents.Entity)",
								returns = "()",
								valuetype = ""
							},
							["flags"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["playAsSchedule"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["PhysicsComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,min: root.vector.Vector,max: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionCenter"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["ApplyTorqueImpulse"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,torque: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["InitializePhysics"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,shape: )",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionExtents"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionContactReportEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetMoveType"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,moveType: )",
						returns = "()",
						valuetype = ""
					},
					["GetMoveType"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["DestroyPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["DropToFloor"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsTrigger"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPhysJointConstraints"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetKinematic"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsKinematic"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAABBDistance"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,hOther: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,bool: )",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionContactReportEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,bool: )",
						returns = "()",
						valuetype = ""
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,force: root.vector.Vector,relPos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,mask: )",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,group: )",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilter"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,group: ,mask: )",
						returns = "()",
						valuetype = ""
					},
					["EnableCollisions"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["DisableCollisions"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,b: )",
						returns = "()",
						valuetype = ""
					},
					["ResetCollisions"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,hEntOther: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRotatedCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["ApplyTorque"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,torque: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetPhysicsType"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionRadius"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsPhysicsProp"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsRagdoll"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent)",
						returns = "()",
						valuetype = ""
					},
					["ApplyImpulse"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.PhysicsComponent,impulse: root.vector.Vector,relPos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["MOVETYPE_PHYSICS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_FLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_FREE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_NOCLIP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_WALK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_RAYCAST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_INITIALIZE_PHYSICS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DYNAMIC_PHYSICS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PHYSICS_DESTROYED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PHYSICS_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PHYSICS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_POST_PHYSICS_SIMULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PRE_PHYSICS_SIMULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SLEEP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WAKE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IteratorFilterCone"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.vector.Vector,arg2: root.vector.Vector,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["CameraComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetProjectionMatrixProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewMatrixProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["UpdateViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetNearZProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFarZProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFOVProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAspectRatioProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetAspectRatio"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,aspectRatio: )",
						returns = "()",
						valuetype = ""
					},
					["SetNearZ"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,nearZ: )",
						returns = "()",
						valuetype = ""
					},
					["GetPlaneBoundaries"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetFarZ"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,farZ: )",
						returns = "()",
						valuetype = ""
					},
					["GetFrustumNeighbors"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,planeID: )",
						returns = "()",
						valuetype = ""
					},
					["GetFOV"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFOVRad"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetNearZ"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetAspectRatio"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFarZ"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFrustumPlanes"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFrustumPoints"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFarPlaneCenter"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["LookAt"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,lookAtPos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetNearPlaneCenter"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["DepthToDistance"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,depth: ,nearZ: ,farZ: )",
						returns = "()",
						valuetype = ""
					},
					["GetPlaneCenter"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,z: )",
						returns = "()",
						valuetype = ""
					},
					["GetFarPlaneBoundaries"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["UpdateProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetNearPlaneBoundaries"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["SetViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["GetNearPlaneBounds"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFarPlaneBounds"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,z: )",
						returns = "()",
						valuetype = ""
					},
					["GetNearPlanePoint"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,uv: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["GetFarPlanePoint"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,uv: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["GetPlanePoint"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,z: ,uv: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["GetFrustumPlaneCornerPoints"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,planeA: ,planeB: )",
						returns = "()",
						valuetype = ""
					},
					["CreateFrustumKDop"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,uvStart: root.math.Vector2,uvEnd: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["CreateFrustumMesh"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,uvStart: root.math.Vector2,uvEnd: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["ScreenSpaceToWorldSpace"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,uv: root.math.Vector2,width: ,height: )",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["WorldSpaceToScreenSpace"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,point: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["WorldSpaceToScreenSpaceDirection"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,dir: root.vector.Vector)",
						returns = "(root.math.Vector2)",
						valuetype = "Vector2"
					},
					["CalcScreenSpaceDistance"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,point: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["CalcRayDirection"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,uv: root.math.Vector2)",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["GetProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["UpdateMatrices"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetFOV"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.CameraComponent,fov: )",
						returns = "()",
						valuetype = ""
					},
					["DEFAULT_FAR_Z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEFAULT_FOV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEFAULT_NEAR_Z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEFAULT_VIEWMODEL_FOV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IteratorFilterComponent"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ScoreComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetScoreProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ScoreComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetScore"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ScoreComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetScore"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ScoreComponent,score: )",
						returns = "()",
						valuetype = ""
					},
					["SubtractScore"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ScoreComponent,score: )",
						returns = "()",
						valuetype = ""
					},
					["AddScore"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.ScoreComponent,score: )",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_SCORE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["AnimatedComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["StopLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,slot: )",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationObject"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetSkeletonUpdateCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["BindAnimationEvent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,eventId: ,component: root.ents.EntityComponent,methodName: )",
						returns = "()",
						valuetype = ""
					},
					["PlayLayeredActivity"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,slot: ,activity: )",
						returns = "()",
						valuetype = ""
					},
					["GetLayeredAnimations"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetActivity"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetBonePos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["PlayLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,slot: ,anim: )",
						returns = "()",
						valuetype = ""
					},
					["SetRootPoseBoneId"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["GetLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,slot: )",
						returns = "()",
						valuetype = ""
					},
					["ClearAnimationEvents"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,anim: ,frameId: )",
						returns = "()",
						valuetype = ""
					},
					["GetLayeredActivity"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,slot: )",
						returns = "()",
						valuetype = ""
					},
					["GetLayeredAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,layerIdx: )",
						returns = "()",
						valuetype = ""
					},
					["ApplyLayeredAnimations"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,dt: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["GetBonePose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["SetGlobalBonePos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetLayeredAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,layerIdx: ,flags: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneBindPose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["SetCycle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,cycle: )",
						returns = "()",
						valuetype = ""
					},
					["GetBonePos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["GetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["GetLocalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["GetGlobalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["PlayActivity"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,activity: )",
						returns = "()",
						valuetype = ""
					},
					["GetGlobalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneRotation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["SetBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,pos: root.vector.Vector,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetCycle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["SetBonePose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,pose: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["UpdateEffectiveBoneTransforms"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetBoneAngles"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["SetBoneScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,pos: root.vector.Vector,rot: root.math.QuaternionInternal,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneRenderMatrices"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetLocalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,pose: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["GetRootPoseBoneId"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetLocalBonePos"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["AddAnimationEvent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,anim: ,frameId: ,f: )",
						returns = "()",
						valuetype = ""
					},
					["GetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,controller: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocalBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["SetBindPose"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,frame: root.Animation.Frame)",
						returns = "()",
						valuetype = ""
					},
					["SetGlobalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,pos: root.vector.Vector,rot: root.math.QuaternionInternal,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["InjectAnimationEvent"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,eventId: ,args: )",
						returns = "()",
						valuetype = ""
					},
					["GetVertexPosition"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,subMesh: ,vertexId: )",
						returns = "()",
						valuetype = ""
					},
					["SetGlobalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,pose: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["GetBaseAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetGlobalBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,boneIdentifier: ,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetEffectiveBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,boneIdentifier: )",
						returns = "()",
						valuetype = ""
					},
					["SetEffectiveBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,boneIdentifier: ,t: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["SetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,controller: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetAnimatedRootPoseTransformEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetBindPose"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["IsAnimatedRootPoseTransformEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["AddRootPoseBone"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetBaseAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.AnimatedComponent,flags: )",
						returns = "()",
						valuetype = ""
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,anim: )",
						returns = "()",
						valuetype = ""
					},
					["GetPlaybackRateProperty"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetBoneRenderMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,boneIndex: ,m: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["SetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,rate: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneRenderMatrix"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,boneIndex: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["AreSkeletonUpdateCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalVertexPosition"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.AnimatedComponent,subMesh: ,vertexId: )",
						returns = "()",
						valuetype = ""
					},
					["EVENT_MAINTAIN_ANIMATION_MOVEMENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_MAINTAIN_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_MAINTAIN_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_LOOP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_SNAP_TO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_RESET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_TRANSFORM_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_POSES_FINALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_ANIMATION_EVENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATIONS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATION_COMPLETE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_LAYERED_ANIMATION_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BLEND_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATION_RESET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATION_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_LAYERED_ANIMATION_COMPLETE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_LAYERED_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_LAYERED_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_STOP_LAYERED_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PLAY_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_UPDATE_BONES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_MATRICES_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_UPDATE_BONE_POSES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_BUFFER_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SKELETON_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_TRANSLATE_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_TRANSLATE_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_TRANSLATE_LAYERED_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SoundDspDistortionComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspEAXReverbComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["BotComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["NameComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.NameComponent,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetNameProperty"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.NameComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.NameComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["NetworkedComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundScapeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["EnvTimeScaleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["WindComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["RasterizationRendererComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetShaderOverride"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,srcName: ,dstName: )",
						returns = "()",
						valuetype = ""
					},
					["GetPrepassMode"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetSSAOEnabled"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,ssaoEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["ClearShaderOverride"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,srcName: )",
						returns = "()",
						valuetype = ""
					},
					["GetLightSourceDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetPrepassMode"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,mode: )",
						returns = "()",
						valuetype = ""
					},
					["IsSSAOEnabled"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPostPrepassDepthTexture"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetLightingPassCommandBufferRecorder"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "(root.prosper.CommandBufferRecorder)",
						valuetype = "CommandBufferRecorder"
					},
					["EndRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,drawSceneInfo: root.game.DrawSceneInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetPostProcessingDepthDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPostProcessingHDRColorDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetBloomTexture"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderTargetTextureDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["ReloadPresentationRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["ScheduleMeshForRendering"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,scene: root.ents.SceneComponent,renderMode: ,mat: root.game.Material,hEnt: root.ents.Entity,mesh: root.game.Model.Mesh.Sub)",
						returns = "()",
						valuetype = ""
					},
					["RecordPrepass"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,drawSceneInfo: root.game.DrawSceneInfo)",
						returns = "()",
						valuetype = ""
					},
					["RecordLightingPass"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,drawSceneInfo: root.game.DrawSceneInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetPrepassDepthTexture"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["ExecutePrepass"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,drawSceneInfo: root.game.DrawSceneInfo)",
						returns = "()",
						valuetype = ""
					},
					["ExecuteLightingPass"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,drawSceneInfo: root.game.DrawSceneInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetPrepassCommandBufferRecorder"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "(root.prosper.CommandBufferRecorder)",
						valuetype = "CommandBufferRecorder"
					},
					["GetShadowCommandBufferRecorder"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "(root.prosper.CommandBufferRecorder)",
						valuetype = "CommandBufferRecorder"
					},
					["UpdatePrepassRenderBuffers"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,drawSceneInfo: root.game.DrawSceneInfo)",
						returns = "()",
						valuetype = ""
					},
					["UpdateLightingPassRenderBuffers"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,drawSceneInfo: root.game.DrawSceneInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetPrepassNormalTexture"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPrepassShader"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["BeginRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RasterizationRendererComponent,drawSceneInfo: root.game.DrawSceneInfo)",
						returns = "()",
						valuetype = ""
					},
					["EVENT_POST_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_POST_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_POST_EXECUTE_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_POST_EXECUTE_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PREPASS_MODE_DISABLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PREPASS_MODE_DEPTH_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PREPASS_MODE_EXTENDED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RECORD_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RECORD_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_EXECUTE_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_EXECUTE_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FilterClassComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["ShouldPass"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.FilterClassComponent,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["KinematicComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["vrp"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["VertexAnimatedComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetLocalVertexPosition"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.VertexAnimatedComponent,subMesh: ,vertexId: )",
						returns = "()",
						valuetype = ""
					},
					["GetVertexAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.VertexAnimatedComponent)",
						returns = "()",
						valuetype = ""
					},
					["UpdateVertexAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.VertexAnimatedComponent,drawCmd: )",
						returns = "()",
						valuetype = ""
					},
					["GetVertexAnimationBufferMeshOffset"] = {
						type = "method",
						description = [[]],
						args = "(hAnim: root.ents.VertexAnimatedComponent,subMesh: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["WeatherComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["EyeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetEyeShift"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: ,eyeShift: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetEyeJitter"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: )",
						returns = "()",
						valuetype = ""
					},
					["SetIrisDilation"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: ,dilation: )",
						returns = "()",
						valuetype = ""
					},
					["SetEyeJitter"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: ,eyeJitter: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["GetIrisDilation"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: )",
						returns = "()",
						valuetype = ""
					},
					["GetEyeSize"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: )",
						returns = "()",
						valuetype = ""
					},
					["SetEyeSize"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: ,eyeSize: )",
						returns = "()",
						valuetype = ""
					},
					["CalcEyeballPose"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: )",
						returns = "()",
						valuetype = ""
					},
					["GetEyeballState"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: )",
						returns = "()",
						valuetype = ""
					},
					["ClearViewTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetBlinkDuration"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,blinkDuration: )",
						returns = "()",
						valuetype = ""
					},
					["GetBlinkDuration"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetBlinkingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,blinkingEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["IsBlinkingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetEyeShift"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,eyeIndex: )",
						returns = "()",
						valuetype = ""
					},
					["GetEyePose"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetViewTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetViewTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEye: root.ents.EyeComponent,viewTarget: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["EyeballState"] = {
						type = "class",
						description = [[]],
						childs = {
							["forward"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisProjectionU"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisProjectionV"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["origin"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["right"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["up"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["LightMapReceiverComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["UpdateLightmapUvData"] = {
						type = "method",
						description = [[]],
						args = "(hLightMapReceiverC: root.ents.LightMapReceiverComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BSPComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["EnvTimescaleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ReflectionProbeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetIBLStrength"] = {
						type = "method",
						description = [[]],
						args = "(hRp: root.ents.ReflectionProbeComponent)",
						returns = "()",
						valuetype = ""
					},
					["SetIBLStrength"] = {
						type = "method",
						description = [[]],
						args = "(hRp: root.ents.ReflectionProbeComponent,strength: )",
						returns = "()",
						valuetype = ""
					},
					["GetIBLMaterialFilePath"] = {
						type = "method",
						description = [[]],
						args = "(hRp: root.ents.ReflectionProbeComponent)",
						returns = "()",
						valuetype = ""
					},
					["CaptureIBLReflectionsFromScene"] = {
						type = "method",
						description = [[]],
						args = "(hRp: root.ents.ReflectionProbeComponent)",
						returns = "()",
						valuetype = ""
					},
					["RequiresRebuild"] = {
						type = "method",
						description = [[]],
						args = "(hRp: root.ents.ReflectionProbeComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SkyCameraComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PBRConverterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GenerateAmbientOcclusionMaps"] = {
						type = "method",
						description = [[]],
						args = "(hComponent: root.ents.PBRConverterComponent,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ShadowMapComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ShadowManagerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["WaterSurfaceComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ViewModelComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hVm: root.ents.ViewModelComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPlayer"] = {
						type = "method",
						description = [[]],
						args = "(hVm: root.ents.ViewModelComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SoftBodyComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["RaytracingComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["BSPLeafComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["RendererComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["InitializeRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RendererComponent,scene: root.ents.SceneComponent,width: ,height: )",
						returns = "()",
						valuetype = ""
					},
					["GetHDRPresentationTexture"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetPresentationTexture"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetSceneTexture"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RendererComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(renderer: root.ents.RendererComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["FlexComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetFlexAnimations"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexAnimationCount"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasFlexWeightOverride"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,flexId: )",
						returns = "()",
						valuetype = ""
					},
					["SetFlexWeightOverride"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,flexId: ,weight: )",
						returns = "()",
						valuetype = ""
					},
					["SetFlexAnimationCycle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,id: ,cycle: )",
						returns = "()",
						valuetype = ""
					},
					["PlayFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,id: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexWeight"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,flexId: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexAnimationCycle"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,id: )",
						returns = "()",
						valuetype = ""
					},
					["StopFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,id: )",
						returns = "()",
						valuetype = ""
					},
					["SetFlexAnimationPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,id: ,playbackRate: )",
						returns = "()",
						valuetype = ""
					},
					["SetFlexController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,flexName: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["GetScaledFlexController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,flexControllerId: )",
						returns = "()",
						valuetype = ""
					},
					["SetFlexControllerScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,scale: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexControllerScale"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexController"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,flexController: )",
						returns = "()",
						valuetype = ""
					},
					["ClearFlexWeightOverride"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,flexId: )",
						returns = "()",
						valuetype = ""
					},
					["SetFlexWeight"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,flexId: ,weight: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexWeights"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent)",
						returns = "()",
						valuetype = ""
					},
					["CalcFlexValue"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: root.ents.FlexComponent,flexId: )",
						returns = "()",
						valuetype = ""
					},
					["EVENT_ON_FLEX_CONTROLLERS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ListenerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["sweep"] = {
		type = "lib",
		description = [[]],
		childs = {
			["aabb_with_aabb"] = {
				type = "function",
				description = [[]],
				args = "(originA: root.vector.Vector,endA: root.vector.Vector,extentsA: root.vector.Vector,originB: root.vector.Vector,endB: root.vector.Vector,extentsB: root.vector.Vector,outResult: ,outTEntry: ,outTExit: ,outNormal: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["aabb_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(ext: root.vector.Vector,origin: root.vector.Vector,dir: root.vector.Vector,n: root.vector.Vector,d: ,outResult: ,outT: )",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["udm"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Array"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.udm.Array)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Data"] = {
				type = "class",
				description = [[]],
				childs = {
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.Data)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.Data,key: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.udm.Data)",
						returns = "()",
						valuetype = ""
					},
					["ResolveReferences"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.Data)",
						returns = "()",
						valuetype = ""
					},
					["GetAssetData"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.Data)",
						returns = "(root.udm.AssetData)",
						valuetype = "AssetData"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.Data,f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["GetRootElement"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.Data)",
						returns = "(root.udm.Element)",
						valuetype = "Element"
					},
					["SaveAscii"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.Data,f: root.file.File,flags: )",
						returns = "()",
						valuetype = ""
					},
					["LoadProperty"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.Data,path: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Element"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Element)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,size: )",
						returns = "()",
						valuetype = ""
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(el: root.udm.Element,key: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,key: )",
						returns = "()",
						valuetype = ""
					},
					["GetBlobData"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element)",
						returns = "()",
						valuetype = ""
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Element,propOther: root.udm.PropertyWrapper,mergeFlags: )",
						returns = "()",
						valuetype = ""
					},
					["SetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,name: ,type: ,t: ,arrayType: )",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetChildCount"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,key: )",
						returns = "()",
						valuetype = ""
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Element)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,idx: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddArray"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,name: ,size: ,type: ,arrayType: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["GetFromPath"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,path: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,key: ,ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["AddBlobFromArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,path: ,type: ,t: )",
						returns = "()",
						valuetype = ""
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,type: )",
						returns = "()",
						valuetype = ""
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,key: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.udm.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetArrayValuesFromBlob"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Element)",
						returns = "()",
						valuetype = ""
					},
					["Add"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,path: ,type: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddAssetData"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Element,path: )",
						returns = "(root.udm.AssetData)",
						valuetype = "AssetData"
					},
					["ToAssetData"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Element)",
						returns = "(root.udm.AssetData)",
						valuetype = "AssetData"
					}
				}
			},
			["Property"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Property)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,size: )",
						returns = "()",
						valuetype = ""
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(el: root.udm.Property,key: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,key: )",
						returns = "()",
						valuetype = ""
					},
					["GetBlobData"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property)",
						returns = "()",
						valuetype = ""
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Property,propOther: root.udm.PropertyWrapper,mergeFlags: )",
						returns = "()",
						valuetype = ""
					},
					["SetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,name: ,type: ,t: ,arrayType: )",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property)",
						returns = "()",
						valuetype = ""
					},
					["GetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetChildCount"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,key: )",
						returns = "()",
						valuetype = ""
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Property,propName: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Property)",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddArray"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,name: ,size: ,type: ,arrayType: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["GetFromPath"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,path: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,key: ,ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["AddBlobFromArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,path: ,type: ,t: )",
						returns = "()",
						valuetype = ""
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,type: )",
						returns = "()",
						valuetype = ""
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,key: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.udm.Property)",
						returns = "()",
						valuetype = ""
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property)",
						returns = "()",
						valuetype = ""
					},
					["GetArrayValuesFromBlob"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Property)",
						returns = "()",
						valuetype = ""
					},
					["Add"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,path: ,type: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddAssetData"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.Property,path: )",
						returns = "(root.udm.AssetData)",
						valuetype = "AssetData"
					},
					["ToAssetData"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.Property)",
						returns = "(root.udm.AssetData)",
						valuetype = "AssetData"
					}
				}
			},
			["Struct"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.udm.StructDescription)",
						returns = "()",
						valuetype = ""
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(strct: root.udm.Struct)",
						returns = "()",
						valuetype = ""
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "(strct: root.udm.Struct)",
						returns = "(root.udm.StructDescription)",
						valuetype = "StructDescription"
					}
				}
			},
			["Reference"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetProperty"] = {
						type = "method",
						description = [[]],
						args = "(ref: root.udm.Reference)",
						returns = "(root.udm.PropertyWrapper)",
						valuetype = "PropertyWrapper"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.udm.Reference)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["StructDescription"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMemberCount"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.StructDescription)",
						returns = "()",
						valuetype = ""
					},
					["GetTypes"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.StructDescription)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetNames"] = {
						type = "method",
						description = [[]],
						args = "(udmData: root.udm.StructDescription)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Srgba"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.udm.Srgba)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["HdrColor"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.udm.HdrColor)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["AssetData"] = {
				type = "class",
				inherits = "udm.LinkedPropertyWrapper",
				description = [[]],
				childs = {
					["GetAssetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetAssetVersion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetData"] = {
						type = "method",
						description = [[]],
						args = "(a: root.udm.AssetData,prop: )",
						returns = "()",
						valuetype = ""
					},
					["SetAssetType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "(a: root.udm.AssetData)",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["SetAssetVersion"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["LinkedPropertyWrapper"] = {
				type = "class",
				inherits = "udm.PropertyWrapper",
				description = [[]],
				childs = {
					["GetPath"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.LinkedPropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["ClaimOwnership"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.LinkedPropertyWrapper)",
						returns = "(root.udm.Property)",
						valuetype = "Property"
					},
					["GetAssetData"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.LinkedPropertyWrapper)",
						returns = "(root.udm.AssetData)",
						valuetype = "AssetData"
					}
				}
			},
			["PropertyWrapper"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.PropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["It"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.udm.PropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,key: )",
						returns = "()",
						valuetype = ""
					},
					["GetBlobData"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.udm.PropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.PropertyWrapper,propOther: root.udm.PropertyWrapper,mergeFlags: )",
						returns = "()",
						valuetype = ""
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["GetArrayValuesFromBlob"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,name: ,type: ,t: ,arrayType: )",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["GetChildCount"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,key: )",
						returns = "()",
						valuetype = ""
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.PropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,idx: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddArray"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,name: ,size: ,type: ,arrayType: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["GetFromPath"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,path: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,key: ,ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,type: )",
						returns = "()",
						valuetype = ""
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,key: )",
						returns = "()",
						valuetype = ""
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(el: root.udm.PropertyWrapper,key: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,size: )",
						returns = "()",
						valuetype = ""
					},
					["AddBlobFromArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,path: ,type: ,t: )",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.PropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["Add"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,path: ,type: )",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddAssetData"] = {
						type = "method",
						description = [[]],
						args = "(p: root.udm.PropertyWrapper,path: )",
						returns = "(root.udm.AssetData)",
						valuetype = "AssetData"
					},
					["ToAssetData"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.udm.PropertyWrapper)",
						returns = "(root.udm.AssetData)",
						valuetype = "AssetData"
					}
				}
			},

		}
	},
	["file"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_directory"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: )",
				returns = "()",
				valuetype = ""
			},
			["strip_illegal_filename_characters"] = {
				type = "function",
				description = [[]],
				args = "(path: )",
				returns = "()",
				valuetype = ""
			},
			["create_path"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: )",
				returns = "()",
				valuetype = ""
			},
			["exists"] = {
				type = "function",
				description = [[]],
				args = "(path: )",
				returns = "()",
				valuetype = ""
			},
			["open_external_asset_file"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: )",
				returns = "(root.file.File)",
				valuetype = "File"
			},
			["is_directory"] = {
				type = "function",
				description = [[]],
				args = "(path: )",
				returns = "()",
				valuetype = ""
			},
			["compare_path"] = {
				type = "function",
				description = [[]],
				args = "(path0: ,path1: )",
				returns = "()",
				valuetype = ""
			},
			["delete"] = {
				type = "function",
				description = [[]],
				args = "(l: ,ppath: )",
				returns = "()",
				valuetype = ""
			},
			["find_external_game_asset_files"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: ,outFiles: ,outDirs: )",
				returns = "()",
				valuetype = ""
			},
			["to_relative_path"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: )",
				returns = "()",
				valuetype = ""
			},
			["get_size"] = {
				type = "function",
				description = [[]],
				args = "(path: )",
				returns = "()",
				valuetype = ""
			},
			["find_lua_files"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: )",
				returns = "()",
				valuetype = ""
			},
			["get_attributes"] = {
				type = "function",
				description = [[]],
				args = "(arg0: )",
				returns = "()",
				valuetype = ""
			},
			["get_flags"] = {
				type = "function",
				description = [[]],
				args = "(path: )",
				returns = "()",
				valuetype = ""
			},
			["find_absolute_path"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: )",
				returns = "()",
				valuetype = ""
			},
			["get_canonicalized_path"] = {
				type = "function",
				description = [[]],
				args = "(path: )",
				returns = "()",
				valuetype = ""
			},
			["get_file_path"] = {
				type = "function",
				description = [[]],
				args = "(str: )",
				returns = "()",
				valuetype = ""
			},
			["get_file_extension"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: )",
				returns = "()",
				valuetype = ""
			},
			["copy"] = {
				type = "function",
				description = [[]],
				args = "(l: ,srcFile: ,dstFile: )",
				returns = "()",
				valuetype = ""
			},
			["get_file_name"] = {
				type = "function",
				description = [[]],
				args = "(str: )",
				returns = "()",
				valuetype = ""
			},
			["remove_file_extension"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: ,t: )",
				returns = "()",
				valuetype = ""
			},
			["find"] = {
				type = "function",
				description = [[]],
				args = "(arg0: ,arg1: ,arg2: ,arg3: )",
				returns = "()",
				valuetype = ""
			},
			["read"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: )",
				returns = "()",
				valuetype = ""
			},
			["write"] = {
				type = "function",
				description = [[]],
				args = "(l: ,strPath: ,content: )",
				returns = "()",
				valuetype = ""
			},
			["open"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: ,openMode: )",
				returns = "(root.file.File)",
				valuetype = "File"
			},
			["File"] = {
				type = "class",
				description = [[]],
				childs = {
					["ReadInt32"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["Read"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,ds: root.util.DataStream,size: )",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt32"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["WriteMat2"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt32"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["ReadLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt16"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["ReadInt16"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["ReadAngles"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt16"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt16"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["WriteChar"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,d: )",
						returns = "()",
						valuetype = ""
					},
					["ReadColor"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.util.Color)",
						valuetype = "Color"
					},
					["ReadChar"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteString"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,str: )",
						returns = "()",
						valuetype = ""
					},
					["ReadBool"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteFloat"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["ReadFloat"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteDouble"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["ReadMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.math.Mat2x4)",
						valuetype = "Mat2x4"
					},
					["Seek"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,pos: )",
						returns = "()",
						valuetype = ""
					},
					["ReadDouble"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["ReadLine"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt64"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,d: )",
						returns = "()",
						valuetype = ""
					},
					["WriteVector"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,v: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["ReadVector"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["ReadVector4"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector2"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,v: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt32"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["ReadVector2"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector4"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,v: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["WriteAngles"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["Write"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,ds: root.util.DataStream,size: )",
						returns = "()",
						valuetype = ""
					},
					["WriteMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat2"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.math.Mat2)",
						valuetype = "Mat2"
					},
					["WriteMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat3"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["ReadString"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat4"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["WriteQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.math.Mat2x3)",
						valuetype = "Mat2x3"
					},
					["ReadInt64"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.math.Mat3x2)",
						valuetype = "Mat3x2"
					},
					["ReadMat3"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.math.Mat3)",
						valuetype = "Mat3"
					},
					["ReadMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.math.Mat3x4)",
						valuetype = "Mat3x4"
					},
					["WriteUInt64"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,d: )",
						returns = "()",
						valuetype = ""
					},
					["ReadMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.math.Mat4x2)",
						valuetype = "Mat4x2"
					},
					["Eof"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.math.Mat4x3)",
						valuetype = "Mat4x3"
					},
					["ReadMat4"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "(root.math.Mat4)",
						valuetype = "Mat4"
					},
					["ReadQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["Close"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteColor"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,col: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["IgnoreComments"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File,start: ,end: )",
						returns = "()",
						valuetype = ""
					},
					["GetPath"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["Tell"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteBool"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt64"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt8"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["ReadInt8"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt8"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.file.File,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt8"] = {
						type = "method",
						description = [[]],
						args = "(f: root.file.File)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["nav"] = {
		type = "lib",
		description = [[]],
		childs = {
			["generate"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["load"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["Config"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["PARTITION_TYPE_LAYERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARTITION_TYPE_MONOTONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARTITION_TYPE_WATERSHED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxSimplificationError"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["cellHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["sampleDetailDist"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minRegionSize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mergeRegionSize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["sampleDetailMaxError"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["cellSize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxEdgeLength"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["vertsPerPoly"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["samplePartitionType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["walkableRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["characterHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxClimbHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["walkableSlopeAngle"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["RayCast"] = {
						type = "method",
						description = [[]],
						args = "(navMesh: root.nav.Mesh,start: root.vector.Vector,end: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(navMesh: root.nav.Mesh,fname: )",
						returns = "()",
						valuetype = ""
					},
					["GetConfig"] = {
						type = "method",
						description = [[]],
						args = "(navMesh: root.nav.Mesh)",
						returns = "(root.nav.Config)",
						valuetype = "Config"
					}
				}
			},

		}
	},
	["vector"] = {
		type = "lib",
		description = [[]],
		childs = {
			["to_min_max"] = {
				type = "function",
				description = [[]],
				args = "(inOutA: root.math.Vector4,inOutB: root.math.Vector4,c: root.math.Vector4)",
				returns = "()",
				valuetype = ""
			},
			["random"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["create_from_string"] = {
				type = "function",
				description = [[]],
				args = "(str: )",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["get_min_max"] = {
				type = "function",
				description = [[]],
				args = "(l: ,t: ,outMin: root.math.Vector4,outMax: root.math.Vector4)",
				returns = "()",
				valuetype = ""
			},
			["calc_average"] = {
				type = "function",
				description = [[]],
				args = "(points: )",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["random2D"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(root.math.Vector2)",
				valuetype = "Vector2"
			},
			["calc_best_fitting_plane"] = {
				type = "function",
				description = [[]],
				args = "(points: ,ang: ,outNormal: root.vector.Vector,outDistance: )",
				returns = "()",
				valuetype = ""
			},
			["calc_linear_velocity_from_angular"] = {
				type = "function",
				description = [[]],
				args = "(refPos: root.vector.Vector,angVel: root.vector.Vector,tgtPos: root.vector.Vector)",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Mul"] = {
						type = "method",
						description = [[]],
						args = "(a: root.vector.Vector,b: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vector.Vector,1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["PlanarDistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: root.vector.Vector,n: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["PlanarDistance"] = {
						type = "method",
						description = [[]],
						args = "(p1: root.vector.Vector,n: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngle"] = {
						type = "method",
						description = [[]],
						args = "(a: root.vector.Vector,b: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(n: root.vector.Vector)",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(b: root.vector.Vector)",
						returns = "(root.math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(b: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.vector.Vector,orientation: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["RotateAround"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.vector.Vector,origin: root.vector.Vector,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.vector.Vector,vecB: root.vector.Vector,factor: )",
						returns = "()",
						valuetype = ""
					},
					["Equals"] = {
						type = "method",
						description = [[]],
						args = "(a: root.vector.Vector,b: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Slerp"] = {
						type = "method",
						description = [[]],
						args = "(a: root.vector.Vector,b: root.vector.Vector,factor: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(v: root.vector.Vector,idx: )",
						returns = "()",
						valuetype = ""
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Vector2,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["SnapToGrid"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.vector.Vector,gridSize: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vector.Vector,1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vector.Vector,1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.QuaternionInternal,1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["ToScreenUv"] = {
						type = "method",
						description = [[]],
						args = "(vp: root.math.Mat4)",
						returns = "(root.math.Vector2)",
						valuetype = "Vector2"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["OuterProduct"] = {
						type = "method",
						description = [[]],
						args = "(v1: root.vector.Vector)",
						returns = "(root.math.Mat3)",
						valuetype = "Mat3"
					},
					["GetPerpendicular"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.vector.Vector,idx: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["ProjectToPlane"] = {
						type = "method",
						description = [[]],
						args = "(n: root.vector.Vector,d: )",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["GetYaw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "(vecB: root.vector.Vector)",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["doc"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Module"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "(mod: root.doc.Module)",
						returns = "()",
						valuetype = ""
					},
					["GetTarget"] = {
						type = "method",
						description = [[]],
						args = "(mod: root.doc.Module)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Function"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetExampleCode"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetOverloads"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetURL"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetGameStateFlags"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetRelated"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetGroups"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(fc: root.doc.Function)",
						returns = "()",
						valuetype = ""
					},
					["FLAG_BIT_DEBUG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_DEPRECATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_VANILLA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FUNCTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_HOOK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_METHOD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Collection"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetFunctions"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetDerivedFrom"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetMembers"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetRelated"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetEnumSets"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetURL"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "(collection: root.doc.Collection)",
						returns = "()",
						valuetype = ""
					},
					["FLAG_BIT_BASE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_CLASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_LIBRARY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseCollectionObject"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "(o: root.doc.BaseCollectionObject)",
						returns = "()",
						valuetype = ""
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "(o: root.doc.BaseCollectionObject)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Member"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetDefault"] = {
						type = "method",
						description = [[]],
						args = "(member: root.doc.Member)",
						returns = "()",
						valuetype = ""
					},
					["GetMode"] = {
						type = "method",
						description = [[]],
						args = "(member: root.doc.Member)",
						returns = "()",
						valuetype = ""
					},
					["GetGameStateFlags"] = {
						type = "method",
						description = [[]],
						args = "(member: root.doc.Member)",
						returns = "()",
						valuetype = ""
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "(member: root.doc.Member)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(member: root.doc.Member)",
						returns = "()",
						valuetype = ""
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "(member: root.doc.Member)",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(member: root.doc.Member)",
						returns = "()",
						valuetype = ""
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "(member: root.doc.Member)",
						returns = "()",
						valuetype = ""
					},
					["MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MODE_READ"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MODE_WRITE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Group"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(group: root.doc.Group)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Overload"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetParameters"] = {
						type = "method",
						description = [[]],
						args = "(overload: root.doc.Overload)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DerivedFrom"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(df: root.doc.DerivedFrom)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(df: root.doc.DerivedFrom)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Enum"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetGameStateFlags"] = {
						type = "method",
						description = [[]],
						args = "(e: root.doc.Enum)",
						returns = "()",
						valuetype = ""
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "(e: root.doc.Enum)",
						returns = "()",
						valuetype = ""
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(e: root.doc.Enum)",
						returns = "()",
						valuetype = ""
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "(e: root.doc.Enum)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(e: root.doc.Enum)",
						returns = "()",
						valuetype = ""
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "(e: root.doc.Enum)",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(e: root.doc.Enum)",
						returns = "()",
						valuetype = ""
					},
					["TYPE_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_REGULAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["EnumSet"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(eSet: root.doc.EnumSet)",
						returns = "()",
						valuetype = ""
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "(eSet: root.doc.EnumSet)",
						returns = "()",
						valuetype = ""
					},
					["GetUnderlyingType"] = {
						type = "method",
						description = [[]],
						args = "(eSet: root.doc.EnumSet)",
						returns = "()",
						valuetype = ""
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "(eSet: root.doc.EnumSet)",
						returns = "()",
						valuetype = ""
					},
					["GetEnums"] = {
						type = "method",
						description = [[]],
						args = "(eSet: root.doc.EnumSet)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["resource"] = {
		type = "lib",
		description = [[]],
		childs = {
			["add_file"] = {
				type = "function",
				description = [[]],
				args = "(res: )",
				returns = "()",
				valuetype = ""
			},
			["add_lua_file"] = {
				type = "function",
				description = [[]],
				args = "(f: )",
				returns = "()",
				valuetype = ""
			},
			["get_list"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["os"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["tf2"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["fudm"] = {
		type = "lib",
		description = [[]],
		childs = {
			["impl"] = {
				type = "lib",
				description = [[]],
				childs = {
					["registered_types"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},
					["class_to_type_id"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},
					["name_to_type_id"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},

				}
			},

		}
	},
	["locale"] = {
		type = "lib",
		description = [[]],
		childs = {
			["change_language"] = {
				type = "function",
				description = [[]],
				args = "(lan: )",
				returns = "()",
				valuetype = ""
			},
			["load"] = {
				type = "function",
				description = [[]],
				args = "(fileName: )",
				returns = "()",
				valuetype = ""
			},
			["set_text"] = {
				type = "function",
				description = [[]],
				args = "(id: ,text: )",
				returns = "()",
				valuetype = ""
			},
			["get_language"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["util"] = {
		type = "lib",
		description = [[]],
		childs = {
			["local_to_world"] = {
				type = "function",
				description = [[]],
				args = "(l: ,vLocal: root.vector.Vector,rLocal: root.math.QuaternionInternal,v: root.vector.Vector,r: root.math.QuaternionInternal)",
				returns = "()",
				valuetype = ""
			},
			["fire_bullets"] = {
				type = "function",
				description = [[]],
				args = "(l: ,bulletInfo: root.game.BulletInfo)",
				returns = "()",
				valuetype = ""
			},
			["create_explosion"] = {
				type = "function",
				description = [[]],
				args = "(l: ,splashDamageInfo: root.util.SplashDamageInfo)",
				returns = "()",
				valuetype = ""
			},
			["calc_world_direction_from_2d_coordinates"] = {
				type = "function",
				description = [[]],
				args = "(l: ,forward: root.vector.Vector,right: root.vector.Vector,up: root.vector.Vector,fov: ,nearZ: ,farZ: ,aspectRatio: ,uv: root.math.Vector2)",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["round_string"] = {
				type = "function",
				description = [[]],
				args = "(l: ,value: )",
				returns = "()",
				valuetype = ""
			},
			["fade_property"] = {
				type = "function",
				description = [[]],
				args = "(l: ,vProp: root.util.FloatProperty,vDst: ,duration: )",
				returns = "()",
				valuetype = ""
			},
			["remove"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["get_pretty_duration"] = {
				type = "function",
				description = [[]],
				args = "(l: ,ms: )",
				returns = "()",
				valuetype = ""
			},
			["get_pretty_time"] = {
				type = "function",
				description = [[]],
				args = "(l: ,t: )",
				returns = "()",
				valuetype = ""
			},
			["get_pretty_bytes"] = {
				type = "function",
				description = [[]],
				args = "(bytes: )",
				returns = "()",
				valuetype = ""
			},
			["world_to_local"] = {
				type = "function",
				description = [[]],
				args = "(l: ,vLocal: root.vector.Vector,rLocal: root.math.QuaternionInternal,v: root.vector.Vector,r: root.math.QuaternionInternal)",
				returns = "()",
				valuetype = ""
			},
			["read_scene_file"] = {
				type = "function",
				description = [[]],
				args = "(l: ,fileName: )",
				returns = "()",
				valuetype = ""
			},
			["units_to_metres"] = {
				type = "function",
				description = [[]],
				args = "(units: )",
				returns = "()",
				valuetype = ""
			},
			["register_class"] = {
				type = "function",
				description = [[]],
				args = "(l: ,pclassName: )",
				returns = "()",
				valuetype = ""
			},
			["load_image"] = {
				type = "function",
				description = [[]],
				args = "(l: ,fileName: )",
				returns = "()",
				valuetype = ""
			},
			["open_path_in_explorer"] = {
				type = "function",
				description = [[]],
				args = "(spath: )",
				returns = "()",
				valuetype = ""
			},
			["cubemap_to_equirectangular_texture"] = {
				type = "function",
				description = [[]],
				args = "(l: ,cubemap: root.prosper.Texture)",
				returns = "()",
				valuetype = ""
			},
			["get_scale_factor"] = {
				type = "function",
				description = [[]],
				args = "(val: ,min: )",
				returns = "()",
				valuetype = ""
			},
			["is_valid"] = {
				type = "function",
				description = [[]],
				args = "(l: ,o: )",
				returns = "()",
				valuetype = ""
			},
			["get_class_value"] = {
				type = "function",
				description = [[]],
				args = "(l: ,oClass: ,key: )",
				returns = "()",
				valuetype = ""
			},
			["is_valid_entity"] = {
				type = "function",
				description = [[]],
				args = "(l: ,o: )",
				returns = "()",
				valuetype = ""
			},
			["capture_raytraced_screenshot"] = {
				type = "function",
				description = [[]],
				args = "(l: ,width: ,height: )",
				returns = "(root.util.ParallelJobImage)",
				valuetype = "ParallelJobImage"
			},
			["get_image_format_file_extension"] = {
				type = "function",
				description = [[]],
				args = "(arg0: )",
				returns = "()",
				valuetype = ""
			},
			["get_type_name"] = {
				type = "function",
				description = [[]],
				args = "(l: ,o: )",
				returns = "()",
				valuetype = ""
			},
			["is_same_object"] = {
				type = "function",
				description = [[]],
				args = "(l: ,o0: ,o1: )",
				returns = "()",
				valuetype = ""
			},
			["calc_screen_space_distance_to_world_space_position"] = {
				type = "function",
				description = [[]],
				args = "(l: ,point: root.vector.Vector,vp: root.math.Mat4,nearZ: ,farZ: )",
				returns = "()",
				valuetype = ""
			},
			["clamp_resolution_to_aspect_ratio"] = {
				type = "function",
				description = [[]],
				args = "(l: ,w: ,h: ,aspectRatio: )",
				returns = "()",
				valuetype = ""
			},
			["create_muzzle_flash"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["shake_screen"] = {
				type = "function",
				description = [[]],
				args = "(l: ,amplitude: ,frequency: ,duration: ,fadeIn: ,fadeOut: )",
				returns = "()",
				valuetype = ""
			},
			["create_giblet"] = {
				type = "function",
				description = [[]],
				args = "(l: ,gibletInfo: )",
				returns = "()",
				valuetype = ""
			},
			["depth_to_distance"] = {
				type = "function",
				description = [[]],
				args = "(l: ,depth: ,nearZ: ,farZ: )",
				returns = "()",
				valuetype = ""
			},
			["world_space_direction_to_screen_space"] = {
				type = "function",
				description = [[]],
				args = "(l: ,dir: root.vector.Vector,vp: root.math.Mat4)",
				returns = "(root.math.Vector2)",
				valuetype = "Vector2"
			},
			["world_space_point_to_screen_space_uv"] = {
				type = "function",
				description = [[]],
				args = "(l: ,point: root.vector.Vector,vp: root.math.Mat4,nearZ: ,farZ: )",
				returns = "()",
				valuetype = ""
			},
			["pack_zip_archive"] = {
				type = "function",
				description = [[]],
				args = "(l: ,pzipFileName: ,t: )",
				returns = "()",
				valuetype = ""
			},
			["splash_damage"] = {
				type = "function",
				description = [[]],
				args = "(l: ,splashDamageInfo: root.util.SplashDamageInfo)",
				returns = "()",
				valuetype = ""
			},
			["get_date_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["is_table"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["get_faded_time_factor"] = {
				type = "function",
				description = [[]],
				args = "(cur: ,dur: ,fadeIn: )",
				returns = "()",
				valuetype = ""
			},
			["metres_to_units"] = {
				type = "function",
				description = [[]],
				args = "(metres: )",
				returns = "()",
				valuetype = ""
			},
			["variable_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(varType: )",
				returns = "()",
				valuetype = ""
			},
			["open_url_in_browser"] = {
				type = "function",
				description = [[]],
				args = "(url: )",
				returns = "()",
				valuetype = ""
			},
			["get_addon_path"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_string_hash"] = {
				type = "function",
				description = [[]],
				args = "(str: )",
				returns = "()",
				valuetype = ""
			},
			["generate_uuid_v4"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["create_particle_tracer"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["save_image"] = {
				type = "function",
				description = [[]],
				args = "(l: ,img: root.prosper.Image,fileName: ,imgWriteInfo: root.util.TextureInfo)",
				returns = "()",
				valuetype = ""
			},
			["get_clipboard_string"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["set_clipboard_string"] = {
				type = "function",
				description = [[]],
				args = "(str: )",
				returns = "()",
				valuetype = ""
			},
			["FloatProperty"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.FloatProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.FloatProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.FloatProperty,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.FloatProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.FloatProperty,propOther: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector2iVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector,value: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector,pos: ,value: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector,pos: ,value: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector,size: ,value: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2iVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["QuaternionProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.QuaternionProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.QuaternionProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.QuaternionProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.QuaternionProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.QuaternionProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.QuaternionProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.QuaternionProperty)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.QuaternionProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.QuaternionProperty,val: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.QuaternionProperty,propOther: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IntVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector,value: )",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector,size: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.IntVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Callback"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Callback)",
						returns = "()",
						valuetype = ""
					},
					["Call"] = {
						type = "method",
						description = [[]],
						args = "(cb: root.util.Callback,arg0: ,arg1: ,arg2: ,arg3: ,arg4: ,arg5: ,arg6: ,arg7: ,arg8: ,arg9: ,arg10: ,arg11: ,arg12: ,arg13: ,arg14: ,arg15: )",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(callback: root.util.Callback)",
						returns = "()",
						valuetype = ""
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "(callback: root.util.Callback)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector4iVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector,value: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector,pos: ,value: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector,pos: ,value: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector,size: ,value: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4iVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat2x4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector,value: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector,pos: ,value: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector,pos: ,value: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector,size: ,value: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x4Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat4x2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector,value: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector,pos: ,value: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector,pos: ,value: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector,size: ,value: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x2Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BoolVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector,value: )",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector,size: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.BoolVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["CharVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector,value: )",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector,size: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.CharVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector2Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Vector2Property)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2Property)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2Property)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2Property,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2Property)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2Property)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2Property,val: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2Property,propOther: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2,1: root.util.Vector2Property)",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Vector2Property,1: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2,1: root.util.Vector2Property)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2,1: root.util.Vector2Property)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.Vector2Property)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat3x4Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Mat3x4Property)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x4Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x4Property)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x4Property)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x4Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x4Property,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x4Property)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x4Property)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x4Property,val: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x4Property,propOther: root.util.Mat3x4Property)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["EulerAnglesProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.EulerAnglesProperty,1: )",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EulerAnglesProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EulerAnglesProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EulerAnglesProperty,val: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.EulerAngles,1: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EulerAnglesProperty,propOther: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EulerAnglesProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.EulerAngles,1: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.EulerAngles,1: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat2x3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector,value: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector,pos: ,value: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector,pos: ,value: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector,size: ,value: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2x3Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat4x3Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Mat4x3Property)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4x3Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4x3Property)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4x3Property)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4x3Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4x3Property,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4x3Property)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4x3Property)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4x3Property,val: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4x3Property,propOther: root.util.Mat4x3Property)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector2iProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Vector2iProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2iProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2iProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2iProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2iProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2iProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2iProperty)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2iProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2iProperty,val: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector2iProperty,propOther: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2i,1: root.util.Vector2iProperty)",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Vector2iProperty,1: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2i,1: root.util.Vector2iProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2i,1: root.util.Vector2iProperty)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.Vector2iProperty)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DataStream"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadInt32"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt32"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["WriteMat2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt32"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt16"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadInt16"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadAngles"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt16"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt16"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteChar"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["WriteMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["ReadBinaryString"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,size: )",
						returns = "()",
						valuetype = ""
					},
					["ReadChar"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteString"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,str: ,bNullterminated: )",
						returns = "()",
						valuetype = ""
					},
					["WriteFloat"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadFloat"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteDouble"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadVectori"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadVector4i"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["Seek"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,offset: )",
						returns = "()",
						valuetype = ""
					},
					["ReadDouble"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["WriteVector"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,size: )",
						returns = "()",
						valuetype = ""
					},
					["ReadVector"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadVector4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["ReadVector2i"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt32"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadVector2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadStringUntil"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,pattern: )",
						returns = "()",
						valuetype = ""
					},
					["WriteVector4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["WriteAngles"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["ReadMat2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["ReadString"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,len: )",
						returns = "()",
						valuetype = ""
					},
					["WriteMat4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["WriteQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector2i"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["WriteVectori"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector4i"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ToBinaryString"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteVertex"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: root.Model.Vertex)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadVertex"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["Tell"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,size: )",
						returns = "()",
						valuetype = ""
					},
					["ReadLine"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteBinary"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,dsOther: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["ReadBinary"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteBool"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadBool"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt64"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadInt64"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt64"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt64"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt8"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadInt8"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt8"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt8"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ParallelJob"] = {
				type = "class",
				description = [[]],
				childs = {
					["Start"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["IsComplete"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["IsPending"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["IsCancelled"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["IsSuccessful"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["GetProgress"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["GetStatus"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["GetResultMessage"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["Poll"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["IsThreadActive"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["Cancel"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["Wait"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJob)",
						returns = "()",
						valuetype = ""
					},
					["JOB_STATUS_PENDING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_INVALID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_CANCELLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_FAILED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_INITIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_SUCCESSFUL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ColorVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector,value: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector,pos: ,value: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector,pos: ,value: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector,size: ,value: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ColorVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["VectorProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.VectorProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectorProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectorProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectorProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectorProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectorProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectorProperty)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectorProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectorProperty,val: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectorProperty,propOther: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vector.Vector,1: root.util.VectorProperty)",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.VectorProperty,1: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vector.Vector,1: root.util.VectorProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vector.Vector,1: root.util.VectorProperty)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.VectorProperty)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector4Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4Property,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4Property,val: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4Property,propOther: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4,1: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Vector4Property,1: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4,1: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4,1: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Version"] = {
				type = "class",
				description = [[]],
				childs = {
					["ToString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Version)",
						returns = "()",
						valuetype = ""
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Version,1: root.util.Version)",
						returns = "()",
						valuetype = ""
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Version,1: root.util.Version)",
						returns = "()",
						valuetype = ""
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Version,1: root.util.Version)",
						returns = "()",
						valuetype = ""
					},
					["major"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["revision"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ParallelJobImage"] = {
				type = "class",
				inherits = "util.ParallelJob",
				description = [[]],
				childs = {
					["GetResult"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJobImage)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector4iProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Vector4iProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4iProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4iProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4iProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4iProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4iProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4iProperty)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4iProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4iProperty,val: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Vector4iProperty,propOther: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4i,1: root.util.Vector4iProperty)",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Vector4iProperty,1: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4i,1: root.util.Vector4iProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4i,1: root.util.Vector4iProperty)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.Vector4iProperty)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["VectoriProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.VectoriProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectoriProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectoriProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectoriProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectoriProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectoriProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectoriProperty)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectoriProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectoriProperty,val: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.VectoriProperty,propOther: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vectori,1: root.util.VectoriProperty)",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.VectoriProperty,1: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vectori,1: root.util.VectoriProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vectori,1: root.util.VectoriProperty)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.VectoriProperty)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["StringProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.StringProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.StringProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.StringProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.StringProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.StringProperty,val: )",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.StringProperty,propOther: root.util.EulerAnglesProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector,value: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector,pos: ,value: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector,pos: ,value: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector,size: ,value: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DataBlock"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,val: ,def: )",
						returns = "()",
						valuetype = ""
					},
					["GetVector2"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,val: ,def: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["GetVector"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,val: ,def: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "(dataBlock: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["GetVector4"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,val: ,def: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,type: ,key: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetChildBlocks"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock)",
						returns = "()",
						valuetype = ""
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,other: root.util.DataBlock)",
						returns = "()",
						valuetype = ""
					},
					["GetKeys"] = {
						type = "method",
						description = [[]],
						args = "(dataBlock: root.util.DataBlock)",
						returns = "()",
						valuetype = ""
					},
					["RemoveValue"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["IsEmpty"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock)",
						returns = "()",
						valuetype = ""
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["AddBlock"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["IsString"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["IsColor"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["IsInt"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["IsFloat"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["IsBool"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,val: ,def: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["IsVector"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["IsVector4"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: )",
						returns = "()",
						valuetype = ""
					},
					["ToString"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock)",
						returns = "()",
						valuetype = ""
					},
					["FindBlock"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,key: ,blockIndex: )",
						returns = "()",
						valuetype = ""
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetInt"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,val: ,def: )",
						returns = "()",
						valuetype = ""
					},
					["GetFloat"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,val: ,def: )",
						returns = "()",
						valuetype = ""
					},
					["GetBool"] = {
						type = "method",
						description = [[]],
						args = "(data: root.util.DataBlock,val: ,def: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["FloatVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector,value: )",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector,size: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.FloatVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat3Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Mat3Property)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3Property)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3Property)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3Property,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3Property)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3Property)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3Property,val: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3Property,propOther: root.util.Mat3Property)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat2Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Mat2Property)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2Property)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2Property)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2Property,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2Property)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2Property)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2Property,val: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2Property,propOther: root.util.Mat2Property)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector,value: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector,pos: ,value: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector,pos: ,value: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector,size: ,value: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat2x3Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Mat2x3Property)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2x3Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2x3Property)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2x3Property)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2x3Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2x3Property,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2x3Property)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2x3Property)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2x3Property,val: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat2x3Property,propOther: root.util.Mat2x3Property)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["LongDoubleVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector,value: )",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector,size: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongDoubleVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector3iVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector,value: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector,pos: ,value: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector,pos: ,value: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector,size: ,value: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector3iVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat3x2Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Mat3x2Property)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x2Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x2Property)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x2Property)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x2Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x2Property,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x2Property)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x2Property)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x2Property,val: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat3x2Property,propOther: root.util.Mat3x2Property)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DirectoryChangeListener"] = {
				type = "class",
				description = [[]],
				childs = {
					["Poll"] = {
						type = "method",
						description = [[]],
						args = "(listener: root.util.DirectoryChangeListener)",
						returns = "()",
						valuetype = ""
					},
					["SetEnabled"] = {
						type = "method",
						description = [[]],
						args = "(listener: root.util.DirectoryChangeListener,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.DirectoryChangeListener)",
						returns = "()",
						valuetype = ""
					},
					["IsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(listener: root.util.DirectoryChangeListener)",
						returns = "()",
						valuetype = ""
					},
					["LISTENER_FLAG_WATCH_DIRECTORY_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_ABSOLUTE_PATH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_BIT_WATCH_SUB_DIRECTORIES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_START_DISABLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mat4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector,value: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector,pos: ,value: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector,pos: ,value: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector,size: ,value: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ParallelJobString"] = {
				type = "class",
				inherits = "util.ParallelJob",
				description = [[]],
				childs = {
					["GetResult"] = {
						type = "method",
						description = [[]],
						args = "(job: root.util.ParallelJobString)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat4Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Mat4Property)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4Property)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4Property)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4Property,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4Property,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4Property)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4Property)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4Property,val: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.Mat4Property,propOther: root.util.Mat4Property)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["QuaternionVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector,value: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector,pos: ,value: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector,pos: ,value: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector,size: ,value: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.QuaternionVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["LongLongVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector,value: )",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector,size: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.LongLongVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ShortVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector,value: )",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector,size: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.ShortVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["EntityProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.EntityProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EntityProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EntityProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EntityProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EntityProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EntityProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EntityProperty)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EntityProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EntityProperty,val: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.EntityProperty,propOther: root.util.EntityProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector,value: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector,pos: ,value: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector,pos: ,value: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector,size: ,value: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector2Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DoubleVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector,value: )",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector,size: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.DoubleVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat3x2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector,value: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector,pos: ,value: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector,pos: ,value: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector,size: ,value: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x2Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector,value: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector,pos: ,value: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector,pos: ,value: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector,size: ,value: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Vector4Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["EulerAnglesVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector,value: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector,pos: ,value: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector,pos: ,value: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector,size: ,value: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.EulerAnglesVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector,value: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector,pos: ,value: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector,pos: ,value: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector,size: ,value: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat2Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat3x4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector,value: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector,pos: ,value: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector,pos: ,value: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector,size: ,value: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat3x4Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat4x3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector,value: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector,pos: ,value: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector,pos: ,value: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector,size: ,value: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.Mat4x3Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["StringVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector,value: )",
						returns = "()",
						valuetype = ""
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector)",
						returns = "()",
						valuetype = ""
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector,pos: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector,pos: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector)",
						returns = "()",
						valuetype = ""
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector)",
						returns = "()",
						valuetype = ""
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector,size: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector,size: )",
						returns = "()",
						valuetype = ""
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "(v: root.util.StringVector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SplashDamageInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetCone"] = {
						type = "method",
						description = [[]],
						args = "(splashDamageInfo: root.util.SplashDamageInfo,coneDirection: root.vector.Vector,coneAngle: )",
						returns = "()",
						valuetype = ""
					},
					["SetCallback"] = {
						type = "method",
						description = [[]],
						args = "(splashDamageInfo: root.util.SplashDamageInfo,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["radius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["damageInfo"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["origin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ResultCode"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(err: root.util.ResultCode)",
						returns = "()",
						valuetype = ""
					},
					["GetMessage"] = {
						type = "method",
						description = [[]],
						args = "(err: root.util.ResultCode)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["IsError"] = {
						type = "method",
						description = [[]],
						args = "(err: root.util.ResultCode)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.ResultCode)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["CallbackHandler"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(cbHandler: root.util.CallbackHandler,name: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.CallbackHandler)",
						returns = "()",
						valuetype = ""
					},
					["CallCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(cbHandler: root.util.CallbackHandler,name: ,o1: ,o2: ,o3: ,o4: ,o5: ,o6: ,o7: ,o8: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.CallbackHandler,1: root.util.CallbackHandler)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Path"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["GetFileName"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["GetFront"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["GetPath"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["GetBack"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["GetComponentCount"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Path,1: )",
						returns = "()",
						valuetype = ""
					},
					["MoveUp"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["MakeRelative"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path,other: )",
						returns = "()",
						valuetype = ""
					},
					["PopBack"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["Canonicalize"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["IsFile"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["GetFileExtension"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["RemoveFileExtension"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["IsEmpty"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["IsPath"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Path,1: )",
						returns = "()",
						valuetype = ""
					},
					["PopFront"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["ToComponents"] = {
						type = "method",
						description = [[]],
						args = "(p: root.util.Path)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["HSVColor"] = {
				type = "class",
				description = [[]],
				childs = {
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(hsv0: root.util.HSVColor,hsv1: root.util.HSVColor,t: )",
						returns = "()",
						valuetype = ""
					},
					["ToRGBColor"] = {
						type = "method",
						description = [[]],
						args = "(hsv: root.util.HSVColor)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.HSVColor)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.HSVColor,1: root.util.HSVColor)",
						returns = "()",
						valuetype = ""
					},
					["h"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["s"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["v"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Color"] = {
				type = "class",
				description = [[]],
				childs = {
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Color,1: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Color,1: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Color,1: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Color,1: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["ToVector"] = {
						type = "method",
						description = [[]],
						args = "(col: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["ToVector4"] = {
						type = "method",
						description = [[]],
						args = "(col: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(col: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["GetContrastColor"] = {
						type = "method",
						description = [[]],
						args = "(color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(col: root.util.Color,other: root.util.Color,factor: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(col: root.util.Color,r: ,g: ,b: ,a: )",
						returns = "()",
						valuetype = ""
					},
					["CalcPerceivedLuminance"] = {
						type = "method",
						description = [[]],
						args = "(color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["GetComplementaryColor"] = {
						type = "method",
						description = [[]],
						args = "(color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["ToHSVColor"] = {
						type = "method",
						description = [[]],
						args = "(color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["ToHexColorRGB"] = {
						type = "method",
						description = [[]],
						args = "(color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["ToHexColor"] = {
						type = "method",
						description = [[]],
						args = "(color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageBuffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetChannelSize"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["ApplyGammaCorrection"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,gamma: )",
						returns = "()",
						valuetype = ""
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetChannelCount"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetPixelCount"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["SetPixelValueLDR"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,x: ,y: ,channel: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["GetPixelSize"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["HasAlphaChannel"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,dst: root.util.ImageBuffer,xSrc: ,ySrc: ,xDst: ,yDst: ,w: ,h: )",
						returns = "()",
						valuetype = ""
					},
					["Convert"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,format: )",
						returns = "()",
						valuetype = ""
					},
					["ToLDR"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["ToHDR"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["ClearAlpha"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,a: )",
						returns = "()",
						valuetype = ""
					},
					["GetPixelIndex"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,color: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["GetPixelValue"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,x: ,y: ,channel: )",
						returns = "()",
						valuetype = ""
					},
					["IsFloatFormat"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["FlipHorizontally"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["FlipVertically"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["Flip"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,flipH: ,flipV: )",
						returns = "()",
						valuetype = ""
					},
					["SwapChannels"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,channel0: ,channel1: )",
						returns = "()",
						valuetype = ""
					},
					["ApplyToneMapping"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,toneMapping: )",
						returns = "()",
						valuetype = ""
					},
					["ApplyExposure"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,exposure: )",
						returns = "()",
						valuetype = ""
					},
					["SetPixelValue"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,x: ,y: ,channel: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["IsHDRFormat"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["SetPixelValueHDR"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,x: ,y: ,channel: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["CalcLuminance"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["IsLDRFormat"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["ToFloat"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetPixelOffset"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(imgBuffer: root.util.ImageBuffer,w: ,h: )",
						returns = "()",
						valuetype = ""
					},
					["FORMAT_RGBA16"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA_HDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA32"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA8"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA_LDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_RED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_GREEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_A"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_R"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_BLUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_B"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_G"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_ACES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_UNCHARTED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_GRAN_TURISMO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_GAMMA_CORRECTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_HEJIL_RICHARD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_REINHARD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB16"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB_HDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB32"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB8"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB_LDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseProperty"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["ColorProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.ColorProperty,1: )",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.ColorProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.ColorProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.ColorProperty)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.ColorProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.ColorProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.ColorProperty)",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.ColorProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.ColorProperty,val: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Color,1: root.util.ColorProperty)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.ColorProperty,propOther: root.util.Vector4Property)",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.ColorProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Color,1: root.util.ColorProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.Color,1: root.util.ColorProperty)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.ColorProperty)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IntProperty"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.IntProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.IntProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.IntProperty,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.IntProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.IntProperty,propOther: root.util.FloatProperty)",
						returns = "()",
						valuetype = ""
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BoolProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.BoolProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.util.BoolProperty)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.BoolProperty)",
						returns = "()",
						valuetype = ""
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.BoolProperty)",
						returns = "()",
						valuetype = ""
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.BoolProperty,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.BoolProperty)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.BoolProperty,val: )",
						returns = "()",
						valuetype = ""
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.BoolProperty)",
						returns = "()",
						valuetype = ""
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.BoolProperty,propOther: root.util.IntProperty)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(prop: root.util.BoolProperty,bLocked: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TextureInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetNormalMap"] = {
						type = "method",
						description = [[]],
						args = "(writeInfo: root.util.TextureInfo)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["INPUT_FORMAT_R32_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_KEEP_INPUT_IMAGE_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_R16G16B16A16_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_R8G8B8A8_UINT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_R32G32B32A32_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP_SHARP_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP_SMOOTH_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP_1BIT_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_CONVERT_TO_NORMAL_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_GENERATE_MIPMAPS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_SRGB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WRAP_MODE_CLAMP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WRAP_MODE_REPEAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WRAP_MODE_MIRROR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MIPMAP_FILTER_KAISER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MIPMAP_FILTER_BOX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_HDR_COLOR_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC1A"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC3N"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC3_RGBM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC5"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC6"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC7"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_CTX1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT1A"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT1N"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT5"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT5N"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_GRADIENT_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_KEEP_INPUT_IMAGE_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_NORMAL_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_RGB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_RGBA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGBA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_R"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGB_A1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGBM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CONTAINER_FORMAT_DDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CONTAINER_FORMAT_KTX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["inputFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["outputFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipMapFilter"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["containerFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["wrapMode"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Texture"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(tex: root.util.Texture)",
						returns = "()",
						valuetype = ""
					},
					["GetVkTexture"] = {
						type = "method",
						description = [[]],
						args = "(tex: root.util.Texture)",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(tex: root.util.Texture)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["class_info_data"] = {
		type = "class",
		description = [[]],
		childs = {
			["attributes"] = {
				type = "value",
				description = [[]],
				valuetype = ""
			},
			["name"] = {
				type = "value",
				description = [[]],
				valuetype = ""
			},
			["methods"] = {
				type = "value",
				description = [[]],
				valuetype = ""
			}
		}
	},
	["angle"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_from_string"] = {
				type = "function",
				description = [[]],
				args = "(str: )",
				returns = "(root.math.EulerAngles)",
				valuetype = "EulerAngles"
			},
			["random"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(root.math.EulerAngles)",
				valuetype = "EulerAngles"
			}
		}
	},
	["debug"] = {
		type = "lib",
		description = [[]],
		childs = {
			["stackdump"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["task_to_string"] = {
				type = "function",
				description = [[]],
				args = "(task: )",
				returns = "()",
				valuetype = ""
			},
			["behavior_task_decorator_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(decoratorType: )",
				returns = "()",
				valuetype = ""
			},
			["disposition_to_string"] = {
				type = "function",
				description = [[]],
				args = "(disposition: )",
				returns = "()",
				valuetype = ""
			},
			["behavior_task_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(type: )",
				returns = "()",
				valuetype = ""
			},
			["npc_state_to_string"] = {
				type = "function",
				description = [[]],
				args = "(npcState: )",
				returns = "()",
				valuetype = ""
			},
			["draw_line"] = {
				type = "function",
				description = [[]],
				args = "(start: root.vector.Vector,end: root.vector.Vector,renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["memory_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(memoryType: )",
				returns = "()",
				valuetype = ""
			},
			["draw_point"] = {
				type = "function",
				description = [[]],
				args = "(renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["draw_box"] = {
				type = "function",
				description = [[]],
				args = "(min: root.vector.Vector,max: root.vector.Vector,renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["behavior_task_result_to_string"] = {
				type = "function",
				description = [[]],
				args = "(result: )",
				returns = "()",
				valuetype = ""
			},
			["behavior_selector_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(selectorType: )",
				returns = "()",
				valuetype = ""
			},
			["move_state_to_string"] = {
				type = "function",
				description = [[]],
				args = "(l: ,v: )",
				returns = "()",
				valuetype = ""
			},
			["beep"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["draw_sphere"] = {
				type = "function",
				description = [[]],
				args = "(radius: ,renderInfo: ,recursionLevel: )",
				returns = "()",
				valuetype = ""
			},
			["draw_cone"] = {
				type = "function",
				description = [[]],
				args = "(dist: ,renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["draw_truncated_cone"] = {
				type = "function",
				description = [[]],
				args = "(startRadius: ,dist: ,endRadius: ,renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["draw_cylinder"] = {
				type = "function",
				description = [[]],
				args = "(dist: ,radius: ,renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["draw_pose"] = {
				type = "function",
				description = [[]],
				args = "(renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["draw_text"] = {
				type = "function",
				description = [[]],
				args = "(text: ,size: ,renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["draw_path"] = {
				type = "function",
				description = [[]],
				args = "(l: ,points: ,renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["draw_spline"] = {
				type = "function",
				description = [[]],
				args = "(l: ,points: ,segmentCount: ,renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["draw_plane"] = {
				type = "function",
				description = [[]],
				args = "(renderInfo: )",
				returns = "()",
				valuetype = ""
			},
			["RendererObject"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetPose"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject)",
						returns = "()",
						valuetype = ""
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject)",
						returns = "()",
						valuetype = ""
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject)",
						returns = "()",
						valuetype = ""
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject)",
						returns = "()",
						valuetype = ""
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject)",
						returns = "()",
						valuetype = ""
					},
					["IsVisible"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject)",
						returns = "()",
						valuetype = ""
					},
					["SetVisible"] = {
						type = "method",
						description = [[]],
						args = "(o: root.debug.RendererObject,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					}
				}
			},

		}
	},
	["time"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_timer"] = {
				type = "function",
				description = [[]],
				args = "(l: ,delay: ,repetitions: ,fc: )",
				returns = "(root.time.Timer)",
				valuetype = "Timer"
			},
			["cur_time"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["real_time"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["create_simple_timer"] = {
				type = "function",
				description = [[]],
				args = "(l: ,delay: ,fc: )",
				returns = "(root.time.Timer)",
				valuetype = "Timer"
			},
			["server_time"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["delta_time"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["time_since_epoch"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["convert_duration"] = {
				type = "function",
				description = [[]],
				args = "(duration: ,srcType: ,dstType: )",
				returns = "()",
				valuetype = ""
			},
			["frame_time"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["Timer"] = {
				type = "class",
				description = [[]],
				childs = {
					["Start"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["GetInterval"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["SetInterval"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer,time: )",
						returns = "()",
						valuetype = ""
					},
					["GetRepetitionsLeft"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["IsRunning"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["SetRepetitions"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer,reps: )",
						returns = "()",
						valuetype = ""
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["SetCall"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer,o: )",
						returns = "()",
						valuetype = ""
					},
					["Pause"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["Call"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["IsPaused"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["GetTimeLeft"] = {
						type = "method",
						description = [[]],
						args = "(timer: root.time.Timer)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["steamworks"] = {
		type = "lib",
		description = [[]],
		childs = {
			["workshop"] = {
				type = "lib",
				description = [[]],
				childs = {
					["get_item"] = {
						type = "function",
						description = [[]],
						args = "(l: ,fileId: ,oCallback: ,language: )",
						returns = "()",
						valuetype = ""
					},
					["create_item"] = {
						type = "function",
						description = [[]],
						args = "(l: ,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["add_item_dependency"] = {
						type = "function",
						description = [[]],
						args = "(l: ,itemId: ,itemIdOther: ,callback: )",
						returns = "()",
						valuetype = ""
					},
					["add_item_app_dependency"] = {
						type = "function",
						description = [[]],
						args = "(l: ,itemId: ,appId: ,callback: )",
						returns = "()",
						valuetype = ""
					},
					["remove_item_dependency"] = {
						type = "function",
						description = [[]],
						args = "(l: ,itemId: ,itemIdOther: ,callback: )",
						returns = "()",
						valuetype = ""
					},
					["remove_item_app_dependency"] = {
						type = "function",
						description = [[]],
						args = "(l: ,itemId: ,appId: ,callback: )",
						returns = "()",
						valuetype = ""
					},
					["subscribe_item"] = {
						type = "function",
						description = [[]],
						args = "(l: ,itemId: ,callback: )",
						returns = "()",
						valuetype = ""
					},
					["unsubscribe_item"] = {
						type = "function",
						description = [[]],
						args = "(l: ,itemId: ,callback: )",
						returns = "()",
						valuetype = ""
					},
					["get_subscribed_items"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["register_callback"] = {
						type = "function",
						description = [[]],
						args = "(l: ,callbackId: ,oCallback: )",
						returns = "()",
						valuetype = ""
					},
					["Item"] = {
						type = "class",
						description = [[]],
						childs = {
							["PublishChanges"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item,callback: ,changeLog: )",
								returns = "()",
								valuetype = ""
							},
							["IsValid"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetStateFlags"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["SetTitle"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item,title: )",
								returns = "()",
								valuetype = ""
							},
							["GetDescription"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetSteamIdOwner"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetTitle"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetType"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetInstallInfo"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetURL"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["SetUpdateLanguage"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item,language: )",
								returns = "()",
								valuetype = ""
							},
							["GetChildCount"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetTimeAddedToUserList"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["SetCategoryFlags"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item,categoryFlags: )",
								returns = "()",
								valuetype = ""
							},
							["GetDownloadInfo"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["Download"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetTimeUpdated"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetTimeCreated"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetScore"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetId"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["IsBanned"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["AreTagsTruncated"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetVisibility"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetFileSize"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetPreviewFileSize"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetProgress"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetUpVoteCount"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["GetDownVoteCount"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["SetPreviewImage"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item,imagePath: )",
								returns = "()",
								valuetype = ""
							},
							["GetTags"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["SetDescription"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item,desc: )",
								returns = "()",
								valuetype = ""
							},
							["SetTags"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item,tTags: )",
								returns = "()",
								valuetype = ""
							},
							["GetCategoryFlags"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item)",
								returns = "()",
								valuetype = ""
							},
							["SetVisibility"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item,visibility: )",
								returns = "()",
								valuetype = ""
							},
							["SetAddonContent"] = {
								type = "method",
								description = [[]],
								args = "(hItem: root.steamworks.workshop.Item,addonDirectory: )",
								returns = "()",
								valuetype = ""
							},
							["TYPE_COMMUNITY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_ART"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_STEAM_VIDEO"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_CONCEPT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_MICROTRANSACTION"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_COLLECTION"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_GAME"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_CONTROLLER_BINDING"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_INTEGRATED_GUIDE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_GAME_MANAGED_ITEM"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_MERCH"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_SCREENSHOT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_SOFTWARE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_STEAMWORKS_ACCESS_INVITE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_VIDEO"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_WEB_GUIDE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_SUBSCRIBED_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_DOWNLOAD_PENDING_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_DOWNLOADING_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_NONE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_INSTALLED_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_LEGACY_ITEM_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_NEEDS_UPDATE_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},

		}
	},
	["game"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_ammo_type_id"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: )",
				returns = "()",
				valuetype = ""
			},
			["get_sound_intensity"] = {
				type = "function",
				description = [[]],
				args = "(l: ,pos: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["get_ammo_type_name"] = {
				type = "function",
				description = [[]],
				args = "(l: ,typeId: )",
				returns = "()",
				valuetype = ""
			},
			["is_game_mode_initialized"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_nav_mesh"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["register_ammo_type"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: )",
				returns = "()",
				valuetype = ""
			},
			["change_map"] = {
				type = "function",
				description = [[]],
				args = "(mapName: )",
				returns = "()",
				valuetype = ""
			},
			["get_time_scale"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_game_mode"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["clear_unused_materials"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["get_light_color"] = {
				type = "function",
				description = [[]],
				args = "(l: ,pos: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["load_nav_mesh"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_material"] = {
				type = "function",
				description = [[]],
				args = "(identifier: )",
				returns = "(root.game.Material)",
				valuetype = "Material"
			},
			["is_map_loaded"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_map_name"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["get_game_state_flags"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["set_gravity"] = {
				type = "function",
				description = [[]],
				args = "(gravity: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["add_callback"] = {
				type = "function",
				description = [[]],
				args = "(l: ,identifier: ,function: )",
				returns = "()",
				valuetype = ""
			},
			["get_gravity"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["load_model"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: )",
				returns = "()",
				valuetype = ""
			},
			["load_sound_scripts"] = {
				type = "function",
				description = [[]],
				args = "(l: ,fileName: )",
				returns = "()",
				valuetype = ""
			},
			["precache_model"] = {
				type = "function",
				description = [[]],
				args = "(l: ,mdlName: )",
				returns = "()",
				valuetype = ""
			},
			["get_model"] = {
				type = "function",
				description = [[]],
				args = "(l: ,mdlName: )",
				returns = "(root.game.Model)",
				valuetype = "Model"
			},
			["load_material"] = {
				type = "function",
				description = [[]],
				args = "(mat: )",
				returns = "(root.game.Material)",
				valuetype = "Material"
			},
			["set_time_scale"] = {
				type = "function",
				description = [[]],
				args = "(l: ,timeScale: )",
				returns = "()",
				valuetype = ""
			},
			["call_callbacks"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["clear_callbacks"] = {
				type = "function",
				description = [[]],
				args = "(l: ,identifier: )",
				returns = "()",
				valuetype = ""
			},
			["load_texture"] = {
				type = "function",
				description = [[]],
				args = "(l: ,file: root.file.File)",
				returns = "(root.prosper.Texture)",
				valuetype = "Texture"
			},
			["create_material"] = {
				type = "function",
				description = [[]],
				args = "(shader: )",
				returns = "(root.game.Material)",
				valuetype = "Material"
			},
			["precache_material"] = {
				type = "function",
				description = [[]],
				args = "(l: ,mat: )",
				returns = "()",
				valuetype = ""
			},
			["get_error_material"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(root.game.Material)",
				valuetype = "Material"
			},
			["precache_particle_system"] = {
				type = "function",
				description = [[]],
				args = "(l: ,particle: )",
				returns = "()",
				valuetype = ""
			},
			["drone"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["BulletInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.game.BulletInfo)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["direction"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["distance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["effectOrigin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["spread"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["damageType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["damage"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bulletCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["force"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["attacker"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["inflictor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerColor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerLength"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerMaterial"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerBloom"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ammoType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["limits"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["SurfaceMaterial"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,friction: )",
						returns = "()",
						valuetype = ""
					},
					["SetSubsurfaceColor"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["SetDensity"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,density: )",
						returns = "()",
						valuetype = ""
					},
					["GetPBRRoughness"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetAudioScattering"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,scattering: )",
						returns = "()",
						valuetype = ""
					},
					["GetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetAudioMidFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,absp: )",
						returns = "()",
						valuetype = ""
					},
					["SetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,coefficient: )",
						returns = "()",
						valuetype = ""
					},
					["ClearIOR"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetSoftImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,snd: )",
						returns = "()",
						valuetype = ""
					},
					["GetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetDensity"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,coefficient: )",
						returns = "()",
						valuetype = ""
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,friction: )",
						returns = "()",
						valuetype = ""
					},
					["SetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,friction: )",
						returns = "()",
						valuetype = ""
					},
					["GetAudioHighFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetHardImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,snd: )",
						returns = "()",
						valuetype = ""
					},
					["GetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetAudioLowFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,restitution: )",
						returns = "()",
						valuetype = ""
					},
					["GetAudioScattering"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetFootstepSound"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetWavePropagation"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetFootstepSound"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,type: )",
						returns = "()",
						valuetype = ""
					},
					["SetBulletImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,snd: )",
						returns = "()",
						valuetype = ""
					},
					["SetWavePropagation"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,propagation: )",
						returns = "()",
						valuetype = ""
					},
					["SetImpactParticleEffect"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,eff: )",
						returns = "()",
						valuetype = ""
					},
					["SetSubsurfaceRadiusMM"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,radiusMM: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetImpactParticleEffect"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetBulletImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetHardImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetWaveStiffness"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetSubsurfaceScatterColor"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,radiusRGB: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetIOR"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetAudioLowFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetIOR"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,ior: )",
						returns = "()",
						valuetype = ""
					},
					["SetAudioLowFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,absp: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetAudioMidFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetSubsurfaceRadiusMM"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetAudioHighFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,absp: )",
						returns = "()",
						valuetype = ""
					},
					["SetAudioLowFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,transmission: )",
						returns = "()",
						valuetype = ""
					},
					["SetWaveStiffness"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,stiffness: )",
						returns = "()",
						valuetype = ""
					},
					["SetAudioMidFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,transmission: )",
						returns = "()",
						valuetype = ""
					},
					["GetAudioMidFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetAudioHighFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial,transmission: )",
						returns = "()",
						valuetype = ""
					},
					["GetPBRMetalness"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetAudioHighFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetNavigationFlags"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetNavigationFlags"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,navFlags: )",
						returns = "()",
						valuetype = ""
					},
					["GetSubsurfaceFactor"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["SetSubsurfaceFactor"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial,factor: )",
						returns = "()",
						valuetype = ""
					},
					["GetSubsurfaceScatterColor"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetSubsurfaceColor"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Model"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMeshGroupId"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,bodyGroupId: ,groupId: )",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,min: root.vector.Vector,max: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetSkeleton"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetBaseMeshGroupIds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["LookupFlexController"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetHitboxGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,boneId: ,hitGroup: )",
						returns = "()",
						valuetype = ""
					},
					["GetAnimations"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionMeshes"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetSubMeshCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetBlendControllerCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationNames"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["AddMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,textureGroup: ,name: )",
						returns = "()",
						valuetype = ""
					},
					["ClearMeshGroups"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetAttachments"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["ClearCollisionMeshes"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetAttachmentCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetTextureGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,id: )",
						returns = "()",
						valuetype = ""
					},
					["GetAttachment"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,attId: )",
						returns = "()",
						valuetype = ""
					},
					["AddAttachment"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: ,boneId: ,offset: root.vector.Vector,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["SetAttachmentData"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,attId: ,data: )",
						returns = "()",
						valuetype = ""
					},
					["GetTextureGroups"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["AddEyeball"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,eyeball: root.Model.Eyeball)",
						returns = "()",
						valuetype = ""
					},
					["RemoveAttachment"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,attId: )",
						returns = "()",
						valuetype = ""
					},
					["SetBaseMeshGroupIds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,o: )",
						returns = "()",
						valuetype = ""
					},
					["AddMeshGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,meshGroup: root.Model.MeshGroup)",
						returns = "()",
						valuetype = ""
					},
					["GetTextureGroupCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetObjectAttachments"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["SelectWeightedAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,activity: ,animIgnore: )",
						returns = "()",
						valuetype = ""
					},
					["AddBaseMeshGroupId"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["AddObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,type: ,name: ,attachment: ,oKeyValues: )",
						returns = "()",
						valuetype = ""
					},
					["GetObjectAttachmentCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetHitboxGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["TranslateLODMeshes"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,lod: )",
						returns = "()",
						valuetype = ""
					},
					["GetObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["LookupObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetMeshGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,mgId: )",
						returns = "()",
						valuetype = ""
					},
					["UpdateCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["RemoveObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["PrecacheTextureGroups"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionMeshCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["RemoveHitbox"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["GetBlendControllers"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["PrecacheTextureGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,group: )",
						returns = "()",
						valuetype = ""
					},
					["LookupAttachment"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["AddHitbox"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,boneId: ,hitGroup: ,min: root.vector.Vector,max: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationName"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,animID: )",
						returns = "()",
						valuetype = ""
					},
					["GetReferencePose"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetMeshes"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,o: )",
						returns = "()",
						valuetype = ""
					},
					["LookupBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetMeshGroups"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["UpdateRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetBodyGroupCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,mass: )",
						returns = "()",
						valuetype = ""
					},
					["SetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,min: root.vector.Vector,max: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetMaterialPaths"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["AddCollisionMesh"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,colMesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["SetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,texIdx: ,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaterials"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["LookupAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaterialIndex"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,mesh: root.Model.Mesh.Sub,skinId: )",
						returns = "()",
						valuetype = ""
					},
					["LookupBlendController"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetMeshGroupCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetBodyGroupId"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,bodyGroupName: )",
						returns = "()",
						valuetype = ""
					},
					["GetHitboxBones"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["SetHitboxBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,boneId: ,min: root.vector.Vector,max: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetMaterialNames"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["LookupFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["LoadMaterials"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,bReload: )",
						returns = "()",
						valuetype = ""
					},
					["AddMaterialPath"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,path: )",
						returns = "()",
						valuetype = ""
					},
					["GetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,blendControllerId: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveMaterialPath"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaterialPaths"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,o: )",
						returns = "()",
						valuetype = ""
					},
					["HasVertexWeights"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["RemoveMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["ClearMaterials"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["AddAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: ,anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["RemoveAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["ClearAnimations"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["RemoveMeshGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["ClearJoints"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["ClearBaseMeshGroupIds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["AddTextureGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetLODCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["SelectFirstAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,activity: )",
						returns = "()",
						valuetype = ""
					},
					["GetLODData"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["SetFlags"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,flags: )",
						returns = "()",
						valuetype = ""
					},
					["GetLOD"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,fname: )",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,copyFlags: )",
						returns = "()",
						valuetype = ""
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,t: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetHitboxCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetHitboxBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,flags: )",
						returns = "()",
						valuetype = ""
					},
					["GetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,animID: )",
						returns = "()",
						valuetype = ""
					},
					["GetVertexCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["IsRootBone"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["GetBodyGroups"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetMeshCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,animId: ,frameId: ,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["GetEyeballCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetJoints"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["AddJoint"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,type: ,child: ,parent: )",
						returns = "(root.Model.Joint)",
						valuetype = "Joint"
					},
					["GetVertexAnimations"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["AddVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetBodyGroupMeshes"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetBodyGroupMesh"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,bodyGroupId: ,bgValue: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexControllers"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["RemoveIKController"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexController"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,id: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexes"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["LookupFlex"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexFormula"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,flexId: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["CalcFlexWeight"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,flexId: ,oFc: )",
						returns = "()",
						valuetype = ""
					},
					["CalcReferenceAttachmentPose"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,attIdx: )",
						returns = "()",
						valuetype = ""
					},
					["HasFlag"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,flag: )",
						returns = "()",
						valuetype = ""
					},
					["GetEyeballs"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetIKControllers"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetIKController"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,id: )",
						returns = "()",
						valuetype = ""
					},
					["LookupIKController"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetIncludeModels"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["ExportAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,animName: ,exportInfo: root.game.Model.ExportInfo)",
						returns = "()",
						valuetype = ""
					},
					["AddIKController"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: ,chainLength: ,type: )",
						returns = "()",
						valuetype = ""
					},
					["AddIncludeModel"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,modelName: )",
						returns = "()",
						valuetype = ""
					},
					["GetPhonemeMap"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexControllerCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["SaveLegacy"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["AssignDistinctMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,group: root.Model.MeshGroup,mesh: root.Model.Mesh,subMesh: root.Model.Mesh.Sub)",
						returns = "()",
						valuetype = ""
					},
					["GetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["SetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,offset: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationActivityWeight"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,anim: )",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationDuration"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,anim: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexAnimations"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexAnimationNames"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexAnimationCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexAnimationName"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["AddFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: ,flexAnim: root.Model.FlexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["ClearFlexAnimations"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["RemoveFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationActivity"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,anim: )",
						returns = "()",
						valuetype = ""
					},
					["SetPhonemeMap"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,o: )",
						returns = "()",
						valuetype = ""
					},
					["GetTriangleCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["IsStatic"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,eyeballIndex: )",
						returns = "()",
						valuetype = ""
					},
					["CalcReferenceBonePose"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,boneIdx: )",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.game.Model,1: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,bgId: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,idx: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaterialCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,mdlOther: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["GetVertexAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model)",
						returns = "()",
						valuetype = ""
					},
					["Export"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.game.Model,exportInfo: root.game.Model.ExportInfo)",
						returns = "()",
						valuetype = ""
					},
					["FUPDATE_VERTEX_ANIMATION_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_VERTEX_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBJECT_ATTACHMENT_TYPE_MODEL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBJECT_ATTACHMENT_TYPE_PARTICLE_SYSTEM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_ALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_ALL_DATA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_INDEX_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_ALPHA_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_BUFFERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_BOUNDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_COLLISION_SHAPES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_CHILDREN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_PRIMITIVE_COUNTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_TANGENTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_WEIGHT_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_DEEP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_SHALLOW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_ALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_HITBOXES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_ATTACHMENTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_JOINTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_BLEND_CONTROLLERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_COLLISION_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_COLLISION_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_FLEX_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_VERTEX_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_INANIMATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_DONT_PRECACHE_TEXTURE_GROUPS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_STATIC"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["VertexAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.VertexAnimation)",
								returns = "()",
								valuetype = ""
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(vertAnim: root.game.Model.VertexAnimation,rot: root.math.QuaternionInternal)",
								returns = "()",
								valuetype = ""
							},
							["GetMeshAnimations"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.VertexAnimation)",
								returns = "()",
								valuetype = ""
							},
							["MeshAnimation"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetMesh"] = {
										type = "method",
										description = [[]],
										args = "(anim: root.game.Model.VertexAnimation.MeshAnimation)",
										returns = "()",
										valuetype = ""
									},
									["Rotate"] = {
										type = "method",
										description = [[]],
										args = "(meshVertAnim: root.game.Model.VertexAnimation.MeshAnimation,rot: root.math.QuaternionInternal)",
										returns = "()",
										valuetype = ""
									},
									["GetFrames"] = {
										type = "method",
										description = [[]],
										args = "(anim: root.game.Model.VertexAnimation.MeshAnimation)",
										returns = "()",
										valuetype = ""
									},
									["Frame"] = {
										type = "class",
										description = [[]],
										childs = {
											["GetVertexCount"] = {
												type = "method",
												description = [[]],
												args = "(meshVertFrame: root.game.Model.VertexAnimation.MeshAnimation.Frame)",
												returns = "()",
												valuetype = ""
											},
											["GetVertices"] = {
												type = "method",
												description = [[]],
												args = "(frame: root.game.Model.VertexAnimation.MeshAnimation.Frame)",
												returns = "()",
												valuetype = ""
											},
											["SetDeltaValue"] = {
												type = "method",
												description = [[]],
												args = "(meshVertFrame: root.game.Model.VertexAnimation.MeshAnimation.Frame,vertId: ,value: )",
												returns = "()",
												valuetype = ""
											},
											["SetFlags"] = {
												type = "method",
												description = [[]],
												args = "(meshVertFrame: root.game.Model.VertexAnimation.MeshAnimation.Frame,flags: )",
												returns = "()",
												valuetype = ""
											},
											["SetVertexPosition"] = {
												type = "method",
												description = [[]],
												args = "(frame: root.game.Model.VertexAnimation.MeshAnimation.Frame,vertIdx: ,pos: root.vector.Vector)",
												returns = "()",
												valuetype = ""
											},
											["SetVertexNormal"] = {
												type = "method",
												description = [[]],
												args = "(frame: root.game.Model.VertexAnimation.MeshAnimation.Frame,vertIdx: ,n: root.vector.Vector)",
												returns = "()",
												valuetype = ""
											},
											["Rotate"] = {
												type = "method",
												description = [[]],
												args = "(meshVertFrame: root.game.Model.VertexAnimation.MeshAnimation.Frame,rot: root.math.QuaternionInternal)",
												returns = "()",
												valuetype = ""
											},
											["GetVertexNormal"] = {
												type = "method",
												description = [[]],
												args = "(frame: root.game.Model.VertexAnimation.MeshAnimation.Frame,vertIdx: )",
												returns = "()",
												valuetype = ""
											},
											["GetVertexPosition"] = {
												type = "method",
												description = [[]],
												args = "(frame: root.game.Model.VertexAnimation.MeshAnimation.Frame,vertIdx: )",
												returns = "()",
												valuetype = ""
											},
											["GetDeltaValue"] = {
												type = "method",
												description = [[]],
												args = "(meshVertFrame: root.game.Model.VertexAnimation.MeshAnimation.Frame,vertId: )",
												returns = "()",
												valuetype = ""
											},
											["GetFlags"] = {
												type = "method",
												description = [[]],
												args = "(meshVertFrame: root.game.Model.VertexAnimation.MeshAnimation.Frame)",
												returns = "()",
												valuetype = ""
											},
											["SetVertexCount"] = {
												type = "method",
												description = [[]],
												args = "(frame: root.game.Model.VertexAnimation.MeshAnimation.Frame,numVerts: )",
												returns = "()",
												valuetype = ""
											},
											["FLAG_BIT_HAS_DELTA_VALUES"] = {
												type = "value",
												description = [[]],
												valuetype = ""
											},
											["FLAG_NONE"] = {
												type = "value",
												description = [[]],
												valuetype = ""
											}
										}
									},

								}
							},

						}
					},
					["MeshGroup"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetMeshes"] = {
								type = "method",
								description = [[]],
								args = "(meshGroup: root.game.Model.MeshGroup)",
								returns = "()",
								valuetype = ""
							},
							["GetMesh"] = {
								type = "method",
								description = [[]],
								args = "(meshGroup: root.game.Model.MeshGroup,index: )",
								returns = "()",
								valuetype = ""
							},
							["AddMesh"] = {
								type = "method",
								description = [[]],
								args = "(meshGroup: root.game.Model.MeshGroup,mesh: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["GetMeshCount"] = {
								type = "method",
								description = [[]],
								args = "(meshGroup: root.game.Model.MeshGroup,index: )",
								returns = "()",
								valuetype = ""
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(0: root.game.Model.MeshGroup,1: root.game.Model.MeshGroup)",
								returns = "()",
								valuetype = ""
							},
							["ClearMeshes"] = {
								type = "method",
								description = [[]],
								args = "(meshGroup: root.game.Model.MeshGroup)",
								returns = "()",
								valuetype = ""
							},
							["SetMeshes"] = {
								type = "method",
								description = [[]],
								args = "(meshGroup: root.game.Model.MeshGroup,tMeshes: )",
								returns = "()",
								valuetype = ""
							},
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "(meshGroup: root.game.Model.MeshGroup)",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["ExportInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["SetAnimationList"] = {
								type = "method",
								description = [[]],
								args = "(exportInfo: root.game.Model.ExportInfo,oTable: )",
								returns = "()",
								valuetype = ""
							},
							["IMAGE_FORMAT_JPG"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["IMAGE_FORMAT_BMP"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["IMAGE_FORMAT_DDS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["IMAGE_FORMAT_HDR"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["IMAGE_FORMAT_KTX"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["IMAGE_FORMAT_PNG"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["IMAGE_FORMAT_TGA"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["DEVICE_CPU"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["DEVICE_GPU"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["exportAnimations"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["enableExtendedDDS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["exportSkinnedMeshData"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["exportMorphTargets"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["exportImages"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["embedAnimations"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["normalizeTextureNames"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["fullExport"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["saveAsBinary"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["verbose"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["generateAo"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["aoSamples"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["aoResolution"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["scale"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mergeMeshesByMaterial"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["imageFormat"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["aoDevice"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["Joint"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetKeyValues"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint,keyValues: )",
								returns = "()",
								valuetype = ""
							},
							["GetChildBoneId"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint)",
								returns = "()",
								valuetype = ""
							},
							["GetParentBoneId"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint)",
								returns = "()",
								valuetype = ""
							},
							["RemoveKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint,key: )",
								returns = "()",
								valuetype = ""
							},
							["GetArgs"] = {
								type = "method",
								description = [[]],
								args = "(jointInfo: root.game.Model.Joint)",
								returns = "()",
								valuetype = ""
							},
							["SetArgs"] = {
								type = "method",
								description = [[]],
								args = "(jointInfo: root.game.Model.Joint,t: )",
								returns = "()",
								valuetype = ""
							},
							["SetKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint,key: ,val: )",
								returns = "()",
								valuetype = ""
							},
							["GetType"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint)",
								returns = "()",
								valuetype = ""
							},
							["SetCollisionsEnabled"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint,bEnabled: )",
								returns = "()",
								valuetype = ""
							},
							["GetCollisionsEnabled"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint)",
								returns = "()",
								valuetype = ""
							},
							["GetKeyValues"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint)",
								returns = "()",
								valuetype = ""
							},
							["SetType"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint,type: )",
								returns = "()",
								valuetype = ""
							},
							["SetCollisionMeshId"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint,meshId: )",
								returns = "()",
								valuetype = ""
							},
							["SetParentCollisionMeshId"] = {
								type = "method",
								description = [[]],
								args = "(joint: root.game.Model.Joint,meshId: )",
								returns = "()",
								valuetype = ""
							},
							["TYPE_BALLSOCKET"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_FIXED"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_CONETWIST"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_DOF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_HINGE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_NONE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_SLIDER"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["collide"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["Vertex"] = {
						type = "class",
						description = [[]],
						childs = {
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(root.game.Model.Vertex)",
								valuetype = "Vertex"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "(0: root.game.Model.Vertex)",
								returns = "()",
								valuetype = ""
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(0: root.game.Model.Vertex,1: root.game.Model.Vertex)",
								returns = "()",
								valuetype = ""
							},
							["GetBiTangent"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(root.vector.Vector)",
								valuetype = "Vector"
							},
							["tangent"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["position"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["uv"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["normal"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["VertexWeight"] = {
						type = "class",
						description = [[]],
						childs = {
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(root.game.Model.VertexWeight)",
								valuetype = "VertexWeight"
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "(0: root.game.Model.VertexWeight)",
								returns = "()",
								valuetype = ""
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(0: root.game.Model.VertexWeight,1: root.game.Model.VertexWeight)",
								returns = "()",
								valuetype = ""
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["boneIds"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["weights"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["Flex"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetFrameIndex"] = {
								type = "method",
								description = [[]],
								args = "(flex: root.game.Model.Flex)",
								returns = "()",
								valuetype = ""
							},
							["GetVertexAnimation"] = {
								type = "method",
								description = [[]],
								args = "(flex: root.game.Model.Flex)",
								returns = "()",
								valuetype = ""
							},
							["SetVertexAnimation"] = {
								type = "method",
								description = [[]],
								args = "(flex: root.game.Model.Flex,anim: root.game.Model.VertexAnimation)",
								returns = "()",
								valuetype = ""
							},
							["GetOperations"] = {
								type = "method",
								description = [[]],
								args = "(flex: root.game.Model.Flex)",
								returns = "()",
								valuetype = ""
							},
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "(flex: root.game.Model.Flex)",
								returns = "()",
								valuetype = ""
							},
							["OP_TWO_WAY0"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_TWO_WAY1"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_DME_LOWER_EYELID"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_DME_UPPER_EYELID"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_ADD"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_CONST"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_DOMINATE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_DIV"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_CLOSE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_COMBO"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_EXP"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_COMMA"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_MIN"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_FETCH"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_FETCH2"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_MAX"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_MUL"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_NEG"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_NONE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_OPEN"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_N_WAY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_SUB"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["Operation"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetName"] = {
										type = "method",
										description = [[]],
										args = "(flex: root.game.Model.Flex)",
										returns = "()",
										valuetype = ""
									},
									["value"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["index"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["type"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									}
								}
							},

						}
					},
					["Skeleton"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetBoneCount"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton)",
								returns = "()",
								valuetype = ""
							},
							["ClearBones"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton)",
								returns = "()",
								valuetype = ""
							},
							["GetBone"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton,boneId: )",
								returns = "()",
								valuetype = ""
							},
							["MakeRootBone"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton,bone: root.game.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["Merge"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton,skeletonOther: root.game.Model.Skeleton)",
								returns = "()",
								valuetype = ""
							},
							["IsRootBone"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton,boneId: )",
								returns = "()",
								valuetype = ""
							},
							["GetRootBones"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton)",
								returns = "()",
								valuetype = ""
							},
							["GetBones"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton)",
								returns = "()",
								valuetype = ""
							},
							["LookupBone"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton,name: )",
								returns = "()",
								valuetype = ""
							},
							["AddBone"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton,name: )",
								returns = "()",
								valuetype = ""
							},
							["GetBoneHierarchy"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: root.game.Model.Skeleton)",
								returns = "()",
								valuetype = ""
							},
							["Bone"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetParent"] = {
										type = "method",
										description = [[]],
										args = "(bone: root.game.Model.Skeleton.Bone)",
										returns = "()",
										valuetype = ""
									},
									["IsDescendantOf"] = {
										type = "method",
										description = [[]],
										args = "(arg1: root.game.Model.Skeleton.Bone)",
										returns = "()",
										valuetype = ""
									},
									["ClearParent"] = {
										type = "method",
										description = [[]],
										args = "(bone: root.game.Model.Skeleton.Bone)",
										returns = "()",
										valuetype = ""
									},
									["GetID"] = {
										type = "method",
										description = [[]],
										args = "(bone: root.game.Model.Skeleton.Bone)",
										returns = "()",
										valuetype = ""
									},
									["SetParent"] = {
										type = "method",
										description = [[]],
										args = "(bone: root.game.Model.Skeleton.Bone,parent: root.game.Model.Skeleton.Bone)",
										returns = "()",
										valuetype = ""
									},
									["GetName"] = {
										type = "method",
										description = [[]],
										args = "(bone: root.game.Model.Skeleton.Bone)",
										returns = "()",
										valuetype = ""
									},
									["SetName"] = {
										type = "method",
										description = [[]],
										args = "(bone: root.game.Model.Skeleton.Bone,name: )",
										returns = "()",
										valuetype = ""
									},
									["IsAncestorOf"] = {
										type = "method",
										description = [[]],
										args = "(arg1: root.game.Model.Skeleton.Bone)",
										returns = "()",
										valuetype = ""
									},
									["GetChildren"] = {
										type = "method",
										description = [[]],
										args = "(bone: root.game.Model.Skeleton.Bone)",
										returns = "()",
										valuetype = ""
									},
									["__tostring"] = {
										type = "method",
										description = [[]],
										args = "(0: root.game.Model.Skeleton.Bone)",
										returns = "()",
										valuetype = ""
									}
								}
							},

						}
					},
					["Mesh"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["ClearSubMeshes"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["Scale"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.Mesh,scale: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(0: root.game.Model.Mesh,1: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["GetReferenceId"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh,translation: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["GetSubMeshCount"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["GetSubMesh"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh,index: )",
								returns = "()",
								valuetype = ""
							},
							["GetTriangleVertexCount"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["GetTriangleCount"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["SetSubMeshes"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh,tSubMeshes: )",
								returns = "()",
								valuetype = ""
							},
							["GetCenter"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["RemoveSubMesh"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh,i: )",
								returns = "()",
								valuetype = ""
							},
							["Update"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.Mesh,flags: )",
								returns = "()",
								valuetype = ""
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.Mesh,rotation: root.math.QuaternionInternal)",
								returns = "()",
								valuetype = ""
							},
							["Centralize"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["GetBounds"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["SetCenter"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.Mesh,center: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "(0: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["AddSubMesh"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.Mesh,mesh: root.game.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["GetSubMeshes"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.Mesh)",
								returns = "()",
								valuetype = ""
							},
							["Sub"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: )",
										returns = "()",
										valuetype = ""
									},
									["GetPose"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["AddPoint"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,idx: )",
										returns = "()",
										valuetype = ""
									},
									["GetVertexWeights"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["Rotate"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,rotation: root.math.QuaternionInternal)",
										returns = "()",
										valuetype = ""
									},
									["GetTriangleCount"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetCenter"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["SetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: ,pos: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["SetPose"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,pose: root.phys.ScaledTransform)",
										returns = "()",
										valuetype = ""
									},
									["SetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,n: )",
										returns = "()",
										valuetype = ""
									},
									["ReserveVertices"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,numVerts: )",
										returns = "()",
										valuetype = ""
									},
									["Copy"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "(root.game.Model.Mesh.Sub)",
										valuetype = "Sub"
									},
									["FlipTriangleWindingOrder"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["Transform"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,pose: root.phys.ScaledTransform)",
										returns = "()",
										valuetype = ""
									},
									["SetSkinTextureIndex"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,texture: )",
										returns = "()",
										valuetype = ""
									},
									["SetVertexAlpha"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: ,alpha: root.math.Vector2)",
										returns = "()",
										valuetype = ""
									},
									["GetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: )",
										returns = "()",
										valuetype = ""
									},
									["SetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: ,normal: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["AddVertex"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,v: root.game.Model.Vertex)",
										returns = "()",
										valuetype = ""
									},
									["SetVertexUV"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: ,uv: root.math.Vector2)",
										returns = "()",
										valuetype = ""
									},
									["ClearExtendedVertexWeights"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["__eq"] = {
										type = "method",
										description = [[]],
										args = "(0: root.game.Model.Mesh.Sub,1: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["ApplyUVMapping"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,nu: root.vector.Vector,nv: root.vector.Vector,w: ,h: ,ou: ,ov: ,su: ,sv: )",
										returns = "()",
										valuetype = ""
									},
									["SetVertexTangent"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,idx: ,t: root.math.Vector4)",
										returns = "()",
										valuetype = ""
									},
									["AddTriangle"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,a: ,b: ,c: )",
										returns = "()",
										valuetype = ""
									},
									["GetVertices"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetUVSetNames"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["__tostring"] = {
										type = "method",
										description = [[]],
										args = "(0: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["ClipAgainstPlane"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,n: root.vector.Vector,d: )",
										returns = "()",
										valuetype = ""
									},
									["GetVertexUV"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: )",
										returns = "()",
										valuetype = ""
									},
									["GetVertex"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: )",
										returns = "()",
										valuetype = ""
									},
									["ClearVertexWeights"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetSkinTextureIndex"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["NormalizeUVCoordinates"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["Update"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["SetIndexCount"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,n: )",
										returns = "()",
										valuetype = ""
									},
									["GetTriangleVertexCount"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["ReserveTriangles"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,numTris: )",
										returns = "()",
										valuetype = ""
									},
									["AddUVSet"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,uvSetName: )",
										returns = "()",
										valuetype = ""
									},
									["GetUVs"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,uvSetName: )",
										returns = "()",
										valuetype = ""
									},
									["GetNormals"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["SetVertexWeight"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: ,weight: root.game.Model.VertexWeight)",
										returns = "()",
										valuetype = ""
									},
									["GetReferenceId"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetBounds"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["SetVertex"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: ,v: root.game.Model.Vertex)",
										returns = "()",
										valuetype = ""
									},
									["GetTriangles"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetVertexAlpha"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: )",
										returns = "()",
										valuetype = ""
									},
									["GetVertexBuffer"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetVertexWeight"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub,idx: )",
										returns = "()",
										valuetype = ""
									},
									["Optimize"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GenerateNormals"] = {
										type = "method",
										description = [[]],
										args = "(mdl: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["ReserveVertexWeights"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,numVerts: )",
										returns = "()",
										valuetype = ""
									},
									["ClearVertices"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["ClearTriangles"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetGeometryType"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["SetGeometryType"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,geometryType: )",
										returns = "()",
										valuetype = ""
									},
									["AddLine"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,idx0: ,idx1: )",
										returns = "()",
										valuetype = ""
									},
									["ClearAlphas"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["ClearUVSets"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["HasUVSet"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,uvSetName: )",
										returns = "()",
										valuetype = ""
									},
									["ClearVertexData"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetTangents"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetBiTangents"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetVertexWeightBuffer"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetAlphaBuffer"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetIndexBuffer"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["GetSceneMesh"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub)",
										returns = "()",
										valuetype = ""
									},
									["Translate"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,translation: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["Scale"] = {
										type = "method",
										description = [[]],
										args = "(mesh: root.game.Model.Mesh.Sub,scale: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["GEOMETRY_TYPE_LINES"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["GEOMETRY_TYPE_POINTS"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["GEOMETRY_TYPE_TRIANGLES"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									}
								}
							},

						}
					},
					["FlexAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetFlexControllerValue"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation,frameId: ,id: ,val: )",
								returns = "()",
								valuetype = ""
							},
							["GetFps"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation)",
								returns = "()",
								valuetype = ""
							},
							["SetFlexControllerIds"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation,tIds: )",
								returns = "()",
								valuetype = ""
							},
							["SetFps"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation,fps: )",
								returns = "()",
								valuetype = ""
							},
							["GetFlexControllerIds"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation)",
								returns = "()",
								valuetype = ""
							},
							["AddFlexControllerId"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation,id: )",
								returns = "()",
								valuetype = ""
							},
							["GetFlexControllerCount"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation)",
								returns = "()",
								valuetype = ""
							},
							["SaveLegacy"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation,f: root.file.File)",
								returns = "()",
								valuetype = ""
							},
							["LookupLocalFlexControllerIndex"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation,id: )",
								returns = "()",
								valuetype = ""
							},
							["AddFrame"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation)",
								returns = "(root.game.Model.FlexAnimation.Frame)",
								valuetype = "Frame"
							},
							["ClearFrames"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation)",
								returns = "()",
								valuetype = ""
							},
							["RemoveFrame"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation,idx: )",
								returns = "()",
								valuetype = ""
							},
							["GetFrameCount"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation)",
								returns = "()",
								valuetype = ""
							},
							["GetFrame"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation,frameId: )",
								returns = "(root.game.Model.FlexAnimation.Frame)",
								valuetype = "Frame"
							},
							["GetFrames"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation)",
								returns = "()",
								valuetype = ""
							},
							["Save"] = {
								type = "method",
								description = [[]],
								args = "(flexAnim: root.game.Model.FlexAnimation,assetData: root.udm.AssetData)",
								returns = "()",
								valuetype = ""
							},
							["Frame"] = {
								type = "class",
								description = [[]],
								childs = {
									["SetFlexControllerValue"] = {
										type = "method",
										description = [[]],
										args = "(flexAnimFrame: root.game.Model.FlexAnimation.Frame,id: ,val: )",
										returns = "()",
										valuetype = ""
									},
									["GetFlexControllerValues"] = {
										type = "method",
										description = [[]],
										args = "(flexAnimFrame: root.game.Model.FlexAnimation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["SetFlexControllerValues"] = {
										type = "method",
										description = [[]],
										args = "(flexAnimFrame: root.game.Model.FlexAnimation.Frame,t: )",
										returns = "()",
										valuetype = ""
									},
									["GetFlexControllerValue"] = {
										type = "method",
										description = [[]],
										args = "(flexAnimFrame: root.game.Model.FlexAnimation.Frame,id: )",
										returns = "()",
										valuetype = ""
									},
									["GetFlexControllerValueCount"] = {
										type = "method",
										description = [[]],
										args = "(flexAnimFrame: root.game.Model.FlexAnimation.Frame)",
										returns = "()",
										valuetype = ""
									}
								}
							},

						}
					},
					["Eyeball"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetLowerLidFlexAngles"] = {
								type = "method",
								description = [[]],
								args = "(eyeball: root.game.Model.Eyeball)",
								returns = "()",
								valuetype = ""
							},
							["GetLowerLidFlexIndex"] = {
								type = "method",
								description = [[]],
								args = "(eyeball: root.game.Model.Eyeball)",
								returns = "()",
								valuetype = ""
							},
							["GetUpperLidFlexIndex"] = {
								type = "method",
								description = [[]],
								args = "(eyeball: root.game.Model.Eyeball)",
								returns = "()",
								valuetype = ""
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["GetUpperLidFlexIndices"] = {
								type = "method",
								description = [[]],
								args = "(eyeball: root.game.Model.Eyeball)",
								returns = "()",
								valuetype = ""
							},
							["GetUpperLidFlexAngles"] = {
								type = "method",
								description = [[]],
								args = "(eyeball: root.game.Model.Eyeball)",
								returns = "()",
								valuetype = ""
							},
							["GetLowerLidFlexIndices"] = {
								type = "method",
								description = [[]],
								args = "(eyeball: root.game.Model.Eyeball)",
								returns = "()",
								valuetype = ""
							},
							["name"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["origin"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["radius"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["boneIndex"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["zOffset"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["forward"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["up"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisMaterialIndex"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["maxDilationFactor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisUvRadius"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisScale"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["CollisionMesh"] = {
						type = "class",
						description = [[]],
						childs = {
							["IsSoftBody"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,t: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["AddTriangle"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,idx0: ,idx1: ,idx2: )",
								returns = "()",
								valuetype = ""
							},
							["GetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetVertices"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["SetConvex"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,bConvex: )",
								returns = "()",
								valuetype = ""
							},
							["GetBoneParentId"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetShape"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetOrigin"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetAABB"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetSurfaceMaterialId"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetSurfaceMaterialIds"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,rot: root.math.QuaternionInternal)",
								returns = "()",
								valuetype = ""
							},
							["IsConvex"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["SetSoftBodyMesh"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,subMesh: )",
								returns = "()",
								valuetype = ""
							},
							["SetAABB"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,min: root.vector.Vector,max: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["SetBoneParentId"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,boneId: )",
								returns = "()",
								valuetype = ""
							},
							["Centralize"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["SetTriangles"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,tTriangles: )",
								returns = "()",
								valuetype = ""
							},
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["SetOrigin"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,origin: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["SetSurfaceMaterialId"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,surfaceMaterialId: )",
								returns = "()",
								valuetype = ""
							},
							["Update"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["AddVertex"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,v: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["GetTriangles"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["SetSoftBodyTriangles"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,o: )",
								returns = "()",
								valuetype = ""
							},
							["ClipAgainstPlane"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.game.Model.CollisionMesh,n: root.vector.Vector,d: ,clippedMeshA: root.game.Model.CollisionMesh,clippedMeshB: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["ClearSoftBodyAnchors"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetVolume"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["ClearVertices"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["AddSoftBodyAnchor"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,vertIdx: ,boneIdx: )",
								returns = "()",
								valuetype = ""
							},
							["SetVolume"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,volume: )",
								returns = "()",
								valuetype = ""
							},
							["ClearTriangles"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["SetVertices"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,tVertices: )",
								returns = "()",
								valuetype = ""
							},
							["SetSoftBody"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,bSoftBody: )",
								returns = "()",
								valuetype = ""
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "(0: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetSoftBodyMesh"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetSoftBodyInfo"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["GetSoftBodyTriangles"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["RemoveSoftBodyAnchor"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,anchorIdx: )",
								returns = "()",
								valuetype = ""
							},
							["GetSoftBodyAnchors"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh)",
								returns = "()",
								valuetype = ""
							},
							["IntersectAABB"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.game.Model.CollisionMesh,min: root.vector.Vector,max: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["FSOFTBODY_ANCHOR_DISABLE_COLLISIONS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FSOFTBODY_ANCHOR_NONE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FSOFTBODY_ANCHOR_RIGID"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["Animation"] = {
						type = "class",
						description = [[]],
						childs = {
							["CalcRenderBounds"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,mdl: )",
								returns = "()",
								valuetype = ""
							},
							["GetFPS"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["GetActivity"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["SetFPS"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,fps: )",
								returns = "()",
								valuetype = ""
							},
							["SetFlags"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,flags: )",
								returns = "()",
								valuetype = ""
							},
							["AddFlags"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,flags: )",
								returns = "()",
								valuetype = ""
							},
							["RemoveFlags"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,flags: )",
								returns = "()",
								valuetype = ""
							},
							["AddEvent"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,frameId: ,eventId: ,args: )",
								returns = "()",
								valuetype = ""
							},
							["GetEvents"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["GetEventCount"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["GetFadeInTime"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["Save"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,assetData: root.udm.AssetData)",
								returns = "()",
								valuetype = ""
							},
							["GetBlendController"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["GetRenderBounds"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,)",
								returns = "()",
								valuetype = ""
							},
							["SetFadeOutTime"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,t: )",
								returns = "()",
								valuetype = ""
							},
							["Reverse"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["SetBoneWeight"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,boneId: ,t: )",
								returns = "()",
								valuetype = ""
							},
							["GetActivityName"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["RemoveEvent"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,frameId: ,idx: )",
								returns = "()",
								valuetype = ""
							},
							["AddBoneId"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,boneId: )",
								returns = "()",
								valuetype = ""
							},
							["SetEventData"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,frameId: ,idx: ,type: ,oArgs: )",
								returns = "()",
								valuetype = ""
							},
							["SetEventType"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,frameId: ,idx: ,type: )",
								returns = "()",
								valuetype = ""
							},
							["SetEventArgs"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,frameId: ,idx: ,oArgs: )",
								returns = "()",
								valuetype = ""
							},
							["ClearFrames"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["SetBoneList"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,o: )",
								returns = "()",
								valuetype = ""
							},
							["GetFrames"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["SaveLegacy"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,f: root.file.File)",
								returns = "()",
								valuetype = ""
							},
							["GetBoneWeight"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,boneId: )",
								returns = "()",
								valuetype = ""
							},
							["Scale"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,scale: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["AddFrame"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,frame: root.game.Model.Animation.Frame)",
								returns = "()",
								valuetype = ""
							},
							["GetBoneWeights"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,skeleton: root.game.Model.Skeleton,t: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["GetDuration"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["GetFrameCount"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["GetFrame"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,ID: )",
								returns = "()",
								valuetype = ""
							},
							["GetBoneCount"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["LookupBone"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,boneId: )",
								returns = "()",
								valuetype = ""
							},
							["GetBoneList"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["GetFlags"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["GetActivityWeight"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["SetFadeInTime"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,t: )",
								returns = "()",
								valuetype = ""
							},
							["GetFadeOutTime"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation)",
								returns = "()",
								valuetype = ""
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,skeleton: root.game.Model.Skeleton,rot: root.math.QuaternionInternal)",
								returns = "()",
								valuetype = ""
							},
							["SetActivityWeight"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,weight: )",
								returns = "()",
								valuetype = ""
							},
							["SetActivity"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,act: )",
								returns = "()",
								valuetype = ""
							},
							["GetBoneId"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.game.Model.Animation,idx: )",
								returns = "()",
								valuetype = ""
							},
							["FLAG_MOVEZ"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_AUTOPLAY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_GESTURE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_LOOP"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_MOVEX"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_NOREPEAT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["Frame"] = {
								type = "class",
								description = [[]],
								childs = {
									["Translate"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,anim: root.game.Model.Animation,skeleton: root.game.Model.Skeleton,t: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["GetMoveTranslation"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["Scale"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,scale: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["Copy"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["GetBoneCount"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["GetBoneMatrix"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneID: )",
										returns = "()",
										valuetype = ""
									},
									["GetFlexControllerIds"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["GetBoneTransform"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneID: )",
										returns = "()",
										valuetype = ""
									},
									["GetBoneRotation"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneID: )",
										returns = "()",
										valuetype = ""
									},
									["SetMoveTranslationX"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,x: )",
										returns = "()",
										valuetype = ""
									},
									["SetBoneTransform"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneID: ,pos: root.vector.Vector,rot: root.math.QuaternionInternal)",
										returns = "()",
										valuetype = ""
									},
									["SetBonePosition"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneID: ,pos: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["SetBoneRotation"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneID: ,rot: root.math.QuaternionInternal)",
										returns = "()",
										valuetype = ""
									},
									["Localize"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,skeleton: root.game.Model.Skeleton)",
										returns = "()",
										valuetype = ""
									},
									["Globalize"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,skeleton: root.game.Model.Skeleton)",
										returns = "()",
										valuetype = ""
									},
									["CalcRenderBounds"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,anim: root.game.Model.Animation,mdl: )",
										returns = "()",
										valuetype = ""
									},
									["SetBoneScale"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneId: ,scale: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["GetMoveTranslationX"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["GetMoveTranslationZ"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["GetFlexControllerWeights"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["SetMoveTranslation"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,x: ,z: )",
										returns = "()",
										valuetype = ""
									},
									["SetFlexControllerWeights"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,object: )",
										returns = "()",
										valuetype = ""
									},
									["SetMoveTranslationZ"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,z: )",
										returns = "()",
										valuetype = ""
									},
									["Rotate"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,anim: root.game.Model.Animation,skeleton: root.game.Model.Skeleton,rot: root.math.QuaternionInternal)",
										returns = "()",
										valuetype = ""
									},
									["GetLocalBoneTransform"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,skeleton: root.game.Model.Skeleton,boneId: )",
										returns = "()",
										valuetype = ""
									},
									["SetBoneCount"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneCount: )",
										returns = "()",
										valuetype = ""
									},
									["SetBonePose"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneId: ,pose: root.phys.Transform)",
										returns = "()",
										valuetype = ""
									},
									["GetBonePose"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneId: )",
										returns = "()",
										valuetype = ""
									},
									["GetBoneScale"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.game.Model.Animation.Frame,boneId: )",
										returns = "()",
										valuetype = ""
									}
								}
							},

						}
					},

				}
			},
			["Material"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetAlphaCutoff"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["SetShader"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material,shader: )",
						returns = "()",
						valuetype = ""
					},
					["GetSpriteSheetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["IsError"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["GetShaderName"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["IsLoaded"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["GetDataBlock"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material,fname: )",
						returns = "()",
						valuetype = ""
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["IsTranslucent"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["UpdateTextures"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["ClearSpriteSheetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["GetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["GetTextureInfo"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material,textureID: )",
						returns = "()",
						valuetype = ""
					},
					["SetTexture"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material,textureID: ,hTex: root.prosper.Texture,name: )",
						returns = "()",
						valuetype = ""
					},
					["InitializeShaderDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_TRANSLUCENT_BASE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_TRANSLUCENT_DETAIL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_BASE_MASK_VIA_DETAIL_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_ADDITIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_MULTIPLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_BLEND_FACTOR_FADE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_INVALID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_SELF_SHADOWED_BUMPMAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_DECAL_MODULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_SSBUMP_ALBEDO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_TWO_PATTERN_DECAL_MODULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_UNLIT_ADDITIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_UNLIT_ADDITIVE_THRESHOLD_FADE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_OPAQUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_BLEND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_MASK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SpriteSheetAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetSequenceCount"] = {
								type = "method",
								description = [[]],
								args = "(spriteSheetAnim: root.game.Material.SpriteSheetAnimation)",
								returns = "()",
								valuetype = ""
							},
							["GetSequence"] = {
								type = "method",
								description = [[]],
								args = "(spriteSheetAnim: root.game.Material.SpriteSheetAnimation,seqIdx: )",
								returns = "()",
								valuetype = ""
							},
							["GetSequences"] = {
								type = "method",
								description = [[]],
								args = "(spriteSheetAnim: root.game.Material.SpriteSheetAnimation)",
								returns = "()",
								valuetype = ""
							},
							["Sequence"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetInterpolatedFrameData"] = {
										type = "method",
										description = [[]],
										args = "(sequence: root.game.Material.SpriteSheetAnimation.Sequence,ptTime: )",
										returns = "()",
										valuetype = ""
									},
									["GetDuration"] = {
										type = "method",
										description = [[]],
										args = "(seq: root.game.Material.SpriteSheetAnimation.Sequence)",
										returns = "()",
										valuetype = ""
									},
									["GetFrameCount"] = {
										type = "method",
										description = [[]],
										args = "(sequence: root.game.Material.SpriteSheetAnimation.Sequence)",
										returns = "()",
										valuetype = ""
									},
									["GetFrameOffset"] = {
										type = "method",
										description = [[]],
										args = "(seq: root.game.Material.SpriteSheetAnimation.Sequence)",
										returns = "()",
										valuetype = ""
									},
									["GetFrame"] = {
										type = "method",
										description = [[]],
										args = "(sequence: root.game.Material.SpriteSheetAnimation.Sequence,frameIdx: )",
										returns = "()",
										valuetype = ""
									},
									["GetFrames"] = {
										type = "method",
										description = [[]],
										args = "(sequence: root.game.Material.SpriteSheetAnimation.Sequence)",
										returns = "()",
										valuetype = ""
									},
									["IsLooping"] = {
										type = "method",
										description = [[]],
										args = "(sequence: root.game.Material.SpriteSheetAnimation.Sequence)",
										returns = "()",
										valuetype = ""
									},
									["Frame"] = {
										type = "class",
										description = [[]],
										childs = {
											["GetDuration"] = {
												type = "method",
												description = [[]],
												args = "(frame: root.game.Material.SpriteSheetAnimation.Sequence.Frame)",
												returns = "()",
												valuetype = ""
											},
											["GetUVBounds"] = {
												type = "method",
												description = [[]],
												args = "(frame: root.game.Material.SpriteSheetAnimation.Sequence.Frame)",
												returns = "()",
												valuetype = ""
											}
										}
									},

								}
							},

						}
					},

				}
			},
			["GibletCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["PHYS_SHAPE_BOX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_CYLINDER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_SPHERE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_MODEL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["model"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["skin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["scale"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mass"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["lifetime"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["rotation"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["velocity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["angularVelocity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physTranslationOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physRotationOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physShape"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DamageInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetDamage"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,dmg: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetInflictor"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["ScaleDamage"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,scale: )",
						returns = "()",
						valuetype = ""
					},
					["GetAttacker"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetSource"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,source: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetDamage"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetAttacker"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,hAttacker: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetInflictor"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,hInflictor: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["GetDamageTypes"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetDamageType"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,type: )",
						returns = "()",
						valuetype = ""
					},
					["AddDamageType"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,type: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveDamageType"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,type: )",
						returns = "()",
						valuetype = ""
					},
					["IsDamageType"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetSource"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetForce"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetHitPosition"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,hitPos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetHitPosition"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetForce"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,force: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetHitGroup"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetHitGroup"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,hitGroup: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["AddDamage"] = {
						type = "method",
						description = [[]],
						args = "(info: root.game.DamageInfo,dmg: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RenderPassStats"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(renderStats: root.game.RenderPassStats)",
						returns = "(root.game.RenderPassStats)",
						valuetype = "RenderPassStats"
					},
					["GetCount"] = {
						type = "method",
						description = [[]],
						args = "(renderStats: root.game.RenderPassStats,counter: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.game.RenderPassStats,1: root.game.RenderPassStats)",
						returns = "()",
						valuetype = ""
					},
					["GetTime"] = {
						type = "method",
						description = [[]],
						args = "(renderStats: root.game.RenderPassStats,timer: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["TIMER_CPU_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_CPU_END"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_CPU_EXECUTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_CPU_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_ENTITY_BUFFER_UPDATES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_ENTITY_STATE_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCED_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCED_SKIPPED_RENDER_ITEMS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCE_SETS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCE_SET_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_END"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_EXECUTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAWN_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAWN_TRIANGLES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAWN_VERTICES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAW_CALLS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_ENTITIES_WITHOUT_INSTANCING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_SHADER_STATE_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_MATERIAL_STATE_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_ENTITY_BIND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_DRAW_CALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_RENDER_THREAD_WAIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_MATERIAL_BIND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_SHADER_BIND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["WorldEnvironment"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,ambientColor: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["SetFogColor"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["GetFogColor"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["IsFogEnabled"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["SetFogEnabled"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetFogDensity"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,density: )",
						returns = "()",
						valuetype = ""
					},
					["GetFogDensity"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["GetFogEnabledProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["SetFogType"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetFogTypeProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["GetFogMaxDensityProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["GetFogEndProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["SetShaderQuality"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,shaderQuality: )",
						returns = "()",
						valuetype = ""
					},
					["GetFogStartProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["GetFogColorProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["GetShadowResolution"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["GetShadowResolutionProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["GetUnlitProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["GetShaderQualityProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["GetFogEnd"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["GetAmbientColorProperty"] = {
						type = "method",
						description = [[]],
						args = "(pEnv: )",
						returns = "()",
						valuetype = ""
					},
					["GetFogFarDistance"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["GetFogType"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["GetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["GetShaderQuality"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["IsUnlit"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["SetFogStart"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,start: )",
						returns = "()",
						valuetype = ""
					},
					["SetUnlit"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,bUnlit: )",
						returns = "()",
						valuetype = ""
					},
					["SetShadowResolution"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,shadowResolution: )",
						returns = "()",
						valuetype = ""
					},
					["SetFogEnd"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment,end: )",
						returns = "()",
						valuetype = ""
					},
					["GetFogStart"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: root.game.WorldEnvironment)",
						returns = "()",
						valuetype = ""
					},
					["FOG_TYPE_LINEAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOG_TYPE_EXPONENTIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOG_TYPE_EXPONENTIAL2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderStats"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(renderStats: root.game.RenderStats)",
						returns = "(root.game.RenderStats)",
						valuetype = "RenderStats"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.game.RenderStats,1: root.game.RenderStats)",
						returns = "()",
						valuetype = ""
					},
					["GetTime"] = {
						type = "method",
						description = [[]],
						args = "(renderStats: root.game.RenderStats,timer: )",
						returns = "()",
						valuetype = ""
					},
					["GetPassStats"] = {
						type = "method",
						description = [[]],
						args = "(renderStats: root.game.RenderStats,pass: )",
						returns = "(root.game.RenderPassStats)",
						valuetype = "RenderPassStats"
					},
					["TIMER_POST_PROCESSING_GPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_TONE_MAPPING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_BLOOM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_FOG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_FXAA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_SSAO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_LIGHTING_PASS_TRANSLUCENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_UPDATE_RENDER_BUFFERS_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_PREPASS_EXECUTION_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_EXECUTION_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_LIGHTING_PASS_EXECUTION_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_LIGHT_CULLING_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_LIGHT_CULLING_GPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_SHADOW_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DrawSceneInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetEntityRenderFilter"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: root.game.DrawSceneInfo,f: )",
						returns = "()",
						valuetype = ""
					},
					["SetEntityPrepassFilter"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: root.game.DrawSceneInfo,f: )",
						returns = "()",
						valuetype = ""
					},
					["FLAG_DISABLE_RENDER_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_FLIP_VERTICALLY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["toneMapping"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["outputImage"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["commandBuffer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["outputLayerId"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["renderStats"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["renderTarget"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["clearColor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["renderFlags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["scene"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseRenderProcessor"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(processor: root.game.BaseRenderProcessor,d: ,delta: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RenderQueue"] = {
				type = "class",
				description = [[]],
				childs = {
					["WaitForCompletion"] = {
						type = "method",
						description = [[]],
						args = "(renderQueue: root.game.RenderQueue)",
						returns = "()",
						valuetype = ""
					},
					["IsComplete"] = {
						type = "method",
						description = [[]],
						args = "(renderQueue: root.game.RenderQueue)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DepthStageRenderProcessor"] = {
				type = "class",
				inherits = "game.BaseRenderProcessor",
				description = [[]],
				childs = {
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(processor: root.game.DepthStageRenderProcessor,renderQueue: root.game.RenderQueue)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["LightingStageRenderProcessor"] = {
				type = "class",
				inherits = "game.BaseRenderProcessor",
				description = [[]],
				childs = {
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(processor: root.game.LightingStageRenderProcessor,renderQueue: root.game.RenderQueue)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["sound"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Source"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetAirAbsorptionFactor"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,airAbsorption: )",
						returns = "()",
						valuetype = ""
					},
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxGain"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetState"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,start: ,end: )",
						returns = "()",
						valuetype = ""
					},
					["SetDirectFilter"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,gain: )",
						returns = "()",
						valuetype = ""
					},
					["GetRange"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetOrientation"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,at: root.vector.Vector,up: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetGainAuto"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["CallOnStateChanged"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,o: )",
						returns = "()",
						valuetype = ""
					},
					["ClearRange"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetAirAbsorptionFactor"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetDopplerFactor"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,factor: )",
						returns = "()",
						valuetype = ""
					},
					["GetDopplerFactor"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetMinGain"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,gain: )",
						returns = "()",
						valuetype = ""
					},
					["SetEffectGain"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,name: ,gain: )",
						returns = "()",
						valuetype = ""
					},
					["SetLeftStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,ang: )",
						returns = "()",
						valuetype = ""
					},
					["GetLeftStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetInnerConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetRightStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,ang: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetRoomRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,rolloff: )",
						returns = "()",
						valuetype = ""
					},
					["GetPriority"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetReferenceDistance"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetOuterConeGains"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,gain: ,gainHF: )",
						returns = "()",
						valuetype = ""
					},
					["SetLooping"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,loop: )",
						returns = "()",
						valuetype = ""
					},
					["GetDirectFilter"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxDistance"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetOuterConeGainHF"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,gain: )",
						returns = "()",
						valuetype = ""
					},
					["SetConeAngles"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,inner: ,outer: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxGain"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,gain: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxDistance"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,dist: )",
						returns = "()",
						valuetype = ""
					},
					["GetSendGainAuto"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetGainRange"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["IsStopped"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["Rewind"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetOuterConeGainHF"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetGain"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetOuterConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,ang: )",
						returns = "()",
						valuetype = ""
					},
					["SetOffset"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,offset: )",
						returns = "()",
						valuetype = ""
					},
					["SetDirection"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,dir: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetOffset"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetRelative"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetRoomRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetPriority"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,char: )",
						returns = "()",
						valuetype = ""
					},
					["SetGainAuto"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,directHF: ,send: ,sendHF: )",
						returns = "()",
						valuetype = ""
					},
					["IsRelative"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,sec: )",
						returns = "()",
						valuetype = ""
					},
					["GetMinGain"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,rolloff: )",
						returns = "()",
						valuetype = ""
					},
					["GetOuterConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetOuterConeGain"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetOuterConeGain"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,gain: )",
						returns = "()",
						valuetype = ""
					},
					["AddType"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,type: )",
						returns = "()",
						valuetype = ""
					},
					["SetGain"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,gain: )",
						returns = "()",
						valuetype = ""
					},
					["FadeIn"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,time: )",
						returns = "()",
						valuetype = ""
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["Play"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxAudibleDistance"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetInnerConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,ang: )",
						returns = "()",
						valuetype = ""
					},
					["GetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetReferenceDistance"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,dist: )",
						returns = "()",
						valuetype = ""
					},
					["GetRightStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["Pause"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["AddEffect"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,name: ,gain: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveEffect"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetEffectParameters"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,name: ,gain: )",
						returns = "()",
						valuetype = ""
					},
					["SetGainRange"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,minGain: ,maxGain: )",
						returns = "()",
						valuetype = ""
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetDistanceRange"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,refDist: ,maxDist: )",
						returns = "()",
						valuetype = ""
					},
					["GetDistanceRange"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,pitch: )",
						returns = "()",
						valuetype = ""
					},
					["GetConeAngles"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetDirection"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetOuterConeGains"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetStereoAngles"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,leftAng: ,rightAng: )",
						returns = "()",
						valuetype = ""
					},
					["GetStereoAngles"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetOrientation"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetDirectGainHFAuto"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetSendGainHFAuto"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetRolloffFactors"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetRolloffFactors"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,factor: ,roomFactor: )",
						returns = "()",
						valuetype = ""
					},
					["GetFadeOutDuration"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetFadeInDuration"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetFadeOutDuration"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,t: )",
						returns = "()",
						valuetype = ""
					},
					["SetSource"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetSource"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetFadeInDuration"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,t: )",
						returns = "()",
						valuetype = ""
					},
					["IsPlaying"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetRangeOffsets"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["IsLooping"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["IsPaused"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["FadeOut"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,time: )",
						returns = "()",
						valuetype = ""
					},
					["GetIntensity"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source,origin: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["HasRange"] = {
						type = "method",
						description = [[]],
						args = "(snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["GetPhonemeData"] = {
						type = "method",
						description = [[]],
						args = "(buffer: root.sound.Source)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Effect"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetProperties"] = {
						type = "method",
						description = [[]],
						args = "(effect: root.sound.Effect,props: root.sound.Effect.EqualizerProperties)",
						returns = "()",
						valuetype = ""
					},
					["AutoWahProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["attackTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["releaseTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["resonance"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["peakGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["DistortionProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["eqBandwidth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["edge"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lowpassCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["eqCenter"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["VocalMorpherProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["phonemeA"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeACoarseTuning"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeB"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeBCoarseTuning"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["EqualizerProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["mid2Center"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lowCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid2Width"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid1Gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["highGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid1Width"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["highCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lowGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid1Center"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid2Gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["RingModulatorProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["highpassCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["frequency"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["EchoProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["lrDelay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["feedback"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["damping"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["spread"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["delay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["ChorusProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["depth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["feedback"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["delay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phase"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["FrequencyShifterProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["rightDirection"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["leftDirection"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["frequency"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["FlangerProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["depth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["feedback"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["delay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phase"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["CompressorProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["onOff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["ReverbProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["gainHF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lateReverbDelay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["reflectionsPan"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gainLF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["reflectionsDelay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayHFRatio"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["reflectionsGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayLFRatio"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lateReverbGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lateReverbPan"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["echoTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["echoDepth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["modulationTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["modulationDepth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["diffusion"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["airAbsorptionGainHF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["hfReference"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lfReference"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["roomRolloffFactor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayHFLimit"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["density"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["PitchShifterProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["fineTune"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["coarseTune"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},

		}
	},
	["animation"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Animation2"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetChannelCount"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.animation.Animation2)",
						returns = "()",
						valuetype = ""
					},
					["FindChannel"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.animation.Animation2,path: root.util.Path)",
						returns = "()",
						valuetype = ""
					},
					["GetAnimationSpeedFactor"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.animation.Animation2)",
						returns = "()",
						valuetype = ""
					},
					["SetDuration"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.animation.Animation2,duration: )",
						returns = "()",
						valuetype = ""
					},
					["AddChannel"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.animation.Animation2,path: ,valueType: )",
						returns = "()",
						valuetype = ""
					},
					["GetChannels"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.animation.Animation2)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.animation.Animation2)",
						returns = "()",
						valuetype = ""
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.animation.Animation2)",
						returns = "()",
						valuetype = ""
					},
					["SetAnimationSpeedFactor"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.animation.Animation2,factor: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Slice"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetChannelProperty"] = {
						type = "method",
						description = [[]],
						args = "(slice: root.animation.Slice,idx: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.animation.Slice)",
						returns = "()",
						valuetype = ""
					},
					["GetChannelValueCount"] = {
						type = "method",
						description = [[]],
						args = "(slice: root.animation.Slice)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Manager"] = {
				type = "class",
				description = [[]],
				childs = {
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(manager: root.animation.Manager,anim: )",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentAnimationId"] = {
						type = "method",
						description = [[]],
						args = "(manager: root.animation.Manager)",
						returns = "()",
						valuetype = ""
					},
					["GetPreviousSlice"] = {
						type = "method",
						description = [[]],
						args = "(manager: root.animation.Manager)",
						returns = "(root.animation.Slice)",
						valuetype = "Slice"
					},
					["GetCurrentAnimation"] = {
						type = "method",
						description = [[]],
						args = "(manager: root.animation.Manager)",
						returns = "()",
						valuetype = ""
					},
					["GetPlayer"] = {
						type = "method",
						description = [[]],
						args = "(manager: root.animation.Manager)",
						returns = "(root.animation.Player)",
						valuetype = "Player"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.animation.Manager)",
						returns = "()",
						valuetype = ""
					},
					["StopAnimation"] = {
						type = "method",
						description = [[]],
						args = "(manager: root.animation.Manager)",
						returns = "()",
						valuetype = ""
					},
					["GetModel"] = {
						type = "method",
						description = [[]],
						args = "(manager: root.animation.Manager)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Pose"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.animation.Pose)",
						returns = "()",
						valuetype = ""
					},
					["SetBoneIndex"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.animation.Pose,idx: ,boneIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneTranslationTable"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.animation.Pose)",
						returns = "()",
						valuetype = ""
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.animation.Pose,other: root.animation.Pose,f: )",
						returns = "()",
						valuetype = ""
					},
					["GetTransform"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.animation.Pose,boneIdx: )",
						returns = "(root.phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["SetTransform"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.animation.Pose,boneIdx: ,transform: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["SetTransformCount"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.animation.Pose,count: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.animation.Pose)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Localize"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.animation.Pose,skeleton: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					},
					["Globalize"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.animation.Pose,skeleton: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Channel"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetValueType"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetInterpolation"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.animation.Channel)",
						returns = "()",
						valuetype = ""
					},
					["SetInterpolation"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel,interp: )",
						returns = "()",
						valuetype = ""
					},
					["GetTargetPath"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel)",
						returns = "(root.util.Path)",
						valuetype = "Path"
					},
					["GetValueArray"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel)",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["SetTargetPath"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel,path: )",
						returns = "()",
						valuetype = ""
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel)",
						returns = "()",
						valuetype = ""
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel,prop: root.udm.LinkedPropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel,prop: root.udm.LinkedPropertyWrapper)",
						returns = "()",
						valuetype = ""
					},
					["GetTimesArray"] = {
						type = "method",
						description = [[]],
						args = "(channel: root.animation.Channel)",
						returns = "(root.udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					}
				}
			},
			["Player"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player,playbackRate: )",
						returns = "()",
						valuetype = ""
					},
					["GetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player)",
						returns = "()",
						valuetype = ""
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.animation.Player)",
						returns = "()",
						valuetype = ""
					},
					["SetLooping"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player,looping: )",
						returns = "()",
						valuetype = ""
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player)",
						returns = "()",
						valuetype = ""
					},
					["Advance"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player,dt: )",
						returns = "()",
						valuetype = ""
					},
					["GetRemainingDuration"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player)",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentTimeFraction"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player)",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentTime"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player)",
						returns = "()",
						valuetype = ""
					},
					["SetCurrentTime"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player,time: ,force: )",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentSlice"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player)",
						returns = "(root.animation.Slice)",
						valuetype = "Slice"
					},
					["IsLooping"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player)",
						returns = "()",
						valuetype = ""
					},
					["SetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(player: root.animation.Player,anim: root.animation.Animation2)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["light"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_color_temperature"] = {
				type = "function",
				description = [[]],
				args = "(arg0: ,arg1: ,arg2: )",
				returns = "()",
				valuetype = ""
			},
			["get_average_color_temperature"] = {
				type = "function",
				description = [[]],
				args = "(type: )",
				returns = "()",
				valuetype = ""
			},
			["color_temperature_to_color"] = {
				type = "function",
				description = [[]],
				args = "(temperature: )",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["wavelength_to_color"] = {
				type = "function",
				description = [[]],
				args = "(wavelength: )",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["lux_to_irradiance"] = {
				type = "function",
				description = [[]],
				args = "(lux: )",
				returns = "()",
				valuetype = ""
			},
			["get_luminous_efficacy"] = {
				type = "function",
				description = [[]],
				args = "(type: )",
				returns = "()",
				valuetype = ""
			},
			["watts_to_lumens"] = {
				type = "function",
				description = [[]],
				args = "(watt: )",
				returns = "()",
				valuetype = ""
			},
			["irradiance_to_lux"] = {
				type = "function",
				description = [[]],
				args = "(irradiance: )",
				returns = "()",
				valuetype = ""
			},
			["lumens_to_watts"] = {
				type = "function",
				description = [[]],
				args = "(lumen: )",
				returns = "()",
				valuetype = ""
			},
			["convert_light_intensity"] = {
				type = "function",
				description = [[]],
				args = "(intensity: ,srcType: ,dstType: )",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["math"] = {
		type = "lib",
		description = [[]],
		childs = {
			["approach"] = {
				type = "function",
				description = [[]],
				args = "(val: ,tgt: ,inc: )",
				returns = "()",
				valuetype = ""
			},
			["approach_angle"] = {
				type = "function",
				description = [[]],
				args = "(angA: ,angB: ,amount: )",
				returns = "()",
				valuetype = ""
			},
			["is_in_range"] = {
				type = "function",
				description = [[]],
				args = "(v: ,min: ,max: )",
				returns = "()",
				valuetype = ""
			},
			["get_angle_difference"] = {
				type = "function",
				description = [[]],
				args = "(angA: ,angB: )",
				returns = "()",
				valuetype = ""
			},
			["is_angle_in_range"] = {
				type = "function",
				description = [[]],
				args = "(ang: ,min: ,max: )",
				returns = "()",
				valuetype = ""
			},
			["get_next_power_of_2"] = {
				type = "function",
				description = [[]],
				args = "(v: )",
				returns = "()",
				valuetype = ""
			},
			["ease_out"] = {
				type = "function",
				description = [[]],
				args = "(t: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["normalize_angle"] = {
				type = "function",
				description = [[]],
				args = "(angle: ,base: )",
				returns = "()",
				valuetype = ""
			},
			["calc_ballistic_angle_of_reach"] = {
				type = "function",
				description = [[]],
				args = "(val: ,tgt: ,inc: )",
				returns = "()",
				valuetype = ""
			},
			["clamp"] = {
				type = "function",
				description = [[]],
				args = "(val: ,min: ,max: )",
				returns = "()",
				valuetype = ""
			},
			["clamp_angle"] = {
				type = "function",
				description = [[]],
				args = "(ang: ,min: ,max: )",
				returns = "()",
				valuetype = ""
			},
			["get_previous_power_of_2"] = {
				type = "function",
				description = [[]],
				args = "(v: )",
				returns = "()",
				valuetype = ""
			},
			["smooth_step"] = {
				type = "function",
				description = [[]],
				args = "(edge0: ,edge1: ,x: )",
				returns = "()",
				valuetype = ""
			},
			["half_float_to_float"] = {
				type = "function",
				description = [[]],
				args = "(v: )",
				returns = "()",
				valuetype = ""
			},
			["smoother_step"] = {
				type = "function",
				description = [[]],
				args = "(edge0: ,edge1: ,x: )",
				returns = "()",
				valuetype = ""
			},
			["calc_ballistic_time_of_flight"] = {
				type = "function",
				description = [[]],
				args = "(start: root.vector.Vector,end: root.vector.Vector,vel: root.vector.Vector,gravity: )",
				returns = "()",
				valuetype = ""
			},
			["calc_ballistic_range"] = {
				type = "function",
				description = [[]],
				args = "(speed: ,gravity: ,initialHeight: )",
				returns = "()",
				valuetype = ""
			},
			["calc_ballistic_position"] = {
				type = "function",
				description = [[]],
				args = "(start: root.vector.Vector,vel: root.vector.Vector,gravity: ,t: )",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["calc_ballistic_velocity"] = {
				type = "function",
				description = [[]],
				args = "(l: ,start: root.vector.Vector,end: root.vector.Vector,angle: ,gravity: )",
				returns = "()",
				valuetype = ""
			},
			["get_frustum_plane_center"] = {
				type = "function",
				description = [[]],
				args = "(pos: root.vector.Vector,forward: root.vector.Vector,z: )",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["calc_average_rotation"] = {
				type = "function",
				description = [[]],
				args = "(l: ,t: )",
				returns = "(root.math.QuaternionInternal)",
				valuetype = "QuaternionInternal"
			},
			["round"] = {
				type = "function",
				description = [[]],
				args = "(f: )",
				returns = "()",
				valuetype = ""
			},
			["map_value_to_fraction"] = {
				type = "function",
				description = [[]],
				args = "(l: ,v: ,c: ,i: )",
				returns = "()",
				valuetype = ""
			},
			["randomf"] = {
				type = "function",
				description = [[]],
				args = "(min: ,max: )",
				returns = "()",
				valuetype = ""
			},
			["calc_fov_from_focal_length"] = {
				type = "function",
				description = [[]],
				args = "(focalLength: ,sensorSize: )",
				returns = "()",
				valuetype = ""
			},
			["float_to_half_float"] = {
				type = "function",
				description = [[]],
				args = "(f: )",
				returns = "()",
				valuetype = ""
			},
			["map_value_to_range"] = {
				type = "function",
				description = [[]],
				args = "(l: ,value: ,lower: ,upper: )",
				returns = "()",
				valuetype = ""
			},
			["sign"] = {
				type = "function",
				description = [[]],
				args = "(n: )",
				returns = "()",
				valuetype = ""
			},
			["ease_in_out"] = {
				type = "function",
				description = [[]],
				args = "(t: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["perlin_noise"] = {
				type = "function",
				description = [[]],
				args = "(v: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["horizontal_fov_to_vertical_fov"] = {
				type = "function",
				description = [[]],
				args = "(fovDeg: ,widthOrAspectRatio: )",
				returns = "()",
				valuetype = ""
			},
			["lerp"] = {
				type = "function",
				description = [[]],
				args = "(a: ,b: ,f: )",
				returns = "()",
				valuetype = ""
			},
			["snap_to_grid"] = {
				type = "function",
				description = [[]],
				args = "(f: ,gridSize: )",
				returns = "()",
				valuetype = ""
			},
			["calc_hermite_spline"] = {
				type = "function",
				description = [[]],
				args = "(l: ,p0: root.vector.Vector,p1: root.vector.Vector,p2: root.vector.Vector,p3: root.vector.Vector,segmentCount: ,curvature: )",
				returns = "()",
				valuetype = ""
			},
			["calc_hermite_spline_position"] = {
				type = "function",
				description = [[]],
				args = "(l: ,p0: root.vector.Vector,p1: root.vector.Vector,p2: root.vector.Vector,p3: root.vector.Vector,s: ,curvature: )",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["calc_vertical_fov"] = {
				type = "function",
				description = [[]],
				args = "(focalLengthInMM: ,width: ,height: )",
				returns = "()",
				valuetype = ""
			},
			["solve_ballistic_arc"] = {
				type = "function",
				description = [[]],
				args = "(l: ,projPos: root.vector.Vector,projSpeed: ,tgt: root.vector.Vector,gravity: )",
				returns = "()",
				valuetype = ""
			},
			["solve_ballistic_arc_lateral"] = {
				type = "function",
				description = [[]],
				args = "(l: ,projPos: root.vector.Vector,lateralSpeed: ,tgt: root.vector.Vector,maxHeight: )",
				returns = "()",
				valuetype = ""
			},
			["normalize_uv_coordinates"] = {
				type = "function",
				description = [[]],
				args = "(uv: root.math.Vector2)",
				returns = "()",
				valuetype = ""
			},
			["is_nan"] = {
				type = "function",
				description = [[]],
				args = "(val: )",
				returns = "()",
				valuetype = ""
			},
			["is_inf"] = {
				type = "function",
				description = [[]],
				args = "(val: )",
				returns = "()",
				valuetype = ""
			},
			["is_finite"] = {
				type = "function",
				description = [[]],
				args = "(val: )",
				returns = "()",
				valuetype = ""
			},
			["Quaternion"] = {
				type = "function",
				description = [[]],
				args = "(forward: root.vector.Vector,up: root.vector.Vector)",
				returns = "(root.math.QuaternionInternal)",
				valuetype = "QuaternionInternal"
			},
			["cot"] = {
				type = "function",
				description = [[]],
				args = "(x: )",
				returns = "()",
				valuetype = ""
			},
			["diagonal_fov_to_vertical_fov"] = {
				type = "function",
				description = [[]],
				args = "(diagonalFov: ,aspectRatio: )",
				returns = "()",
				valuetype = ""
			},
			["calc_fov_from_lens"] = {
				type = "function",
				description = [[]],
				args = "(sensorSize: ,focalLength: ,aspectRatio: )",
				returns = "()",
				valuetype = ""
			},
			["get_frustum_plane_point"] = {
				type = "function",
				description = [[]],
				args = "(l: ,pos: root.vector.Vector,forward: root.vector.Vector,right: root.vector.Vector,up: root.vector.Vector,fovRad: ,aspectRatio: ,uv: root.math.Vector2,z: )",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["calc_focal_length_from_fov"] = {
				type = "function",
				description = [[]],
				args = "(hfov: ,sensorSize: )",
				returns = "()",
				valuetype = ""
			},
			["calc_aperture_size_from_fstop"] = {
				type = "function",
				description = [[]],
				args = "(fstop: ,focalLength: )",
				returns = "()",
				valuetype = ""
			},
			["set_flag"] = {
				type = "function",
				description = [[]],
				args = "(flags: ,flag: ,set: )",
				returns = "()",
				valuetype = ""
			},
			["calc_dielectric_specular_reflection"] = {
				type = "function",
				description = [[]],
				args = "(ior: )",
				returns = "()",
				valuetype = ""
			},
			["ease_in"] = {
				type = "function",
				description = [[]],
				args = "(t: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["get_frustum_plane_size"] = {
				type = "function",
				description = [[]],
				args = "(l: ,fovRad: ,aspectRatio: ,z: )",
				returns = "()",
				valuetype = ""
			},
			["get_frustum_plane_boundaries"] = {
				type = "function",
				description = [[]],
				args = "(l: ,pos: root.vector.Vector,forward: root.vector.Vector,up: root.vector.Vector,fovRad: ,aspectRatio: ,z: )",
				returns = "()",
				valuetype = ""
			},
			["vertical_fov_to_horizontal_fov"] = {
				type = "function",
				description = [[]],
				args = "(fovDeg: ,widthOrAspectRatio: )",
				returns = "()",
				valuetype = ""
			},
			["calc_horizontal_fov"] = {
				type = "function",
				description = [[]],
				args = "(focalLengthInMM: ,width: ,height: )",
				returns = "()",
				valuetype = ""
			},
			["calc_diagonal_fov"] = {
				type = "function",
				description = [[]],
				args = "(focalLengthInMM: ,width: ,height: )",
				returns = "()",
				valuetype = ""
			},
			["NoiseModule"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(mod: root.math.NoiseModule,v: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(root.math.NoiseModule,float: )",
						returns = "()",
						valuetype = ""
					},
					["Curve"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Const"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Cylinders"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Abs"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Cache"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Terrace"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Perlin"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin)",
								returns = "()",
								valuetype = ""
							},
							["SetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin,lacunarity: )",
								returns = "()",
								valuetype = ""
							},
							["GetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin)",
								returns = "()",
								valuetype = ""
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin,frequency: )",
								returns = "()",
								valuetype = ""
							},
							["GetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin)",
								returns = "()",
								valuetype = ""
							},
							["GetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin)",
								returns = "()",
								valuetype = ""
							},
							["GetPersistence"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin)",
								returns = "()",
								valuetype = ""
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin)",
								returns = "()",
								valuetype = ""
							},
							["SetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin,quality: )",
								returns = "()",
								valuetype = ""
							},
							["SetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin,octaveCount: )",
								returns = "()",
								valuetype = ""
							},
							["SetPersistence"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin,persistence: )",
								returns = "()",
								valuetype = ""
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(perlin: root.math.NoiseModule.Perlin,seed: )",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["Min"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Voronoi"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["GetDisplacement"] = {
								type = "method",
								description = [[]],
								args = "(voronoi: root.math.NoiseModule.Voronoi)",
								returns = "()",
								valuetype = ""
							},
							["SetDisplacement"] = {
								type = "method",
								description = [[]],
								args = "(voronoi: root.math.NoiseModule.Voronoi,displacement: )",
								returns = "()",
								valuetype = ""
							},
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(voronoi: root.math.NoiseModule.Voronoi)",
								returns = "()",
								valuetype = ""
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(voronoi: root.math.NoiseModule.Voronoi,frequency: )",
								returns = "()",
								valuetype = ""
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(voronoi: root.math.NoiseModule.Voronoi,seed: )",
								returns = "()",
								valuetype = ""
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "(voronoi: root.math.NoiseModule.Voronoi)",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["TranslatePoint"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Invert"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["ScaleBias"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Spheres"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Select"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["ScalePoint"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["RotatePoint"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Displace"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Clamp"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["RidgedMulti"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti)",
								returns = "()",
								valuetype = ""
							},
							["SetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti,lacunarity: )",
								returns = "()",
								valuetype = ""
							},
							["GetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti)",
								returns = "()",
								valuetype = ""
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti,frequency: )",
								returns = "()",
								valuetype = ""
							},
							["GetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti)",
								returns = "()",
								valuetype = ""
							},
							["GetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti)",
								returns = "()",
								valuetype = ""
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti)",
								returns = "()",
								valuetype = ""
							},
							["SetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti,quality: )",
								returns = "()",
								valuetype = ""
							},
							["SetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti,octaveCount: )",
								returns = "()",
								valuetype = ""
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(ridged: root.math.NoiseModule.RidgedMulti,seed: )",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["Billow"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow)",
								returns = "()",
								valuetype = ""
							},
							["SetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow,lacunarity: )",
								returns = "()",
								valuetype = ""
							},
							["GetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow)",
								returns = "()",
								valuetype = ""
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow,frequency: )",
								returns = "()",
								valuetype = ""
							},
							["GetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow)",
								returns = "()",
								valuetype = ""
							},
							["GetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow)",
								returns = "()",
								valuetype = ""
							},
							["GetPersistence"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow)",
								returns = "()",
								valuetype = ""
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow)",
								returns = "()",
								valuetype = ""
							},
							["SetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow,quality: )",
								returns = "()",
								valuetype = ""
							},
							["SetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow,octaveCount: )",
								returns = "()",
								valuetype = ""
							},
							["SetPersistence"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow,persistence: )",
								returns = "()",
								valuetype = ""
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(billow: root.math.NoiseModule.Billow,seed: )",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["Turbulance"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Blend"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Checkerboard"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Exponent"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Power"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Max"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Multiply"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},

				}
			},
			["Mat2x4"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat2x4,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2x4,mat2: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x4,1: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x4,1: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x4,1: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x4,1: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector4i"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4i,1: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(v: root.math.Vector4i,idx: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4i,1: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4i,1: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vector4i)",
						valuetype = "Vector4i"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					},
					["w"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vectori"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vectori,1: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(v: root.math.Vectori,idx: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vectori,1: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vectori,1: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vectori)",
						valuetype = "Vectori"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mat2x3"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat2x3,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2x3,mat2: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x3,1: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x3,1: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x3,1: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2x3,1: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat3x2"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat3x2,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3x2,mat2: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x2,1: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x2,1: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x2,1: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x2,1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["QuaternionInternal"] = {
				type = "class",
				description = [[]],
				childs = {
					["Mul"] = {
						type = "method",
						description = [[]],
						args = "(a: root.math.QuaternionInternal,b: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.QuaternionInternal,1: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(qa: root.math.QuaternionInternal,qb: root.math.QuaternionInternal,factor: )",
						returns = "()",
						valuetype = ""
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetConjugate"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal,qb: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(q1: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Slerp"] = {
						type = "method",
						description = [[]],
						args = "(qa: root.math.QuaternionInternal,qb: root.math.QuaternionInternal,factor: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(rot: root.math.QuaternionInternal,idx: )",
						returns = "()",
						valuetype = ""
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.QuaternionInternal,1: )",
						returns = "()",
						valuetype = ""
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetOrientation"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["ToAxisAngle"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["RotateX"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "()",
						valuetype = ""
					},
					["RotateY"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "()",
						valuetype = ""
					},
					["RotateZ"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "()",
						valuetype = ""
					},
					["ApproachDirection"] = {
						type = "method",
						description = [[]],
						args = "(rot: root.math.QuaternionInternal,up: root.vector.Vector,targetDir: root.vector.Vector,rotAmount: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["ClampRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: root.math.QuaternionInternal,bounds: root.math.EulerAngles)",
						returns = "(root.math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(idx: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "(q: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["w"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mat3"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3,1: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat3,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3,mat2: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3,1: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["CalcEigenValues"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3,1: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3,1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector4"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector4,n: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vector4)",
						valuetype = "Vector4"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.vector.Vector,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(b: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector4,x: ,y: ,z: ,w: )",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(v: root.math.Vector4,idx: )",
						returns = "()",
						valuetype = ""
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector4,vecB: root.math.Vector4,factor: )",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4,1: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(a: root.math.Vector4,b: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4,1: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector4,1: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["w"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["PlanarDistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetYaw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ProjectToPlane"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ToScreenUv"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["RotateAround"] = {
						type = "method",
						description = [[]],
						args = "(,,)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Equals"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["GetAngle"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["PlanarDistance"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["Slerp"] = {
						type = "method",
						description = [[]],
						args = "(,,)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SnapToGrid"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["GetPerpendicular"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OuterProduct"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Mul"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(,,)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(,)",
						returns = "()",
						valuetype = ""
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(,,)",
						returns = "()",
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["NoiseMap"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(noiseMap: root.math.NoiseMap)",
						returns = "()",
						valuetype = ""
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(noiseMap: root.math.NoiseMap,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(noiseMap: root.math.NoiseMap)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat3x4"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat3x4,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3x4,mat2: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x4,1: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x4,1: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x4,1: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat3x4,1: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Transform"] = {
				type = "class",
				description = [[]],
				childs = {
					["UpdateMatrix"] = {
						type = "method",
						description = [[]],
						args = "(t: root.math.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(t: root.math.Transform,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.vector.Vector,arg2: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(t: root.math.Transform)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Transform)",
						returns = "()",
						valuetype = ""
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "(t: root.math.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(t: root.math.Transform,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetPosition"] = {
						type = "method",
						description = [[]],
						args = "(t: root.math.Transform)",
						returns = "()",
						valuetype = ""
					},
					["GetTransformationMatrix"] = {
						type = "method",
						description = [[]],
						args = "(t: root.math.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetPosition"] = {
						type = "method",
						description = [[]],
						args = "(t: root.math.Transform,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vector2i"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(v: root.math.Vector2i,idx: )",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2i,1: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2i,1: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vector2i)",
						valuetype = "Vector2i"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2i,1: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["PIDController"] = {
				type = "class",
				description = [[]],
				childs = {
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetDerivativeTerm"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["Calculate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["ClearRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetTerms"] = {
						type = "method",
						description = [[]],
						args = "(pidController: root.math.PIDController)",
						returns = "()",
						valuetype = ""
					},
					["SetProportionalTerm"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["SetIntegralTerm"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["GetProportionalTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetTerms"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["GetIntegralTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetDerivativeTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["GetRange"] = {
						type = "method",
						description = [[]],
						args = "(pidController: root.math.PIDController)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: ,arg4: ,arg5: )",
						returns = "()",
						valuetype = ""
					},
					["SetMin"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["SetMax"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat4"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["MulRow"] = {
						type = "method",
						description = [[]],
						args = "(m: root.math.Mat4,rowIndex: ,factor: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["MulCol"] = {
						type = "method",
						description = [[]],
						args = "(m: root.math.Mat4,colIndex: ,factor: )",
						returns = "()",
						valuetype = ""
					},
					["SwapColumns"] = {
						type = "method",
						description = [[]],
						args = "(m: root.math.Mat4,colSrc: ,colDst: )",
						returns = "()",
						valuetype = ""
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["SwapRows"] = {
						type = "method",
						description = [[]],
						args = "(m: root.math.Mat4,rowSrc: ,rowDst: )",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["ToQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4,1: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4,mat2: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4,1: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4,axis: root.vector.Vector,ang: )",
						returns = "()",
						valuetype = ""
					},
					["Decompose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["ApplyProjectionDepthBiasOffset"] = {
						type = "method",
						description = [[]],
						args = "(p: root.math.Mat4,nearZ: ,farZ: ,d: ,delta: )",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4,1: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4,1: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat4x2"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x2,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4x2,mat2: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x2,1: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x2,1: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x2,1: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x2,1: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat4x3"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4x3,mat2: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x3,1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x3,1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x3,1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat4x3,1: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Plane"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "(plane: root.math.Plane)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(plane: root.math.Plane,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetCenterPos"] = {
						type = "method",
						description = [[]],
						args = "(plane: root.math.Plane)",
						returns = "()",
						valuetype = ""
					},
					["GetDistance"] = {
						type = "method",
						description = [[]],
						args = "(plane: root.math.Plane,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(plane: root.math.Plane)",
						returns = "()",
						valuetype = ""
					},
					["Transform"] = {
						type = "method",
						description = [[]],
						args = "(plane: root.math.Plane,transform: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.vector.Vector,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["MoveToPos"] = {
						type = "method",
						description = [[]],
						args = "(plane: root.math.Plane,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "(plane: root.math.Plane)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat2"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2,1: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat2,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2,mat2: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2,1: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2,1: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Mat2,1: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["EulerAngles"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.EulerAngles,1: )",
						returns = "()",
						valuetype = ""
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetOrientation"] = {
						type = "method",
						description = [[]],
						args = "(ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["ToQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "(ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(ang: root.math.EulerAngles,idx: )",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(ang: root.math.EulerAngles,idx: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.EulerAngles,1: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["Equals"] = {
						type = "method",
						description = [[]],
						args = "(a: root.math.EulerAngles,b: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.EulerAngles,1: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.EulerAngles,1: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["p"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector2"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vector2)",
						valuetype = "Vector2"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(b: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector2,n: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(v: root.math.Vector2,idx: )",
						returns = "()",
						valuetype = ""
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "(a: root.math.Vector2,b: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(a: root.math.Vector2,b: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector2,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["RotateAround"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector2,origin: root.math.Vector2,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2,1: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector2,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vec: root.math.Vector2,vecB: root.math.Vector2,factor: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2,1: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(0: root.math.Vector2,1: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: ,1: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["input"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["asset"] = {
		type = "lib",
		description = [[]],
		childs = {
			["exists"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["delete"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["clear_unused_models"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["clear_unused_materials"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["matches"] = {
				type = "function",
				description = [[]],
				args = "(name0: ,name1: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["clear_flagged_models"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["unlock_asset_watchers"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["lock_asset_watchers"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["flag_model_for_cache_removal"] = {
				type = "function",
				description = [[]],
				args = "(l: ,mdl: root.game.Model)",
				returns = "()",
				valuetype = ""
			},
			["get_supported_import_file_extensions"] = {
				type = "function",
				description = [[]],
				args = "(l: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["get_supported_export_file_extensions"] = {
				type = "function",
				description = [[]],
				args = "(l: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["get_normalized_path"] = {
				type = "function",
				description = [[]],
				args = "(name: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["get_supported_extensions"] = {
				type = "function",
				description = [[]],
				args = "(l: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["get_legacy_extension"] = {
				type = "function",
				description = [[]],
				args = "(l: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["get_asset_root_directory"] = {
				type = "function",
				description = [[]],
				args = "(l: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["get_binary_udm_extension"] = {
				type = "function",
				description = [[]],
				args = "(l: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["get_ascii_udm_extension"] = {
				type = "function",
				description = [[]],
				args = "(l: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["determine_format_from_data"] = {
				type = "function",
				description = [[]],
				args = "(l: ,f: root.file.File,type: )",
				returns = "()",
				valuetype = ""
			},
			["determine_format_from_filename"] = {
				type = "function",
				description = [[]],
				args = "(l: ,fileName: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["determine_type_from_extension"] = {
				type = "function",
				description = [[]],
				args = "(l: ,ext: )",
				returns = "()",
				valuetype = ""
			},
			["matches_format"] = {
				type = "function",
				description = [[]],
				args = "(l: ,format0: ,format1: )",
				returns = "()",
				valuetype = ""
			},
			["relative_path_to_absolute_path"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["absolute_path_to_relative_path"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["get_udm_format_extension"] = {
				type = "function",
				description = [[]],
				args = "(l: ,type: ,binary: )",
				returns = "()",
				valuetype = ""
			},
			["find_file"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["is_loaded"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: ,type: )",
				returns = "()",
				valuetype = ""
			},
			["clear_unused_textures"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["MapExportInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddLightSource"] = {
						type = "method",
						description = [[]],
						args = "(exportInfo: root.asset.MapExportInfo,light: root.ents.LightComponent)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["AddCamera"] = {
						type = "method",
						description = [[]],
						args = "(exportInfo: root.asset.MapExportInfo,cam: root.ents.CameraComponent)",
						returns = "()",
						valuetype = ""
					},
					["includeMapLightSources"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TextureImportInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["normalMap"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srgb"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["package"] = {
		type = "lib",
		description = [[]],
		childs = {
			["preload"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["loaders"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["engine"] = {
		type = "lib",
		description = [[]],
		childs = {
			["poll_console_output"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["shutdown"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["get_working_directory"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["unbind_key"] = {
				type = "function",
				description = [[]],
				args = "(key: )",
				returns = "()",
				valuetype = ""
			},
			["set_record_console_output"] = {
				type = "function",
				description = [[]],
				args = "(record: )",
				returns = "()",
				valuetype = ""
			},
			["get_tick_count"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["load_library"] = {
				type = "function",
				description = [[]],
				args = "(l: ,path: )",
				returns = "()",
				valuetype = ""
			},
			["library_exists"] = {
				type = "function",
				description = [[]],
				args = "(l: ,library: )",
				returns = "()",
				valuetype = ""
			},
			["get_info"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["create_font"] = {
				type = "function",
				description = [[]],
				args = "(l: ,identifier: ,font: ,size: )",
				returns = "(root.engine.FontInfo)",
				valuetype = "FontInfo"
			},
			["get_font"] = {
				type = "function",
				description = [[]],
				args = "(l: ,identifier: )",
				returns = "(root.engine.FontInfo)",
				valuetype = "FontInfo"
			},
			["set_fixed_frame_delta_time_interpretation"] = {
				type = "function",
				description = [[]],
				args = "(fps: )",
				returns = "()",
				valuetype = ""
			},
			["bind_key"] = {
				type = "function",
				description = [[]],
				args = "(l: ,key: ,function: )",
				returns = "()",
				valuetype = ""
			},
			["clear_fixed_frame_delta_time_interpretation"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["get_window_resolution"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(root.math.Vector2i)",
				valuetype = "Vector2i"
			},
			["set_tick_delta_time_tied_to_frame_rate"] = {
				type = "function",
				description = [[]],
				args = "(tieToFrameRate: )",
				returns = "()",
				valuetype = ""
			},
			["get_render_resolution"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(root.math.Vector2i)",
				valuetype = "Vector2i"
			},
			["get_staging_render_target"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(root.prosper.RenderTarget)",
				valuetype = "RenderTarget"
			},
			["get_current_frame_index"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["get_text_size"] = {
				type = "function",
				description = [[]],
				args = "(l: ,text: ,font: root.engine.FontInfo)",
				returns = "(root.math.Vector2i)",
				valuetype = "Vector2i"
			},
			["FontInfo"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["matrix"] = {
		type = "lib",
		description = [[]],
		childs = {
			["calc_projection_depth_bias_offset"] = {
				type = "function",
				description = [[]],
				args = "(p: ,nearZ: ,farZ: ,d: ,delta: )",
				returns = "()",
				valuetype = ""
			},
			["create_from_axis_angle"] = {
				type = "function",
				description = [[]],
				args = "(v: root.vector.Vector,ang: )",
				returns = "(root.math.Mat4)",
				valuetype = "Mat4"
			},
			["create_from_axes"] = {
				type = "function",
				description = [[]],
				args = "(forward: root.vector.Vector,right: root.vector.Vector,up: root.vector.Vector)",
				returns = "(root.math.Mat4)",
				valuetype = "Mat4"
			},
			["create_orthogonal_matrix"] = {
				type = "function",
				description = [[]],
				args = "(left: ,right: ,bottom: ,top: ,zNear: ,zFar: )",
				returns = "(root.math.Mat4)",
				valuetype = "Mat4"
			},
			["create_perspective_matrix"] = {
				type = "function",
				description = [[]],
				args = "(fov: ,aspectRatio: ,zNear: ,zFar: )",
				returns = "(root.math.Mat4)",
				valuetype = "Mat4"
			},
			["calc_covariance_matrix"] = {
				type = "function",
				description = [[]],
				args = "(l: ,points: )",
				returns = "(root.math.Mat3)",
				valuetype = "Mat3"
			},
			["create_look_at_matrix"] = {
				type = "function",
				description = [[]],
				args = "(arg0: root.vector.Vector,arg1: root.vector.Vector,arg2: root.vector.Vector)",
				returns = "(root.math.Mat4)",
				valuetype = "Mat4"
			}
		}
	},
	["net"] = {
		type = "lib",
		description = [[]],
		childs = {
			["ClientRecipientFilter"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetRecipients"] = {
						type = "method",
						description = [[]],
						args = "(rp: root.net.ClientRecipientFilter)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RecipientFilter"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetFilterType"] = {
						type = "method",
						description = [[]],
						args = "(rp: root.net.RecipientFilter,filterType: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["RemoveRecipient"] = {
						type = "method",
						description = [[]],
						args = "(rp: root.net.RecipientFilter,hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetRecipients"] = {
						type = "method",
						description = [[]],
						args = "(rp: root.net.RecipientFilter)",
						returns = "()",
						valuetype = ""
					},
					["AddRecipient"] = {
						type = "method",
						description = [[]],
						args = "(rp: root.net.RecipientFilter,hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["HasRecipient"] = {
						type = "method",
						description = [[]],
						args = "(rp: root.net.RecipientFilter,hPl: root.ents.PlayerComponent)",
						returns = "()",
						valuetype = ""
					},
					["GetFilterType"] = {
						type = "method",
						description = [[]],
						args = "(rp: root.net.RecipientFilter)",
						returns = "()",
						valuetype = ""
					},
					["TYPE_EXCLUDE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INCLUDE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Packet"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadInt32"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt32"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["WriteMat2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Mat2)",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt32"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt16"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadInt16"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadAngles"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt16"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt16"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteChar"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["WriteMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Mat2x4)",
						returns = "()",
						valuetype = ""
					},
					["WriteString"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,str: ,bNullterminated: )",
						returns = "()",
						valuetype = ""
					},
					["ReadChar"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteFloat"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadFloat"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteDouble"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadVectori"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadVector4i"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WritePlayer"] = {
						type = "method",
						description = [[]],
						args = "(packet: root.net.Packet,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["ReadSoundSource"] = {
						type = "method",
						description = [[]],
						args = "(packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["Seek"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,offset: )",
						returns = "()",
						valuetype = ""
					},
					["ReadDouble"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["WriteEntity"] = {
						type = "method",
						description = [[]],
						args = "(packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Mat4x3)",
						returns = "()",
						valuetype = ""
					},
					["ReadVector"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadVector4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["ReadVector2i"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt32"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadVector2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["WriteAngles"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Mat2x3)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ReadMat2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Mat3x2)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Mat3)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Mat3x4)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Mat4x2)",
						returns = "()",
						valuetype = ""
					},
					["WriteMat4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["WriteQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector2i"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["WriteSoundSource"] = {
						type = "method",
						description = [[]],
						args = "(packet: root.net.Packet,snd: root.sound.Source)",
						returns = "()",
						valuetype = ""
					},
					["WriteVectori"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Vectori)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteVector4i"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.math.Vector4i)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["GetTimeSinceTransmission"] = {
						type = "method",
						description = [[]],
						args = "(packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteVertex"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: root.Model.Vertex)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadVertex"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadEntity"] = {
						type = "method",
						description = [[]],
						args = "(packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteUniqueEntity"] = {
						type = "method",
						description = [[]],
						args = "(packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadPlayer"] = {
						type = "method",
						description = [[]],
						args = "(packet: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadMat4"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["Tell"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,size: )",
						returns = "()",
						valuetype = ""
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,size: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadBinaryString"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,size: )",
						returns = "()",
						valuetype = ""
					},
					["ToBinaryString"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadString"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,len: )",
						returns = "()",
						valuetype = ""
					},
					["ReadStringUntil"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,pattern: )",
						returns = "()",
						valuetype = ""
					},
					["ReadLine"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteBinary"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,dsOther: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadBinary"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteBool"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadBool"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt64"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadInt64"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt64"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt64"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteInt8"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadInt8"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["WriteUInt8"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet,t: )",
						returns = "()",
						valuetype = ""
					},
					["ReadUInt8"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.net.Packet)",
						returns = "()",
						valuetype = ""
					},
					["ReadUniqueEntity"] = {
						type = "method",
						description = [[]],
						args = "(packet: root.net.Packet,o: )",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["regex"] = {
		type = "lib",
		description = [[]],
		childs = {
			["replace"] = {
				type = "function",
				description = [[]],
				args = "(input: ,e: ,format: )",
				returns = "()",
				valuetype = ""
			},
			["Result"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMatchCount"] = {
						type = "method",
						description = [[]],
						args = "(match: root.regex.Result)",
						returns = "()",
						valuetype = ""
					},
					["GetLength"] = {
						type = "method",
						description = [[]],
						args = "(match: root.regex.Result)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.regex.Result)",
						returns = "()",
						valuetype = ""
					},
					["SetFormat"] = {
						type = "method",
						description = [[]],
						args = "(match: root.regex.Result,format: ,flags: )",
						returns = "()",
						valuetype = ""
					},
					["GetPosition"] = {
						type = "method",
						description = [[]],
						args = "(match: root.regex.Result)",
						returns = "()",
						valuetype = ""
					},
					["HasMatch"] = {
						type = "method",
						description = [[]],
						args = "(match: root.regex.Result)",
						returns = "()",
						valuetype = ""
					},
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "(match: root.regex.Result)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["string"] = {
		type = "lib",
		description = [[]],
		childs = {
			["remove_whitespace"] = {
				type = "function",
				description = [[]],
				args = "(s: )",
				returns = "()",
				valuetype = ""
			},
			["remove_quotes"] = {
				type = "function",
				description = [[]],
				args = "(s: )",
				returns = "()",
				valuetype = ""
			},
			["split"] = {
				type = "function",
				description = [[]],
				args = "(l: ,str: ,delimiter: )",
				returns = "()",
				valuetype = ""
			},
			["replace"] = {
				type = "function",
				description = [[]],
				args = "(subject: ,from: ,to: )",
				returns = "()",
				valuetype = ""
			},
			["fill_zeroes"] = {
				type = "function",
				description = [[]],
				args = "(i: ,numDigits: )",
				returns = "()",
				valuetype = ""
			},
			["calc_levenshtein_distance"] = {
				type = "function",
				description = [[]],
				args = "(s0: ,s1: )",
				returns = "()",
				valuetype = ""
			},
			["calc_levenshtein_similarity"] = {
				type = "function",
				description = [[]],
				args = "(s0: ,s1: )",
				returns = "()",
				valuetype = ""
			},
			["compare"] = {
				type = "function",
				description = [[]],
				args = "(a: ,b: )",
				returns = "()",
				valuetype = ""
			},
			["hash"] = {
				type = "function",
				description = [[]],
				args = "(str: )",
				returns = "()",
				valuetype = ""
			},
			["join"] = {
				type = "function",
				description = [[]],
				args = "(l: ,values: )",
				returns = "()",
				valuetype = ""
			},
			["is_number"] = {
				type = "function",
				description = [[]],
				args = "(str: )",
				returns = "()",
				valuetype = ""
			},
			["is_integer"] = {
				type = "function",
				description = [[]],
				args = "(str: )",
				returns = "()",
				valuetype = ""
			},
			["find_similar_elements"] = {
				type = "function",
				description = [[]],
				args = "(l: ,baseElement: ,inElements: ,limit: ,outSimilarElements: ,outSimilarities: )",
				returns = "()",
				valuetype = ""
			},
			["find_longest_common_substring"] = {
				type = "function",
				description = [[]],
				args = "(s0: ,s1: ,outStartIdx: ,outLen: ,outEndIdx: )",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["jit"] = {
		type = "lib",
		description = [[]],
		childs = {
			["opt"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["pcl"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["ai"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_schedule"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(root.ai.Schedule)",
				valuetype = "Schedule"
			},
			["register_faction"] = {
				type = "function",
				description = [[]],
				args = "(name: )",
				returns = "(root.ai.Faction)",
				valuetype = "Faction"
			},
			["find_faction_by_name"] = {
				type = "function",
				description = [[]],
				args = "(l: ,name: )",
				returns = "()",
				valuetype = ""
			},
			["get_factions"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["register_task"] = {
				type = "function",
				description = [[]],
				args = "(l: ,taskClass: )",
				returns = "()",
				valuetype = ""
			},
			["TaskPlaySound"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetGain"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlaySound,gain: )",
						returns = "()",
						valuetype = ""
					},
					["SetSoundName"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlaySound,sndName: )",
						returns = "()",
						valuetype = ""
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlaySound,pitch: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_GAIN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_PITCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_SOUND_NAME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskDecorator"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskDecorator,limit: )",
						returns = "()",
						valuetype = ""
					},
					["SetDecoratorType"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskDecorator,decoratorType: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_DECORATOR_TYPE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_LIMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Squad"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMembers"] = {
						type = "method",
						description = [[]],
						args = "(root.ents.AIComponent,squad: root.ai.Squad)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Faction"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddClass"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction,className: )",
						returns = "()",
						valuetype = ""
					},
					["SetAlliedFaction"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction,factionTgt: root.ai.Faction)",
						returns = "()",
						valuetype = ""
					},
					["GetClasses"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction)",
						returns = "()",
						valuetype = ""
					},
					["HasClass"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction,className: )",
						returns = "()",
						valuetype = ""
					},
					["SetDisposition"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction,factionTgt: root.ai.Faction,disposition: )",
						returns = "()",
						valuetype = ""
					},
					["GetDisposition"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetNeutralFaction"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction,factionTgt: root.ai.Faction)",
						returns = "()",
						valuetype = ""
					},
					["SetFearsomeFaction"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction,factionTgt: root.ai.Faction)",
						returns = "()",
						valuetype = ""
					},
					["SetEnemyFaction"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction,factionTgt: root.ai.Faction)",
						returns = "()",
						valuetype = ""
					},
					["SetDefaultDisposition"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction,disposition: )",
						returns = "()",
						valuetype = ""
					},
					["GetDefaultDisposition"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(faction: root.ai.Faction)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TaskLookAtTarget"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetLookDuration"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskLookAtTarget,duration: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_LOOK_DURATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskRandom"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetChance"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskRandom,chance: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_CHANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Memory"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFragments"] = {
						type = "method",
						description = [[]],
						args = "(mem: root.ai.Memory)",
						returns = "()",
						valuetype = ""
					},
					["GetFragmentCount"] = {
						type = "method",
						description = [[]],
						args = "(mem: root.ai.Memory)",
						returns = "()",
						valuetype = ""
					},
					["TYPE_SMELL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SOUND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VISUAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayAnimation"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetFacePrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayAnimation)",
						returns = "()",
						valuetype = ""
					},
					["SetFaceTarget"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayAnimation,target: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayAnimation,animation: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_FACE_TARGET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskEvent"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetEventId"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskEvent,eventId: )",
						returns = "()",
						valuetype = ""
					},
					["SetEventArgument"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskEvent,argIdx: ,arg: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_EVENT_ARGS_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_EVENT_ID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskWait"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMinWaitTime"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskWait,t: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxWaitTime"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskWait,t: )",
						returns = "()",
						valuetype = ""
					},
					["SetWaitTime"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskWait,t: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_MAX_WAIT_TIME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_MIN_WAIT_TIME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["MoveInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["moveOnPath"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["destinationTolerance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["moveSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["turnSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["faceTarget"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["activity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskMoveRandom"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMoveDistance"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskMoveRandom,dist: )",
						returns = "()",
						valuetype = ""
					},
					["SetMoveActivity"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskMoveRandom,activity: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_DISTANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_MOVE_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["MemoryFragment"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsInView"] = {
						type = "method",
						description = [[]],
						args = "(fragment: root.ai.MemoryFragment)",
						returns = "()",
						valuetype = ""
					},
					["GetEntity"] = {
						type = "method",
						description = [[]],
						args = "(fragment: root.ai.MemoryFragment)",
						returns = "()",
						valuetype = ""
					},
					["GetLastCheckTime"] = {
						type = "method",
						description = [[]],
						args = "(fragment: root.ai.MemoryFragment)",
						returns = "()",
						valuetype = ""
					},
					["GetLastTimeSensed"] = {
						type = "method",
						description = [[]],
						args = "(fragment: root.ai.MemoryFragment)",
						returns = "()",
						valuetype = ""
					},
					["GetLastKnownPosition"] = {
						type = "method",
						description = [[]],
						args = "(fragment: root.ai.MemoryFragment)",
						returns = "()",
						valuetype = ""
					},
					["GetLastKnownVelocity"] = {
						type = "method",
						description = [[]],
						args = "(fragment: root.ai.MemoryFragment)",
						returns = "()",
						valuetype = ""
					},
					["GetLastTimeSeen"] = {
						type = "method",
						description = [[]],
						args = "(fragment: root.ai.MemoryFragment)",
						returns = "()",
						valuetype = ""
					},
					["GetLastTimeHeared"] = {
						type = "method",
						description = [[]],
						args = "(fragment: root.ai.MemoryFragment)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TaskPlayActivity"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetFacePrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayActivity)",
						returns = "()",
						valuetype = ""
					},
					["SetFaceTarget"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayActivity,target: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetActivity"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayActivity,activity: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_FACE_TARGET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskDebugDrawText"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMessage"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskDebugDrawText,msg: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_MESSAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskDebugPrint"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMessage"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskDebugPrint,msg: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_MESSAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BehaviorTask"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,idx: ,i: )",
						returns = "()",
						valuetype = ""
					},
					["CreateDecoratedTask"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,decoratorType: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["SetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,idx: ,s: )",
						returns = "()",
						valuetype = ""
					},
					["SetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,idx: ,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["SetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,idx: ,f: )",
						returns = "()",
						valuetype = ""
					},
					["SetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,idx: ,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,idx: ,v: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.ai.BehaviorTask)",
						returns = "()",
						valuetype = ""
					},
					["GetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask)",
						returns = "()",
						valuetype = ""
					},
					["GetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetTask"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,nodeId: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["IsActive"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask)",
						returns = "()",
						valuetype = ""
					},
					["GetParameterType"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["SetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,idx: ,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,idx: ,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetSelectorType"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask)",
						returns = "()",
						valuetype = ""
					},
					["GetTasks"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask)",
						returns = "()",
						valuetype = ""
					},
					["SetScheduleParameter"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,taskParamId: ,scheduleParamId: )",
						returns = "()",
						valuetype = ""
					},
					["LinkParameter"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,paramIdx: ,taskOther: root.ai.BehaviorTask)",
						returns = "()",
						valuetype = ""
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask)",
						returns = "()",
						valuetype = ""
					},
					["CreateTask"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,o: )",
						returns = "()",
						valuetype = ""
					},
					["HasParameter"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.BehaviorTask,sched: ,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["RESULT_PENDING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RESULT_FAILED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RESULT_INITIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RESULT_SUCCEEDED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTOR_TYPE_RANDOM_SHUFFLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTOR_TYPE_SEQUENTIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_ALWAYS_FAIL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_ALWAYS_SUCCEED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_LIMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_INHERIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_INVERT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_REPEAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_UNTIL_FAIL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_UNTIL_SUCCESS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SELECTOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SEQUENCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_BOOL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_ENTITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_EULER_ANGLES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_STRING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_INT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_QUATERNION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_VECTOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayLayeredActivity"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetAnimationSlot"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayLayeredActivity,animationSlot: )",
						returns = "()",
						valuetype = ""
					},
					["SetActivity"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayLayeredActivity,activity: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_ANIMATION_SLOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayLayeredAnimation"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetAnimationSlot"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayLayeredAnimation,animationSlot: )",
						returns = "()",
						valuetype = ""
					},
					["SetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskPlayLayeredAnimation,animation: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_ANIMATION_SLOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskMoveToTarget"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMoveTarget"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskMoveToTarget,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetMoveDistance"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskMoveToTarget,dist: )",
						returns = "()",
						valuetype = ""
					},
					["SetMoveActivity"] = {
						type = "method",
						description = [[]],
						args = "(task: root.ai.TaskMoveToTarget,activity: )",
						returns = "()",
						valuetype = ""
					},
					["PARAMETER_DISTANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TARGET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_MOVE_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Schedule"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,idx: ,i: )",
						returns = "()",
						valuetype = ""
					},
					["SetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,idx: ,s: )",
						returns = "()",
						valuetype = ""
					},
					["SetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,idx: ,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["SetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,idx: ,f: )",
						returns = "()",
						valuetype = ""
					},
					["SetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,idx: ,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["SetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,idx: ,v: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,idx: ,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule)",
						returns = "()",
						valuetype = ""
					},
					["GetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["AddInterruptFlags"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,flags: )",
						returns = "()",
						valuetype = ""
					},
					["Cancel"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule)",
						returns = "()",
						valuetype = ""
					},
					["GetParameterType"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["SetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,idx: ,b: )",
						returns = "()",
						valuetype = ""
					},
					["DebugPrint"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule)",
						returns = "()",
						valuetype = ""
					},
					["SetInterruptFlags"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,flags: )",
						returns = "()",
						valuetype = ""
					},
					["GetInterruptFlags"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule)",
						returns = "()",
						valuetype = ""
					},
					["GetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,paramIdx: )",
						returns = "()",
						valuetype = ""
					},
					["AddTask"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,node: )",
						returns = "()",
						valuetype = ""
					},
					["GetRootTask"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule)",
						returns = "()",
						valuetype = ""
					},
					["HasParameter"] = {
						type = "method",
						description = [[]],
						args = "(schedule: root.ai.Schedule,parameterId: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BaseBehaviorTask"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["Think"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: root.ents.AIComponent,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["OnTaskComplete"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["OnSetScheduleParameter"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["Start"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: root.ents.AIComponent)",
						returns = "()",
						valuetype = ""
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["phys"] = {
		type = "lib",
		description = [[]],
		childs = {
			["HingeConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {

				}
			},
			["ContactPoint"] = {
				type = "class",
				description = [[]],
				childs = {
					["normal"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["distance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["material0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["material1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["impulse"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Transform"] = {
				type = "class",
				description = [[]],
				childs = {
					["TransformGlobal"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,t2: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["Interpolate"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,dst: root.phys.Transform,factor: )",
						returns = "()",
						valuetype = ""
					},
					["TransformLocal"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,t2: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetMatrix"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,m: root.math.Mat4)",
						returns = "()",
						valuetype = ""
					},
					["InterpolateToIdentity"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,factor: )",
						returns = "()",
						valuetype = ""
					},
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,origin: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,rotation: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.phys.Transform)",
						returns = "(root.math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.phys.Transform,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,tOther: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.phys.Transform)",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.phys.Transform)",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(0: root.phys.Transform,1: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.phys.Transform)",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetIdentity"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["IsIdentity"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["TranslateGlobal"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,v: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["TranslateLocal"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,v: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["RotateGlobal"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["RotateLocal"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.Transform,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["pitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["yaw"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["roll"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["CapsuleShape"] = {
				type = "class",
				inherits = "phys.ConvexShape phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetHalfHeight"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.CapsuleShape)",
						returns = "()",
						valuetype = ""
					},
					["GetRadius"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.CapsuleShape)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ScaledTransform"] = {
				type = "class",
				inherits = "phys.Transform",
				description = [[]],
				childs = {
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.ScaledTransform,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(t: root.phys.ScaledTransform,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["CompoundShape"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {

				}
			},
			["ConvexHullShape"] = {
				type = "class",
				inherits = "phys.ConvexShape phys.Shape phys.Base",
				description = [[]],
				childs = {
					["AddTriangle"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.ConvexHullShape,idx0: ,idx1: ,idx2: )",
						returns = "()",
						valuetype = ""
					},
					["ReservePoints"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.ConvexHullShape,numPoints: )",
						returns = "()",
						valuetype = ""
					},
					["AddPoint"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.ConvexHullShape,point: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Build"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.ConvexHullShape)",
						returns = "()",
						valuetype = ""
					},
					["ReserveTriangles"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.ConvexHullShape,numTris: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SoftBody"] = {
				type = "class",
				inherits = "phys.CollisionObj phys.Base",
				description = [[]],
				childs = {
					["GetSoftVsRigidHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetKineticContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetFriction"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["SetRigidContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetVolume"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["SetSoftVsKineticHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,rest: )",
						returns = "()",
						valuetype = ""
					},
					["GetRollingFriction"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetHitFraction"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["SetSoftVsRigidHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["LocalVertexIndexToNodeIndex"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,localVertexIndex: )",
						returns = "()",
						valuetype = ""
					},
					["SetFriction"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,friction: )",
						returns = "()",
						valuetype = ""
					},
					["SetAnchorsHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetPressureCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["SetDensity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,density: )",
						returns = "()",
						valuetype = ""
					},
					["GetAnisotropicFriction"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetMaterialVolumeStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,matId: )",
						returns = "()",
						valuetype = ""
					},
					["SetHitFraction"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,fraction: )",
						returns = "()",
						valuetype = ""
					},
					["SetAnisotropicFriction"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,friction: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetRollingFriction"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,friction: )",
						returns = "()",
						valuetype = ""
					},
					["GetRestLengthScale"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetRigidContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetWindVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["AddAeroForceToNode"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,node: ,force: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetRestLengthScale"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,scale: )",
						returns = "()",
						valuetype = ""
					},
					["SetWindVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetPoseMatchingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetVolumeDensity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,density: )",
						returns = "()",
						valuetype = ""
					},
					["SetSoftVsRigidImpulseSplitK"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetVelocitiesCorrectionFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetVolumeMass"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,mass: )",
						returns = "()",
						valuetype = ""
					},
					["SetPressureCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetDynamicFrictionCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetDampingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetKineticContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetSoftVsRigidImpulseSplitS"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetLiftCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetDynamicFrictionCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["SetSoftContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetSoftVsRigidImpulseSplitR"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetSoftVsSoftHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetVolumeConversationCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetAnchorsHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetDampingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["MeshVertexIndexToLocalVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,meshVertexIndex: )",
						returns = "()",
						valuetype = ""
					},
					["LocalVertexIndexToMeshVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,localIndex: )",
						returns = "()",
						valuetype = ""
					},
					["GetLiftCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetVelocitiesCorrectionFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetPoseMatchingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftVsKineticHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetMaterialLinearStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,matId: )",
						returns = "()",
						valuetype = ""
					},
					["GetSoftVsRigidImpulseSplitK"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetVolumeConversationCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftVsRigidImpulseSplitR"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftVsSoftHardness"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftVsRigidImpulseSplitS"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["SetMaterialAngularStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,matId: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaterialLinearStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,matId: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaterialVolumeStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,matId: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaterialAngularStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,matId: )",
						returns = "()",
						valuetype = ""
					},
					["AppendAnchor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,nodeId: ,hRigidBody: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["NodeIndexToLocalVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,nodeIndex: )",
						returns = "()",
						valuetype = ""
					},
					["MeshVertexIndexToNodeIndex"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,meshVertexIndex: )",
						returns = "()",
						valuetype = ""
					},
					["NodeIndexToMeshVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,nodeIndex: )",
						returns = "()",
						valuetype = ""
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,mass: )",
						returns = "()",
						valuetype = ""
					},
					["SetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetNodeCount"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,force: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody)",
						returns = "()",
						valuetype = ""
					},
					["AddAeroForceToFace"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,face: ,force: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["AddLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.SoftBody,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SoftBodyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetMaterialStiffnessCoefficients"] = {
						type = "method",
						description = [[]],
						args = "(sbInfo: root.phys.SoftBodyInfo,matId: ,linear: ,angular: ,volume: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaterialStiffnessCoefficients"] = {
						type = "method",
						description = [[]],
						args = "(sbInfo: root.phys.SoftBodyInfo,matId: )",
						returns = "()",
						valuetype = ""
					},
					["clusterCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["poseMatchingCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dragCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["anchorsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["rigidContactsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["kineticContactsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softContactsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dynamicFrictionCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidImpulseSplitK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["liftCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dampingCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["volumeConversationCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidImpulseSplitR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidImpulseSplitS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsKineticHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsSoftHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["pressureCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["velocitiesCorrectionFactor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bendingConstraintsDistance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxClusterIterations"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IKJacobian"] = {
				type = "class",
				description = [[]],
				childs = {
					["CalcDeltaThetasDLSwithSVD"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["CalcDeltaThetasSDLS"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["UpdateThetas"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["UpdatedSClampValue"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian,o: )",
						returns = "()",
						valuetype = ""
					},
					["UpdateThetaDot"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["GetRowCount"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["GetColumnCount"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["ComputeJacobian"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian,o: )",
						returns = "()",
						valuetype = ""
					},
					["SetJendActive"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["SetJtargetActive"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["CalcDeltaThetas"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["ZeroDeltaThetas"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["CalcDeltaThetasTranspose"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["CalcDeltaThetasPseudoinverse"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					},
					["CalcDeltaThetasDLS"] = {
						type = "method",
						description = [[]],
						args = "(jacobian: root.phys.IKJacobian)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Shape"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["IsHeightfield"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Shape)",
						returns = "()",
						valuetype = ""
					},
					["IsTriangleShape"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Shape)",
						returns = "()",
						valuetype = ""
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Shape)",
						returns = "()",
						valuetype = ""
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Shape,mass: )",
						returns = "()",
						valuetype = ""
					},
					["CalculateLocalInertia"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Shape,mass: )",
						returns = "()",
						valuetype = ""
					},
					["IsConvex"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Shape)",
						returns = "()",
						valuetype = ""
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Shape)",
						returns = "()",
						valuetype = ""
					},
					["IsConvexHull"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Shape)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TriangleShape"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {

				}
			},
			["Heightfield"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetUpAxis"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Heightfield)",
						returns = "()",
						valuetype = ""
					},
					["GetLength"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Heightfield)",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Heightfield)",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Heightfield,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxHeight"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Heightfield)",
						returns = "()",
						valuetype = ""
					},
					["SetHeight"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.Heightfield,x: ,y: ,height: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SliderConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetLimits"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.SliderConstraint,lower: ,upper: )",
						returns = "()",
						valuetype = ""
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.SliderConstraint,damping: )",
						returns = "()",
						valuetype = ""
					},
					["GetLimits"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.SliderConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetDamping"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.SliderConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetSoftness"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.SliderConstraint,softness: )",
						returns = "()",
						valuetype = ""
					},
					["DisableLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.SliderConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftness"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.SliderConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.SliderConstraint,restitution: )",
						returns = "()",
						valuetype = ""
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.SliderConstraint)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ContactInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetContactPoint"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shape1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GetContactPoints"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shape0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["collisionObj0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GetContactPointCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["collisionObj1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IKTree"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree,node: root.phys.IKTree.Node)",
						returns = "()",
						valuetype = ""
					},
					["UnFreeze"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree)",
						returns = "()",
						valuetype = ""
					},
					["GetNodeCount"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree)",
						returns = "()",
						valuetype = ""
					},
					["GetEffectorCount"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree)",
						returns = "()",
						valuetype = ""
					},
					["GetJointCount"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree)",
						returns = "()",
						valuetype = ""
					},
					["InsertRightSibling"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree,parent: root.phys.IKTree.Node,child: root.phys.IKTree.Node)",
						returns = "()",
						valuetype = ""
					},
					["Print"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree)",
						returns = "()",
						valuetype = ""
					},
					["Compute"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree)",
						returns = "()",
						valuetype = ""
					},
					["Init"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree)",
						returns = "()",
						valuetype = ""
					},
					["InsertRoot"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree,node: root.phys.IKTree.Node)",
						returns = "()",
						valuetype = ""
					},
					["InsertLeftChild"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree,parent: root.phys.IKTree.Node,child: root.phys.IKTree.Node)",
						returns = "()",
						valuetype = ""
					},
					["GetJoint"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree,nodeIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetEffector"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree,nodeIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetEffectorPosition"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree,nodeIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetRoot"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree)",
						returns = "()",
						valuetype = ""
					},
					["GetSuccessor"] = {
						type = "method",
						description = [[]],
						args = "(tree: root.phys.IKTree,node: root.phys.IKTree.Node)",
						returns = "()",
						valuetype = ""
					},
					["Node"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetLocalTransform"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["SetAttach"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node,attach: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["GetRelativePosition"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["GetS"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["GetTheta"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["IsFrozen"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["AddToTheta"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node,delta: )",
								returns = "()",
								valuetype = ""
							},
							["GetW"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["UpdateTheta"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node,delta: )",
								returns = "()",
								valuetype = ""
							},
							["GetLeftChildNode"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["GetMinTheta"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["GetMaxTheta"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["GetRestAngle"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["SetTheta"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node,theta: )",
								returns = "()",
								valuetype = ""
							},
							["ComputeS"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["ComputeW"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["IsEffector"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["IsJoint"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["GetEffectorIndex"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["Freeze"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["UnFreeze"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["GetJointIndex"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["PrintNode"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["GetRotationAxis"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["SetRotationAxis"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node,axis: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["GetRightChildNode"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["InitNode"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["GetAttach"] = {
								type = "method",
								description = [[]],
								args = "(node: root.phys.IKTree.Node)",
								returns = "()",
								valuetype = ""
							},
							["PURPOSE_JOINT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["PURPOSE_EFFECTOR"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["DoFConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetLinearLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,lower: root.vector.Vector,upper: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,softness: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetlinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularMaxLimitForce"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,lower: root.math.EulerAngles,upper: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,force: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularMaxLimitForce"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,force: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,factor: )",
						returns = "()",
						valuetype = ""
					},
					["GetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,factor: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,damping: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["IsAngularMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,axis: )",
						returns = "()",
						valuetype = ""
					},
					["GetAngularLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,tolerance: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,damping: )",
						returns = "()",
						valuetype = ""
					},
					["SetLinearTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,velocity: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,factor: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,factor: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetLinearRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentAngularLimitError"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentAngularPosition"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,limit: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentAngularLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentAngularAccumulatedImpulse"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,velocity: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,force: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,limit: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,softness: )",
						returns = "()",
						valuetype = ""
					},
					["SetLinearForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,factor: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,tolerance: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,factor: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["IsLinearMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,axis: )",
						returns = "()",
						valuetype = ""
					},
					["GetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentLinearDifference"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentLinearLimitError"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentLinearLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentLinearAccumulatedImpulse"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,limit: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint,limit: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFConstraint)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RigidBody"] = {
				type = "class",
				inherits = "phys.CollisionObj phys.Base",
				description = [[]],
				childs = {
					["SetBoneID"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["SetKinematic"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,bKinematic: )",
						returns = "()",
						valuetype = ""
					},
					["IsKinematic"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,force: root.vector.Vector,relPos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetInvInertiaTensorWorld"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,linDamping: ,angDamping: )",
						returns = "()",
						valuetype = ""
					},
					["SetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,threshold: )",
						returns = "()",
						valuetype = ""
					},
					["ApplyImpulse"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,impulse: root.vector.Vector,relPos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["ApplyTorque"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,torque: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["ApplyTorqueImpulse"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,torque: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,angDamping: )",
						returns = "()",
						valuetype = ""
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,mass: )",
						returns = "()",
						valuetype = ""
					},
					["GetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,linDamping: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneID"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["GetInertia"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["ClearForces"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["GetTotalForce"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["GetTotalTorque"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,factor: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,factor: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["SetSleepingThresholds"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,linear: ,angular: )",
						returns = "()",
						valuetype = ""
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetCenterOfMassOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,offset: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetCenterOfMassOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody,threshold: )",
						returns = "()",
						valuetype = ""
					},
					["GetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					},
					["GetSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.RigidBody)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RayCastData"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetFlags"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData,flags: )",
						returns = "()",
						valuetype = ""
					},
					["GetSourceTransform"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData,mask: )",
						returns = "()",
						valuetype = ""
					},
					["SetShape"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData,shape: root.phys.ConvexShape)",
						returns = "()",
						valuetype = ""
					},
					["SetTargetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData,group: )",
						returns = "()",
						valuetype = ""
					},
					["SetTarget"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetFilter"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData,object: )",
						returns = "()",
						valuetype = ""
					},
					["GetTargetTransform"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData)",
						returns = "()",
						valuetype = ""
					},
					["GetSourceOrigin"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData)",
						returns = "()",
						valuetype = ""
					},
					["GetTargetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData)",
						returns = "()",
						valuetype = ""
					},
					["GetSourceRotation"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData)",
						returns = "()",
						valuetype = ""
					},
					["GetTargetRotation"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData)",
						returns = "()",
						valuetype = ""
					},
					["SetSource"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetDirection"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData)",
						returns = "()",
						valuetype = ""
					},
					["GetDistance"] = {
						type = "method",
						description = [[]],
						args = "(data: root.phys.RayCastData)",
						returns = "()",
						valuetype = ""
					},
					["SetSourceRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["CollisionObj"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,origin: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["IsGhostObject"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,mask: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoundingSphere"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["IsRigidBody"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["Spawn"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["EnableSimulation"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["GetActivationState"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["WakeUp"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["SetActivationState"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,state: )",
						returns = "()",
						valuetype = ""
					},
					["GetWorldTransform"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["GetShape"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["IsAsleep"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,group: )",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["SetSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["IsAlwaysAwake"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["SetAlwaysAwake"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,alwaysAwake: )",
						returns = "()",
						valuetype = ""
					},
					["DisableSimulation"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["IsSoftBody"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					},
					["SetWorldTransform"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj,t: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["PutToSleep"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.CollisionObj)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["VehicleCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddWheel"] = {
						type = "method",
						description = [[]],
						args = "(vhcCreateInfo: root.phys.VehicleCreateInfo,wheelCreateInfo: root.phys.WheelCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetWheels"] = {
						type = "method",
						description = [[]],
						args = "(vhcCreateInfo: root.phys.VehicleCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["AddAntiRollBar"] = {
						type = "method",
						description = [[]],
						args = "(vhcCreateInfo: root.phys.VehicleCreateInfo,antiRollBar: )",
						returns = "()",
						valuetype = ""
					},
					["GetAntiRollBars"] = {
						type = "method",
						description = [[]],
						args = "(vhcCreateInfo: root.phys.VehicleCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["WHEEL_DRIVE_FOUR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WHEEL_DRIVE_FRONT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WHEEL_DRIVE_REAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["wheelDrive"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxEngineRotationSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["actor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["chassis"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["gearSwitchTime"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxEngineTorque"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["clutchStrength"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["gravityFactor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SuspensionInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["camberAngleAtMaxCompression"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["maxCompression"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["springDamperRate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["maxDroop"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["camberAngleAtRest"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["camberAngleAtMaxDroop"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["springStrength"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["ConeTwistConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.ConeTwistConstraint,ang: root.math.EulerAngles)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Base"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["Controller"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["GetGroundBody"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetGroundMaterial"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetFootPos"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetGroundTouchPos"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetStepHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["SetDimensions"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,dims: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionObject"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["SetFootPos"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,up: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,slopeLimit: )",
						returns = "()",
						valuetype = ""
					},
					["AddMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetDimensions"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,newHeight: )",
						returns = "()",
						valuetype = ""
					},
					["SetStepHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,stepHeight: )",
						returns = "()",
						valuetype = ""
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetShape"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionFlags"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["IsTouchingGround"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetGroundTouchNormal"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["Spawn"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetGroundShape"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["GetMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller)",
						returns = "()",
						valuetype = ""
					},
					["Move"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Controller,disp: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Material"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["SetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.phys.Material,friction: )",
						returns = "()",
						valuetype = ""
					},
					["GetSurfaceMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.phys.Material)",
						returns = "()",
						valuetype = ""
					},
					["SetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.phys.Material,friction: )",
						returns = "()",
						valuetype = ""
					},
					["GetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.phys.Material)",
						returns = "()",
						valuetype = ""
					},
					["SetSurfaceMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.phys.Material,surfMat: root.game.SurfaceMaterial)",
						returns = "()",
						valuetype = ""
					},
					["GetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.phys.Material)",
						returns = "()",
						valuetype = ""
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.phys.Material)",
						returns = "()",
						valuetype = ""
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.phys.Material,restitution: )",
						returns = "()",
						valuetype = ""
					},
					["SetFriction"] = {
						type = "method",
						description = [[]],
						args = "(mat: root.phys.Material,friction: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Vehicle"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["ChangeToGear"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,gear: )",
						returns = "()",
						valuetype = ""
					},
					["GetForwardSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["SetUseDigitalInputs"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,useDigitalInputs: )",
						returns = "()",
						valuetype = ""
					},
					["GetSidewaysSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["SetBrakeFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,brakeFactor: )",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionObject"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["SetHandBrakeFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,brakeFactor: )",
						returns = "()",
						valuetype = ""
					},
					["ResetControls"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["SetAccelerationFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,accFactor: )",
						returns = "()",
						valuetype = ""
					},
					["SetSteerFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,turnFactor: )",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentGear"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["SetGear"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,gear: )",
						returns = "()",
						valuetype = ""
					},
					["SetGearDown"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["SetGearUp"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["SetGearSwitchTime"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,switchTime: )",
						returns = "()",
						valuetype = ""
					},
					["SetUseAutoGears"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,useAutoGears: )",
						returns = "()",
						valuetype = ""
					},
					["ShouldUseAutoGears"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["GetEngineRotationSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["SetRestState"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["GetWheelCount"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["SetWheelRotationAngle"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,wheelIdx: ,angle: )",
						returns = "()",
						valuetype = ""
					},
					["SetWheelRotationSpeed"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle,wheelIdx: ,speed: )",
						returns = "()",
						valuetype = ""
					},
					["IsInAir"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.Vehicle)",
						returns = "()",
						valuetype = ""
					},
					["GEAR_TWENTYSIXTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_THIRTIETH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_ELEVENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_EIGHTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYSECOND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_EIGHTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_NEUTRAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FIFTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FIFTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FIRST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FOURTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FOURTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_NINETEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_NINTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYSEVENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_REVERSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYNINTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SECOND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SEVENTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SEVENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SIXTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SIXTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_THIRD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_THIRTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWELFTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTIETH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYEIGHTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYFIFTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYFIRST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYFOURTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYTHIRD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BoxShape"] = {
				type = "class",
				inherits = "phys.ConvexShape phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetHalfExtents"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.BoxShape)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ConvexShape"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetCollisionMesh"] = {
						type = "method",
						description = [[]],
						args = "(shape: root.phys.ConvexShape)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Object"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,mass: )",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilter"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,mask: ,group: )",
						returns = "()",
						valuetype = ""
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,factor: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,threshold: )",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetOwner"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetGroundSurfaceMaterial"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetTotalForce"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetGroundEntity"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["IsGroundWalkable"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,mask: )",
						returns = "()",
						valuetype = ""
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,linDamping: ,angDamping: )",
						returns = "()",
						valuetype = ""
					},
					["GetGroundPhysCollisionObject"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetTotalTorque"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetSleepingThresholds"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,linear: ,angular: )",
						returns = "()",
						valuetype = ""
					},
					["GetSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["AddAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["ClearForces"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionObjects"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetGroundPhysObject"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["IsOnGround"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["WakeUp"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetGroundVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,angDamping: )",
						returns = "()",
						valuetype = ""
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetGroundFriction"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,threshold: )",
						returns = "()",
						valuetype = ""
					},
					["ApplyImpulse"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,torque: root.vector.Vector,relPos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["PutToSleep"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,group: )",
						returns = "()",
						valuetype = ""
					},
					["SetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,factor: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object)",
						returns = "()",
						valuetype = ""
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,force: root.vector.Vector,relPos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["ApplyTorque"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,torque: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["ApplyTorqueImpulse"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,torque: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,linDamping: )",
						returns = "()",
						valuetype = ""
					},
					["AddLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(hPhysObj: root.phys.Object,vel: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["GhostObj"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hPhys: root.phys.GhostObj)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IKController"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController)",
						returns = "()",
						valuetype = ""
					},
					["SetChainLength"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController,chainLength: )",
						returns = "()",
						valuetype = ""
					},
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController,type: )",
						returns = "()",
						valuetype = ""
					},
					["GetChainLength"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController)",
						returns = "()",
						valuetype = ""
					},
					["SetEffectorName"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController,effectorName: )",
						returns = "()",
						valuetype = ""
					},
					["SetMethod"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController,method: )",
						returns = "()",
						valuetype = ""
					},
					["GetMethod"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController)",
						returns = "()",
						valuetype = ""
					},
					["GetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController,key: )",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController)",
						returns = "()",
						valuetype = ""
					},
					["SetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController,key: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["SetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController,o: )",
						returns = "()",
						valuetype = ""
					},
					["GetEffectorName"] = {
						type = "method",
						description = [[]],
						args = "(ikController: root.phys.IKController)",
						returns = "()",
						valuetype = ""
					},
					["METHOD_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_JACOBIAN_TRANSPOSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_PSEUDOINVERSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_SELECTIVELY_DAMPED_LEAST_SQUARE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_DAMPED_LEAST_SQUARES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_DAMPED_LEAST_SQUARES_WITH_SINGULAR_VALUE_DECOMPOSITION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FixedConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {

				}
			},
			["ChassisCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetShapeIndices"] = {
						type = "method",
						description = [[]],
						args = "(vhcCreateInfo: root.phys.VehicleCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["AddShapeIndex"] = {
						type = "method",
						description = [[]],
						args = "(vhcCreateInfo: root.phys.VehicleCreateInfo,shapeIndex: )",
						returns = "()",
						valuetype = ""
					},
					["momentOfInertia"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["centerOfMass"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DoFSpringConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetStiffness"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,stiffness: )",
						returns = "()",
						valuetype = ""
					},
					["SetLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,lo: ,hi: )",
						returns = "()",
						valuetype = ""
					},
					["SetStopCFM"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["IsLimited"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,axis: ,type: )",
						returns = "()",
						valuetype = ""
					},
					["SetRotationOrder"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,rotationOrder: )",
						returns = "()",
						valuetype = ""
					},
					["EnableMotor"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,enable: )",
						returns = "()",
						valuetype = ""
					},
					["GetRotationOrder"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetBounce"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,bounce: )",
						returns = "()",
						valuetype = ""
					},
					["SetAxis"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,axis1: root.vector.Vector,axis2: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,linearLower: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetServo"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,enable: )",
						returns = "()",
						valuetype = ""
					},
					["SetTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,velocity: )",
						returns = "()",
						valuetype = ""
					},
					["GetLinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,lo: ,hi: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,force: )",
						returns = "()",
						valuetype = ""
					},
					["EnableSpring"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,enable: )",
						returns = "()",
						valuetype = ""
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,damping: )",
						returns = "()",
						valuetype = ""
					},
					["SetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,angularLower: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetEquilibriumPoint"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["SetERP"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["GetERP"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: )",
						returns = "()",
						valuetype = ""
					},
					["GetCalculatedTransformA"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetStopERP"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["GetStopERP"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: )",
						returns = "()",
						valuetype = ""
					},
					["SetCFM"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,value: )",
						returns = "()",
						valuetype = ""
					},
					["GetCFM"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: )",
						returns = "()",
						valuetype = ""
					},
					["GetStopCFM"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: )",
						returns = "()",
						valuetype = ""
					},
					["SetLinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,linearUpper: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngle"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,axis: )",
						returns = "()",
						valuetype = ""
					},
					["SetAngularUpperLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,angularUpper: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetServoTarget"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,type: ,axis: ,target: )",
						returns = "()",
						valuetype = ""
					},
					["GetCalculatedTransformB"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["CalculateTransforms"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,transformA: root.phys.Transform,transformB: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["GetFrameOffsetA"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetFrameOffsetB"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetAxis"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,axis: )",
						returns = "()",
						valuetype = ""
					},
					["GetRelativePivotPosition"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,axis: )",
						returns = "()",
						valuetype = ""
					},
					["SetFrames"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,transformA: root.phys.Transform,transformB: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularLowerLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,angularLower: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularLowerLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["SetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint,angularUpper: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					},
					["GetAngularUpperLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.phys.DoFSpringConstraint)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BallSocketConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {

				}
			},
			["Constraint"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetSourceActor"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["GetTargetActor"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["GetSourcePosition"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["GetTargetPosition"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["SetBreakForce"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint,threshold: )",
						returns = "()",
						valuetype = ""
					},
					["GetBreakForce"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["GetBreakTorque"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["GetSourceRotation"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["SetBreakTorque"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint,threshold: )",
						returns = "()",
						valuetype = ""
					},
					["EnableCollisions"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["GetSourceTransform"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["SetEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["GetTargetRotation"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["DisableCollisions"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["GetTargetTransform"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hConstraint: root.phys.Constraint)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["WheelCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["FLAG_BIT_FRONT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_LEFT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_REAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_RIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["radius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tireType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shapeIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["chassisOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["suspension"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxHandBrakeTorque"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxSteeringAngle"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["momentOfInertia"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RayCastResult"] = {
				type = "class",
				description = [[]],
				childs = {
					["HIT_TYPE_BLOCK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["HIT_TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["HIT_TYPE_TOUCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["hitType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["entity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["distance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["fraction"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["startPosition"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["colObj"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["material"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["materialName"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mesh"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["subMesh"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normal"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physObj"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["coroutine"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["geometry"] = {
		type = "lib",
		description = [[]],
		childs = {
			["closest_point_on_triangle_to_point"] = {
				type = "function",
				description = [[]],
				args = "(a: root.vector.Vector,b: root.vector.Vector,c: root.vector.Vector,p: root.vector.Vector)",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["smallest_enclosing_sphere"] = {
				type = "function",
				description = [[]],
				args = "(l: ,tVerts: ,outCenter: root.vector.Vector,outRadius: )",
				returns = "()",
				valuetype = ""
			},
			["closest_point_on_line_to_point"] = {
				type = "function",
				description = [[]],
				args = "(start: root.vector.Vector,end: root.vector.Vector,p: root.vector.Vector)",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["calc_rotation_between_planes"] = {
				type = "function",
				description = [[]],
				args = "(n0: root.vector.Vector,n1: root.vector.Vector)",
				returns = "(root.math.QuaternionInternal)",
				valuetype = "QuaternionInternal"
			},
			["closest_point_on_sphere_to_line"] = {
				type = "function",
				description = [[]],
				args = "(origin: root.vector.Vector,radius: ,start: root.vector.Vector,end: root.vector.Vector)",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["get_triangle_winding_order"] = {
				type = "function",
				description = [[]],
				args = "(v0: root.math.Vector2,v1: root.math.Vector2,v2: root.math.Vector2)",
				returns = "()",
				valuetype = ""
			},
			["calc_volume_of_triangle"] = {
				type = "function",
				description = [[]],
				args = "(v0: root.vector.Vector,v1: root.vector.Vector,v2: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["generate_truncated_cone_mesh"] = {
				type = "function",
				description = [[]],
				args = "(arg0: ,arg1: root.vector.Vector,arg2: ,arg3: root.vector.Vector,arg4: ,arg5: ,arg6: ,arg7: ,arg8: )",
				returns = "()",
				valuetype = ""
			},
			["calc_face_normal"] = {
				type = "function",
				description = [[]],
				args = "(v0: root.vector.Vector,v1: root.vector.Vector,v2: root.vector.Vector)",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["calc_volume_of_polyhedron"] = {
				type = "function",
				description = [[]],
				args = "(l: ,tVerts: ,tTriangles: )",
				returns = "()",
				valuetype = ""
			},
			["calc_point_on_triangle"] = {
				type = "function",
				description = [[]],
				args = "(v0: root.vector.Vector,v1: root.vector.Vector,v2: root.vector.Vector,a: ,b: )",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["calc_center_of_mass"] = {
				type = "function",
				description = [[]],
				args = "(l: ,tVerts: ,tTriangles: ,outCom: root.vector.Vector,outVolume: )",
				returns = "()",
				valuetype = ""
			},
			["calc_triangle_area"] = {
				type = "function",
				description = [[]],
				args = "(a: root.vector.Vector,b: root.vector.Vector,c: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["calc_barycentric_coordinates"] = {
				type = "function",
				description = [[]],
				args = "(p0: root.vector.Vector,p1: root.vector.Vector,p2: root.vector.Vector,hitPoint: root.vector.Vector)",
				returns = "(root.math.Vector2)",
				valuetype = "Vector2"
			},
			["get_side_of_point_to_line"] = {
				type = "function",
				description = [[]],
				args = "(a: root.math.Vector2,b: root.math.Vector2,c: root.math.Vector2)",
				returns = "()",
				valuetype = ""
			},
			["get_side_of_point_to_plane"] = {
				type = "function",
				description = [[]],
				args = "(n: root.vector.Vector,d: ,p: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["triangulate"] = {
				type = "function",
				description = [[]],
				args = "(l: ,tContour: )",
				returns = "()",
				valuetype = ""
			},
			["closest_points_between_lines"] = {
				type = "function",
				description = [[]],
				args = "(pA: root.vector.Vector,qA: root.vector.Vector,pB: root.vector.Vector,qB: root.vector.Vector,outCA: root.vector.Vector,outCB: root.vector.Vector,outD: )",
				returns = "()",
				valuetype = ""
			},
			["get_outline_vertices"] = {
				type = "function",
				description = [[]],
				args = "(l: )",
				returns = "()",
				valuetype = ""
			},
			["closest_point_on_aabb_to_point"] = {
				type = "function",
				description = [[]],
				args = "(min: root.vector.Vector,max: root.vector.Vector,p: root.vector.Vector)",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			},
			["closest_point_on_plane_to_point"] = {
				type = "function",
				description = [[]],
				args = "(n: root.vector.Vector,d: ,p: root.vector.Vector)",
				returns = "(root.vector.Vector)",
				valuetype = "Vector"
			}
		}
	},
	["noise"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["mesh"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["boundingvolume"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_rotated_aabb"] = {
				type = "function",
				description = [[]],
				args = "(l: ,min: root.vector.Vector,max: root.vector.Vector,rot: root.math.Mat4)",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["tool"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["console"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Var"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "(cvar: root.console.Var)",
						returns = "()",
						valuetype = ""
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.console.Var)",
						returns = "()",
						valuetype = ""
					},
					["GetDefault"] = {
						type = "method",
						description = [[]],
						args = "(cvar: root.console.Var)",
						returns = "()",
						valuetype = ""
					},
					["GetInt"] = {
						type = "method",
						description = [[]],
						args = "(cvar: root.console.Var)",
						returns = "()",
						valuetype = ""
					},
					["GetHelpText"] = {
						type = "method",
						description = [[]],
						args = "(cvar: root.console.Var)",
						returns = "()",
						valuetype = ""
					},
					["GetFloat"] = {
						type = "method",
						description = [[]],
						args = "(cvar: root.console.Var)",
						returns = "()",
						valuetype = ""
					},
					["AddChangeCallback"] = {
						type = "method",
						description = [[]],
						args = "(cvar: root.console.Var,oFunction: )",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(cvar: root.console.Var)",
						returns = "()",
						valuetype = ""
					},
					["GetBool"] = {
						type = "method",
						description = [[]],
						args = "(cvar: root.console.Var)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["import"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["ik"] = {
		type = "lib",
		description = [[]],
		childs = {
			["FABRIkSolver"] = {
				type = "class",
				inherits = "ik.IkSolver",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IkBallSocketConstraint"] = {
				type = "class",
				inherits = "ik.IkConstraint",
				description = [[]],
				childs = {
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["GetLimit"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.ik.IkBallSocketConstraint)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IkConstraint"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetJointIndex"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.ik.IkConstraint)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IkSolver"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetGlobalTransform"] = {
						type = "method",
						description = [[]],
						args = "(idx: )",
						returns = "(root.phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["Solve"] = {
						type = "method",
						description = [[]],
						args = "(pose: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["AddHingeConstraint"] = {
						type = "method",
						description = [[]],
						args = "(idx: ,axis: root.vector.Vector)",
						returns = "(root.ik.IkHingeConstraint)",
						valuetype = "IkHingeConstraint"
					},
					["SetLocalTransform"] = {
						type = "method",
						description = [[]],
						args = "(idx: ,pose: root.phys.ScaledTransform)",
						returns = "()",
						valuetype = ""
					},
					["GetLocalTransform"] = {
						type = "method",
						description = [[]],
						args = "(idx: )",
						returns = "(root.phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["AddBallSocketConstraint"] = {
						type = "method",
						description = [[]],
						args = "(idx: ,limit: )",
						returns = "(root.ik.IkBallSocketConstraint)",
						valuetype = "IkBallSocketConstraint"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(n: )",
						returns = "()",
						valuetype = ""
					},
					["AddCustomConstraint"] = {
						type = "method",
						description = [[]],
						args = "(solver: root.ik.IkSolver,idx: ,f: )",
						returns = "(root.ik.IkConstraint)",
						valuetype = "IkConstraint"
					}
				}
			},
			["CCDIkSolver"] = {
				type = "class",
				inherits = "ik.IkSolver",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["IkHingeConstraint"] = {
				type = "class",
				inherits = "ik.IkConstraint",
				description = [[]],
				childs = {
					["SetLimits"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.ik.IkHingeConstraint,limits: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["ClearLimits"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetLimits"] = {
						type = "method",
						description = [[]],
						args = "(constraint: root.ik.IkHingeConstraint)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["Animation"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Frame"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetMoveTranslationX"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,x: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneRotation"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneID: )",
						returns = "()",
						valuetype = ""
					},
					["SetBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneID: ,pos: root.vector.Vector,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["SetBonePose"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneId: ,pose: root.phys.Transform)",
						returns = "()",
						valuetype = ""
					},
					["SetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneCount: )",
						returns = "()",
						valuetype = ""
					},
					["CalcRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,anim: root.Model.Animation,mdl: )",
						returns = "()",
						valuetype = ""
					},
					["SetBoneScale"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneId: ,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneScale"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexControllerIds"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexControllerWeights"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame)",
						returns = "()",
						valuetype = ""
					},
					["GetMoveTranslationZ"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame)",
						returns = "()",
						valuetype = ""
					},
					["SetBonePosition"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneID: ,pos: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetBoneRotation"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneID: ,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["Localize"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,skeleton: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					},
					["Globalize"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,skeleton: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					},
					["GetMoveTranslation"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame)",
						returns = "()",
						valuetype = ""
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetMoveTranslationX"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame)",
						returns = "()",
						valuetype = ""
					},
					["SetMoveTranslation"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,x: ,z: )",
						returns = "()",
						valuetype = ""
					},
					["SetFlexControllerWeights"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,object: )",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,anim: root.Model.Animation,skeleton: root.Model.Skeleton,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneMatrix"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneID: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneID: )",
						returns = "()",
						valuetype = ""
					},
					["GetBonePose"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame)",
						returns = "()",
						valuetype = ""
					},
					["SetMoveTranslationZ"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,z: )",
						returns = "()",
						valuetype = ""
					},
					["GetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,skeleton: root.Model.Skeleton,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(frame: root.Animation.Frame,anim: root.Model.Animation,skeleton: root.Model.Skeleton,t: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["intersect"] = {
		type = "lib",
		description = [[]],
		childs = {
			["aabb_with_aabb"] = {
				type = "function",
				description = [[]],
				args = "(minA: root.vector.Vector,maxA: root.vector.Vector,minB: root.vector.Vector,maxB: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["sphere_with_sphere"] = {
				type = "function",
				description = [[]],
				args = "(originA: root.vector.Vector,rA: ,originB: root.vector.Vector,rB: )",
				returns = "()",
				valuetype = ""
			},
			["line_with_aabb"] = {
				type = "function",
				description = [[]],
				args = "(l: ,start: root.vector.Vector,dir: root.vector.Vector,min: root.vector.Vector,max: root.vector.Vector,outMin: ,outMax: )",
				returns = "()",
				valuetype = ""
			},
			["aabb_with_sphere"] = {
				type = "function",
				description = [[]],
				args = "(min: root.vector.Vector,max: root.vector.Vector,origin: root.vector.Vector,r: )",
				returns = "()",
				valuetype = ""
			},
			["point_in_aabb"] = {
				type = "function",
				description = [[]],
				args = "(vec: root.vector.Vector,min: root.vector.Vector,max: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["line_with_obb"] = {
				type = "function",
				description = [[]],
				args = "(l: ,rayStart: root.vector.Vector,rayDir: root.vector.Vector,min: root.vector.Vector,max: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["line_with_mesh"] = {
				type = "function",
				description = [[]],
				args = "(arg0: ,arg1: root.vector.Vector,arg2: root.vector.Vector,arg3: root.game.Model,arg4: ,arg5: ,arg6: )",
				returns = "()",
				valuetype = ""
			},
			["sphere_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(sphereOrigin: root.vector.Vector,sphereRadius: ,n: root.vector.Vector,d: )",
				returns = "()",
				valuetype = ""
			},
			["point_in_plane_mesh"] = {
				type = "function",
				description = [[]],
				args = "(l: ,vec: root.vector.Vector,planeTable: )",
				returns = "()",
				valuetype = ""
			},
			["line_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(l: ,origin: root.vector.Vector,dir: root.vector.Vector,n: root.vector.Vector,d: )",
				returns = "()",
				valuetype = ""
			},
			["aabb_with_triangle"] = {
				type = "function",
				description = [[]],
				args = "(min: root.vector.Vector,max: root.vector.Vector,a: root.vector.Vector,b: root.vector.Vector,c: root.vector.Vector)",
				returns = "()",
				valuetype = ""
			},
			["sphere_in_plane_mesh"] = {
				type = "function",
				description = [[]],
				args = "(l: ,vec: root.vector.Vector,r: ,planeTable: )",
				returns = "()",
				valuetype = ""
			},
			["aabb_in_plane_mesh"] = {
				type = "function",
				description = [[]],
				args = "(l: ,min: root.vector.Vector,max: root.vector.Vector,planeTable: )",
				returns = "()",
				valuetype = ""
			},
			["sphere_with_cone"] = {
				type = "function",
				description = [[]],
				args = "(sphereOrigin: root.vector.Vector,radius: ,coneOrigin: root.vector.Vector,coneDir: root.vector.Vector,coneAngle: )",
				returns = "()",
				valuetype = ""
			},
			["line_with_triangle"] = {
				type = "function",
				description = [[]],
				args = "(arg0: ,arg1: root.vector.Vector,arg2: root.vector.Vector,arg3: root.vector.Vector,arg4: root.vector.Vector,arg5: root.vector.Vector,arg6: ,arg7: )",
				returns = "()",
				valuetype = ""
			},
			["aabb_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(min: root.vector.Vector,max: root.vector.Vector,n: root.vector.Vector,d: )",
				returns = "()",
				valuetype = ""
			},
			["obb_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(min: root.vector.Vector,max: root.vector.Vector,origin: root.vector.Vector,rot: root.math.QuaternionInternal,n: root.vector.Vector,d: )",
				returns = "()",
				valuetype = ""
			},
			["line_with_sphere"] = {
				type = "function",
				description = [[]],
				args = "(l: ,lineOrigin: root.vector.Vector,lineDir: root.vector.Vector,sphereOrigin: root.vector.Vector,sphereRadius: )",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["dmx"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Data"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(data: root.dmx.Data)",
						returns = "()",
						valuetype = ""
					},
					["GetRootAttribute"] = {
						type = "method",
						description = [[]],
						args = "(data: root.dmx.Data)",
						returns = "()",
						valuetype = ""
					},
					["GetElements"] = {
						type = "method",
						description = [[]],
						args = "(data: root.dmx.Data)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Attribute"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(attr: root.dmx.Attribute)",
						returns = "()",
						valuetype = ""
					},
					["RemoveArrayValue"] = {
						type = "method",
						description = [[]],
						args = "(attr: root.dmx.Attribute,val: root.dmx.Attribute)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Attribute,name: )",
						returns = "()",
						valuetype = ""
					},
					["AddArrayValue"] = {
						type = "method",
						description = [[]],
						args = "(attr: root.dmx.Attribute,val: root.dmx.Attribute)",
						returns = "()",
						valuetype = ""
					},
					["GetValueAsString"] = {
						type = "method",
						description = [[]],
						args = "(attr: root.dmx.Attribute)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(attr: root.dmx.Attribute)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(attr: root.dmx.Attribute,attrOther: root.dmx.Attribute)",
						returns = "()",
						valuetype = ""
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(attr: root.dmx.Attribute)",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(attr: root.dmx.Attribute)",
						returns = "()",
						valuetype = ""
					},
					["TYPE_TIME_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ANGLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BINARY_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_TIME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BINARY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ANGLE_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BOOL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BOOL_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_MATRIX_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_COLOR_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ELEMENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ELEMENT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FLOAT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INVALID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_MATRIX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_OBJECTID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_QUATERNION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_OBJECTID_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_QUATERNION_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_STRING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_STRING_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_UINT64"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_UINT8"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR2_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR3_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR4_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Element"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetGUID"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetAttrV"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetAttributeValue"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element,id: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetAttr"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element,elOther: root.dmx.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetAttribute"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element,id: )",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element)",
						returns = "()",
						valuetype = ""
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetAttributes"] = {
						type = "method",
						description = [[]],
						args = "(el: root.dmx.Element)",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["io"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["log"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["table"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["function_info"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_function_overloads"] = {
				type = "function",
				description = [[]],
				args = "(fn: )",
				returns = "()",
				valuetype = ""
			},
			["get_function_name"] = {
				type = "function",
				description = [[]],
				args = "(fn: )",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["bit"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["prosper"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_buffer"] = {
				type = "function",
				description = [[]],
				args = "(bufCreateInfo: root.prosper.BufferCreateInfo)",
				returns = "(root.prosper.Buffer)",
				valuetype = "Buffer"
			},
			["util"] = {
				type = "lib",
				description = [[]],
				childs = {
					["get_line_vertex_count"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["allocate_temporary_buffer"] = {
						type = "function",
						description = [[]],
						args = "(l: ,size: )",
						returns = "()",
						valuetype = ""
					},
					["get_line_vertex_format"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_square_vertex_buffer"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_line_vertex_buffer"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_line_vertices"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_square_vertex_uv_buffer"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_square_uv_buffer"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_square_vertices"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_square_uv_coordinates"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_square_vertex_count"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_square_vertex_format"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					},
					["get_square_uv_format"] = {
						type = "function",
						description = [[]],
						args = "(l: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["WindowCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["stereo"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["doublebuffer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["focused"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["depthBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["resizable"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["greenBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["samples"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["stencilBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["title"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["visible"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srgbCapable"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["refreshRate"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["redBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["blueBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["alphaBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["decorated"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["autoIconify"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["floating"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Fence"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Fence)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Fence,1: root.prosper.Fence)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hFence: root.prosper.Fence)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["CommandBufferRecorder"] = {
				type = "class",
				description = [[]],
				childs = {
					["ExecuteCommands"] = {
						type = "method",
						description = [[]],
						args = "(drawCmd: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.CommandBufferRecorder,1: root.prosper.CommandBufferRecorder)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.CommandBufferRecorder)",
						returns = "()",
						valuetype = ""
					},
					["IsPending"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["PipelineBarrierInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["srcStageMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstStageMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BufferCopyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["srcOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["size"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Image"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetSrgb"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image,srgb: )",
						returns = "()",
						valuetype = ""
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetAlignment"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetExtent2D"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image,mipmap: )",
						returns = "()",
						valuetype = ""
					},
					["GetAspectSubresourceLayout"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Image,1: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetUsage"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetMipmapCount"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetMipmapSize"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image,mipmap: )",
						returns = "()",
						valuetype = ""
					},
					["GetLayerCount"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetTiling"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["WriteMemory"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image,x: ,y: ,imgBuf: root.util.ImageBuffer)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["ToImageBuffer"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image,includeLayers: ,includeMipmaps: )",
						returns = "()",
						valuetype = ""
					},
					["GetMemoryBuffer"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["SetNormalMap"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image,normalMap: )",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image,cmd: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetCreateInfo"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["Convert"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image,cmd: root.prosper.CommandBuffer,format: )",
						returns = "()",
						valuetype = ""
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetSampleCount"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetSharingMode"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(hImg: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["IsSrgb"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["IsNormalMap"] = {
						type = "method",
						description = [[]],
						args = "(img: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ImageCopyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["srcSubresource"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstSubresource"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstImageLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcImageLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ClearValue"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(clearValue: root.prosper.ClearValue,clearColor: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["SetDepthStencil"] = {
						type = "method",
						description = [[]],
						args = "(clearValue: root.prosper.ClearValue,depth: ,stencil: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ImageCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["FLAG_SPARSE_ALIASED_RESIDENCY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_SPARSE_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_DONT_ALLOCATE_MEMORY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_ALLOCATE_DISCRETE_MEMORY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NORMAL_MAP_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_CONCURRENT_SHARING_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_CUBEMAP_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_SRGB_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_FULL_MIPMAP_CHAIN_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["format"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["usageFlags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["memoryFeatures"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["queueFamilyMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["postCreateLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layers"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["samples"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tiling"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["type"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TimerQuery"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.TimerQuery)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.TimerQuery,1: root.prosper.TimerQuery)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hTimerQuery: root.prosper.TimerQuery)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ImageSubresourceLayers"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["baseArrayLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aspectMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipLevel"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Event"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Event)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Event,1: root.prosper.Event)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hEvent: root.prosper.Event)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SubresourceLayout"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["depthPitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["offset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["size"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["arrayPitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["rowPitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageSubresourceRange"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					},
					["baseArrayLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["levelCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseMipLevel"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderPass"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.RenderPass)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.RenderPass,1: root.prosper.RenderPass)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hRenderPass: root.prosper.RenderPass)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Sampler"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMaxAnisotropy"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetCompareEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetCompareOperation"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetMinLod"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetBorderColor"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxLod"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Sampler,1: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["SetMinFilter"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,minFilter: )",
						returns = "()",
						valuetype = ""
					},
					["SetMipmapMode"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,mipmapMode: )",
						returns = "()",
						valuetype = ""
					},
					["SetAddressModeU"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,addressModeU: )",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["SetAddressModeW"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,addressModeW: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxAnisotropy"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,maxAnisotropy: )",
						returns = "()",
						valuetype = ""
					},
					["SetCompareEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,compareEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetCompareOperation"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,compareOp: )",
						returns = "()",
						valuetype = ""
					},
					["GetMipLodBias"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["SetMinLod"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,minLod: )",
						returns = "()",
						valuetype = ""
					},
					["SetAddressModeV"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,addressModeV: )",
						returns = "()",
						valuetype = ""
					},
					["GetMagFilter"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetMipmapMode"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["SetMaxLod"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,maxLod: )",
						returns = "()",
						valuetype = ""
					},
					["SetBorderColor"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,borderColor: )",
						returns = "()",
						valuetype = ""
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(smp: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetAddressModeU"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(smp: root.prosper.Sampler,name: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["SetMagFilter"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler,magFilter: )",
						returns = "()",
						valuetype = ""
					},
					["GetMinFilter"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetAddressModeV"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetAddressModeW"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					},
					["GetAnisotropyEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hSampler: root.prosper.Sampler)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RenderPassCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddSubPass"] = {
						type = "method",
						description = [[]],
						args = "(createInfo: root.prosper.RenderPassCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["AddSubPassColorAttachment"] = {
						type = "method",
						description = [[]],
						args = "(createInfo: root.prosper.RenderPassCreateInfo,subPassId: ,colorAttId: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetSubPassDepthStencilAttachmentEnabled"] = {
						type = "method",
						description = [[]],
						args = "(createInfo: root.prosper.RenderPassCreateInfo,subPassId: ,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["AddSubPassDependency"] = {
						type = "method",
						description = [[]],
						args = "(createInfo: root.prosper.RenderPassCreateInfo,subPassId: ,sourceSubPassId: ,destinationSubPassId: ,sourceStageMask: ,destinationStageMask: ,sourceAccessMask: ,destinationAccessMask: )",
						returns = "()",
						valuetype = ""
					},
					["AddAttachment"] = {
						type = "method",
						description = [[]],
						args = "(createInfo: root.prosper.RenderPassCreateInfo,format: ,initialLayout: ,finalLayout: ,loadOp: ,storeOp: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BufferImageCopyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetWidth"] = {
						type = "method",
						description = [[]],
						args = "(copyInfo: root.prosper.BufferImageCopyInfo,width: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(copyInfo: root.prosper.BufferImageCopyInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(copyInfo: root.prosper.BufferImageCopyInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetHeight"] = {
						type = "method",
						description = [[]],
						args = "(copyInfo: root.prosper.BufferImageCopyInfo,height: )",
						returns = "()",
						valuetype = ""
					},
					["baseArrayLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstImageLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aspectMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipLevel"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bufferOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ClearImageInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["subresourceRange"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Window"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetStickyMouseButtonsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetCursorPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vector2)",
						valuetype = "Vector2"
					},
					["SetCursor"] = {
						type = "method",
						description = [[]],
						args = "(cursor: )",
						returns = "()",
						valuetype = ""
					},
					["GetFramebufferSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vector2i)",
						valuetype = "Vector2i"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vector2i)",
						valuetype = "Vector2i"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["GetKeyState"] = {
						type = "method",
						description = [[]],
						args = "(key: )",
						returns = "()",
						valuetype = ""
					},
					["Close"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["IsResizable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetSize"] = {
						type = "method",
						description = [[]],
						args = "(size: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["IsFocused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetWindowTitle"] = {
						type = "method",
						description = [[]],
						args = "(title: )",
						returns = "()",
						valuetype = ""
					},
					["ShouldClose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["IsDecorated"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetShouldClose"] = {
						type = "method",
						description = [[]],
						args = "(shouldClose: )",
						returns = "()",
						valuetype = ""
					},
					["GetClipboardString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetClipboardString"] = {
						type = "method",
						description = [[]],
						args = "(str: )",
						returns = "()",
						valuetype = ""
					},
					["SetCursorPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["SetStickyKeysEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetStickyKeysEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetStickyMouseButtonsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: )",
						returns = "()",
						valuetype = ""
					},
					["SwapBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["IsVisible"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetFrameSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vector4i)",
						valuetype = "Vector4i"
					},
					["Iconify"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Restore"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Show"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Hide"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ClearCursorPosOverride"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetCursorPosOverride"] = {
						type = "method",
						description = [[]],
						args = "(pos: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["MakeContextCurrent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["IsIconified"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["IsFloating"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ClearCursor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.math.Vector2i)",
						valuetype = "Vector2i"
					},
					["SetCursorInputMode"] = {
						type = "method",
						description = [[]],
						args = "(cursorMode: )",
						returns = "()",
						valuetype = ""
					},
					["GetCursorInputMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetCloseCallback"] = {
						type = "method",
						description = [[]],
						args = "(window: root.prosper.Window,oOnClose: )",
						returns = "()",
						valuetype = ""
					},
					["GetMouseButtonState"] = {
						type = "method",
						description = [[]],
						args = "(mouseButton: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ImageView"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetBaseLayer"] = {
						type = "method",
						description = [[]],
						args = "(hImgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["GetAspectMask"] = {
						type = "method",
						description = [[]],
						args = "(hImgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["GetLayerCount"] = {
						type = "method",
						description = [[]],
						args = "(hImgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["GetImageFormat"] = {
						type = "method",
						description = [[]],
						args = "(hImgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(hImgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(imgView: root.prosper.ImageView,name: )",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hImgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.ImageView,1: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(imgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["GetSwizzleArray"] = {
						type = "method",
						description = [[]],
						args = "(hImgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["GetMipmapCount"] = {
						type = "method",
						description = [[]],
						args = "(hImgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["GetBaseMipmapLevel"] = {
						type = "method",
						description = [[]],
						args = "(hImgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SamplerCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["mipLodBias"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["addressModeW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxAnisotropy"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minFilter"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["compareEnable"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["compareOp"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxLod"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["magFilter"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["borderColor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minLod"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipmapMode"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["addressModeU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["addressModeV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Framebuffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hFramebuffer: root.prosper.Framebuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(framebuffer: root.prosper.Framebuffer)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Framebuffer,1: root.prosper.Framebuffer)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Framebuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(framebuffer: root.prosper.Framebuffer)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RenderTarget"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFramebuffer"] = {
						type = "method",
						description = [[]],
						args = "(hRt: root.prosper.RenderTarget)",
						returns = "()",
						valuetype = ""
					},
					["GetTexture"] = {
						type = "method",
						description = [[]],
						args = "(rt: root.prosper.RenderTarget)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(hRt: root.prosper.RenderTarget)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.RenderTarget)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.RenderTarget,1: root.prosper.RenderTarget)",
						returns = "()",
						valuetype = ""
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(rt: root.prosper.RenderTarget,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(hRt: root.prosper.RenderTarget)",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(hRt: root.prosper.RenderTarget)",
						returns = "()",
						valuetype = ""
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "(hRt: root.prosper.RenderTarget)",
						returns = "()",
						valuetype = ""
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(rt: root.prosper.RenderTarget)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["CommandBuffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["RecordBindIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,indexBuffer: root.prosper.Buffer,indexType: )",
						returns = "()",
						valuetype = ""
					},
					["RecordCopyBufferToImage"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,bufSrc: root.prosper.Buffer,imgDst: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["RecordCopyBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,bufSrc: root.prosper.Buffer,bufDst: root.prosper.Buffer,copyInfo: root.prosper.BufferCopyInfo)",
						returns = "()",
						valuetype = ""
					},
					["RecordBlitTexture"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,texSrc: root.prosper.Texture,imgDst: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["RecordDraw"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,vertexCount: )",
						returns = "()",
						valuetype = ""
					},
					["RecordClearImage"] = {
						type = "method",
						description = [[]],
						args = "(cmdBuffer: root.prosper.CommandBuffer,img: root.prosper.Image,depth: )",
						returns = "()",
						valuetype = ""
					},
					["RecordCopyImage"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,imgSrc: root.prosper.Image,imgDst: root.prosper.Image,copyInfo: root.prosper.ImageCopyInfo)",
						returns = "()",
						valuetype = ""
					},
					["RecordDrawIndexed"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,indexCount: )",
						returns = "()",
						valuetype = ""
					},
					["RecordClearAttachment"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,img: root.prosper.Image,clearDepth: )",
						returns = "()",
						valuetype = ""
					},
					["RecordBlitImage"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,imgSrc: root.prosper.Image,imgDst: root.prosper.Image,blitInfo: root.prosper.BlitInfo)",
						returns = "()",
						valuetype = ""
					},
					["RecordUpdateBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,buf: root.prosper.Buffer,offset: ,ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["RecordSetStencilWriteMask"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,faceMask: ,stencilWriteMask: )",
						returns = "()",
						valuetype = ""
					},
					["RecordResolveImage"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,imgSrc: root.prosper.Image,imgDst: root.prosper.Image)",
						returns = "()",
						valuetype = ""
					},
					["RecordGenerateMipmaps"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,img: root.prosper.Image,currentLayout: ,srcAccessMask: ,srcStage: )",
						returns = "()",
						valuetype = ""
					},
					["RecordPipelineBarrier"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,barrierInfo: root.prosper.PipelineBarrierInfo)",
						returns = "()",
						valuetype = ""
					},
					["RecordImageBarrier"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,img: root.prosper.Image,srcStageMask: ,dstStageMask: ,oldLayout: ,newLayout: ,srcAccessMask: ,dstAccessMask: )",
						returns = "()",
						valuetype = ""
					},
					["RecordBufferBarrier"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,buf: root.prosper.Buffer,srcStageMask: ,dstStageMask: ,srcAccessMask: ,dstAccessMask: )",
						returns = "()",
						valuetype = ""
					},
					["RecordSetViewport"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,width: ,height: ,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["RecordSetScissor"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,width: ,height: ,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.CommandBuffer,1: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["RecordEndRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["StopRecording"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["RecordCopyImageToBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,imgSrc: root.prosper.Image,srcImageLayout: ,bufDst: root.prosper.Buffer,copyInfo: root.prosper.BufferImageCopyInfo)",
						returns = "()",
						valuetype = ""
					},
					["RecordDrawIndexedIndirect"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,buffer: root.prosper.Buffer,offset: ,drawCount: ,stride: )",
						returns = "()",
						valuetype = ""
					},
					["RecordDrawIndirect"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,buffer: root.prosper.Buffer,offset: ,drawCount: ,stride: )",
						returns = "()",
						valuetype = ""
					},
					["RecordFillBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,buffer: root.prosper.Buffer,offset: ,size: ,data: )",
						returns = "()",
						valuetype = ""
					},
					["RecordSetBlendConstants"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,blendConstants: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["RecordSetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,depthBiasConstantFactor: ,depthBiasClamp: ,slopeScaledDepthBias: )",
						returns = "()",
						valuetype = ""
					},
					["RecordSetDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,minDepthBounds: ,maxDepthBounds: )",
						returns = "()",
						valuetype = ""
					},
					["RecordBeginRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,rpInfo: root.prosper.RenderPassInfo)",
						returns = "()",
						valuetype = ""
					},
					["RecordSetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,lineWidth: )",
						returns = "()",
						valuetype = ""
					},
					["RecordSetStencilCompareMask"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,faceMask: ,stencilCompareMask: )",
						returns = "()",
						valuetype = ""
					},
					["RecordSetStencilReference"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,faceMask: ,stencilReference: )",
						returns = "()",
						valuetype = ""
					},
					["RecordDrawGradient"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,rt: root.prosper.RenderTarget,dir: root.math.Vector2,lnodes: )",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["StartRecording"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,oneTimeSubmit: ,simultaneousUseAllowed: )",
						returns = "()",
						valuetype = ""
					},
					["Flush"] = {
						type = "method",
						description = [[]],
						args = "(cb: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(cb: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(cb: root.prosper.CommandBuffer,name: )",
						returns = "()",
						valuetype = ""
					},
					["RecordBindVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,graphics: root.shader.Graphics,vertexBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["RecordBindVertexBuffers"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: root.prosper.CommandBuffer,graphics: root.shader.Graphics,vertexBuffers: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Buffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(buf: root.prosper.Buffer,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetUsageFlags"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Buffer,1: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["ReadMemory"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["GetBaseIndex"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["WriteMemory"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer,offset: ,ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(buf: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["GetCreateInfo"] = {
						type = "method",
						description = [[]],
						args = "(buf: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["GetStartOffset"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["SetPermanentlyMapped"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer,b: ,mapFlags: )",
						returns = "()",
						valuetype = ""
					},
					["MapMemory"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer,mapFlags: )",
						returns = "()",
						valuetype = ""
					},
					["UnmapMemory"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["SwapBuffer"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["DescriptorSet"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetBindingCount"] = {
						type = "method",
						description = [[]],
						args = "(hDescSet: root.prosper.DescriptorSet)",
						returns = "()",
						valuetype = ""
					},
					["SetBindingTexture"] = {
						type = "method",
						description = [[]],
						args = "(hDescSet: root.prosper.DescriptorSet,bindingIdx: ,texture: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.DescriptorSet)",
						returns = "()",
						valuetype = ""
					},
					["SetBindingArrayTexture"] = {
						type = "method",
						description = [[]],
						args = "(hDescSet: root.prosper.DescriptorSet,bindingIdx: ,texture: root.prosper.Texture,arrayIdx: )",
						returns = "()",
						valuetype = ""
					},
					["SetBindingUniformBufferDynamic"] = {
						type = "method",
						description = [[]],
						args = "(hDescSet: root.prosper.DescriptorSet,bindingIdx: ,buffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["SetBindingStorageBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hDescSet: root.prosper.DescriptorSet,bindingIdx: ,buffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.prosper.DescriptorSet,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(ds: root.prosper.DescriptorSet)",
						returns = "()",
						valuetype = ""
					},
					["SetBindingUniformBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hDescSet: root.prosper.DescriptorSet,bindingIdx: ,buffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.DescriptorSet,1: root.prosper.DescriptorSet)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TimestampQuery"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.TimestampQuery)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.TimestampQuery,1: root.prosper.TimestampQuery)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hTimestampQuery: root.prosper.TimestampQuery)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RenderPassInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(rpInfo: root.prosper.RenderPassInfo,rp: root.prosper.RenderPass)",
						returns = "()",
						valuetype = ""
					},
					["SetClearValues"] = {
						type = "method",
						description = [[]],
						args = "(rpInfo: root.prosper.RenderPassInfo,tClearValues: )",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["SetLayer"] = {
						type = "method",
						description = [[]],
						args = "(rpInfo: root.prosper.RenderPassInfo,layerId: )",
						returns = "()",
						valuetype = ""
					},
					["AddClearValue"] = {
						type = "method",
						description = [[]],
						args = "(rpInfo: root.prosper.RenderPassInfo,clearValue: root.prosper.ClearValue)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.prosper.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["SetVertexWeightBuffer"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.prosper.Mesh,hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["GetAlphaBuffer"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.prosper.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Mesh,1: root.prosper.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["SetVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.prosper.Mesh,hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["GetVertexWeightBuffer"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.prosper.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["GetIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.prosper.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["ClearBuffers"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.prosper.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["SetIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.prosper.Mesh,hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["SetAlphaBuffer"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.prosper.Mesh,hBuffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TextureCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["FLAG_CREATE_IMAGE_VIEW_FOR_EACH_LAYER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_RESOLVABLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["imageView"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["sampler"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Texture"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.prosper.Texture,1: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(tex: root.prosper.Texture,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetImageView"] = {
						type = "method",
						description = [[]],
						args = "(tex: root.prosper.Texture,imgView: root.prosper.ImageView)",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(hTex: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["GetImageView"] = {
						type = "method",
						description = [[]],
						args = "(hTex: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["GetSampler"] = {
						type = "method",
						description = [[]],
						args = "(hTex: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "(hTex: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(hTex: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(tex: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hTex: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					},
					["GetImage"] = {
						type = "method",
						description = [[]],
						args = "(hTex: root.prosper.Texture)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BlitInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["dstSubresourceLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcSubresourceLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageViewCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["baseLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["levelCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseMipmap"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleRed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleGreen"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleBlue"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleAlpha"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipmapLevels"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["format"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderTargetCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["useLayerFramebuffers"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BufferCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["FLAG_SPARSE_ALIASED_RESIDENCY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_SPARSE_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_CONCURRENT_SHARING_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_DONT_ALLOCATE_MEMORY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["size"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["queueFamilyMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["memoryFeatures"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["usageFlags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["Model"] = {
		type = "lib",
		description = [[]],
		childs = {
			["VertexAnimation"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMeshAnimations"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.VertexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(vertAnim: root.Model.VertexAnimation,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.VertexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["MeshAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(meshVertAnim: root.Model.VertexAnimation.MeshAnimation,rot: root.math.QuaternionInternal)",
								returns = "()",
								valuetype = ""
							},
							["GetMesh"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.Model.VertexAnimation.MeshAnimation)",
								returns = "()",
								valuetype = ""
							},
							["GetFrames"] = {
								type = "method",
								description = [[]],
								args = "(anim: root.Model.VertexAnimation.MeshAnimation)",
								returns = "()",
								valuetype = ""
							},
							["Frame"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetDeltaValue"] = {
										type = "method",
										description = [[]],
										args = "(meshVertFrame: root.Model.VertexAnimation.MeshAnimation.Frame,vertId: )",
										returns = "()",
										valuetype = ""
									},
									["SetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.Model.VertexAnimation.MeshAnimation.Frame,numVerts: )",
										returns = "()",
										valuetype = ""
									},
									["GetFlags"] = {
										type = "method",
										description = [[]],
										args = "(meshVertFrame: root.Model.VertexAnimation.MeshAnimation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["GetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.Model.VertexAnimation.MeshAnimation.Frame,vertIdx: )",
										returns = "()",
										valuetype = ""
									},
									["SetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.Model.VertexAnimation.MeshAnimation.Frame,vertIdx: ,pos: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["SetFlags"] = {
										type = "method",
										description = [[]],
										args = "(meshVertFrame: root.Model.VertexAnimation.MeshAnimation.Frame,flags: )",
										returns = "()",
										valuetype = ""
									},
									["Rotate"] = {
										type = "method",
										description = [[]],
										args = "(meshVertFrame: root.Model.VertexAnimation.MeshAnimation.Frame,rot: root.math.QuaternionInternal)",
										returns = "()",
										valuetype = ""
									},
									["SetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.Model.VertexAnimation.MeshAnimation.Frame,vertIdx: ,n: root.vector.Vector)",
										returns = "()",
										valuetype = ""
									},
									["GetVertices"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.Model.VertexAnimation.MeshAnimation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["GetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "(meshVertFrame: root.Model.VertexAnimation.MeshAnimation.Frame)",
										returns = "()",
										valuetype = ""
									},
									["GetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(frame: root.Model.VertexAnimation.MeshAnimation.Frame,vertIdx: )",
										returns = "()",
										valuetype = ""
									},
									["SetDeltaValue"] = {
										type = "method",
										description = [[]],
										args = "(meshVertFrame: root.Model.VertexAnimation.MeshAnimation.Frame,vertId: ,value: )",
										returns = "()",
										valuetype = ""
									},
									["FLAG_BIT_HAS_DELTA_VALUES"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["FLAG_NONE"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									}
								}
							},

						}
					},

				}
			},
			["MeshGroup"] = {
				type = "class",
				description = [[]],
				childs = {
					["ClearMeshes"] = {
						type = "method",
						description = [[]],
						args = "(meshGroup: root.Model.MeshGroup)",
						returns = "()",
						valuetype = ""
					},
					["SetMeshes"] = {
						type = "method",
						description = [[]],
						args = "(meshGroup: root.Model.MeshGroup,tMeshes: )",
						returns = "()",
						valuetype = ""
					},
					["GetMesh"] = {
						type = "method",
						description = [[]],
						args = "(meshGroup: root.Model.MeshGroup,index: )",
						returns = "()",
						valuetype = ""
					},
					["GetMeshes"] = {
						type = "method",
						description = [[]],
						args = "(meshGroup: root.Model.MeshGroup)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(meshGroup: root.Model.MeshGroup)",
						returns = "()",
						valuetype = ""
					},
					["GetMeshCount"] = {
						type = "method",
						description = [[]],
						args = "(meshGroup: root.Model.MeshGroup,index: )",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.Model.MeshGroup,1: root.Model.MeshGroup)",
						returns = "()",
						valuetype = ""
					},
					["AddMesh"] = {
						type = "method",
						description = [[]],
						args = "(meshGroup: root.Model.MeshGroup,mesh: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetReferenceId"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["AddSubMesh"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.Mesh,mesh: root.Model.Mesh.Sub)",
						returns = "()",
						valuetype = ""
					},
					["RemoveSubMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh,i: )",
						returns = "()",
						valuetype = ""
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.Mesh,flags: )",
						returns = "()",
						valuetype = ""
					},
					["GetTriangleVertexCount"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["Centralize"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["GetCenter"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["SetSubMeshes"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh,tSubMeshes: )",
						returns = "()",
						valuetype = ""
					},
					["GetTriangleCount"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["GetSubMeshes"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["SetCenter"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.Mesh,center: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["ClearSubMeshes"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh,rotation: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.Model.Mesh,1: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["GetSubMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh,index: )",
						returns = "()",
						valuetype = ""
					},
					["GetSubMeshCount"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["GetVertexCount"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh)",
						returns = "()",
						valuetype = ""
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.Mesh,translation: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.Mesh,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["Sub"] = {
						type = "class",
						description = [[]],
						childs = {
							["NormalizeUVCoordinates"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["AddLine"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,idx0: ,idx1: )",
								returns = "()",
								valuetype = ""
							},
							["ApplyUVMapping"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,nu: root.vector.Vector,nv: root.vector.Vector,w: ,h: ,ou: ,ov: ,su: ,sv: )",
								returns = "()",
								valuetype = ""
							},
							["SetVertexTangent"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,idx: ,t: root.math.Vector4)",
								returns = "()",
								valuetype = ""
							},
							["GetVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,rotation: root.math.QuaternionInternal)",
								returns = "()",
								valuetype = ""
							},
							["AddPoint"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,idx: )",
								returns = "()",
								valuetype = ""
							},
							["GetReferenceId"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["GetNormals"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["SetVertexWeight"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: ,weight: root.Model.VertexWeight)",
								returns = "()",
								valuetype = ""
							},
							["GetGeometryType"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["SetGeometryType"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,geometryType: )",
								returns = "()",
								valuetype = ""
							},
							["ClearAlphas"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["ClearUVSets"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["HasUVSet"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,uvSetName: )",
								returns = "()",
								valuetype = ""
							},
							["ClearVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["GetVertex"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: )",
								returns = "()",
								valuetype = ""
							},
							["Update"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["AddVertex"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,v: root.Model.Vertex)",
								returns = "()",
								valuetype = ""
							},
							["ClearExtendedVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["SetVertexNormal"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: ,normal: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["SetVertexUV"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: ,uv: root.math.Vector2)",
								returns = "()",
								valuetype = ""
							},
							["GetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["AddTriangle"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,a: ,b: ,c: )",
								returns = "()",
								valuetype = ""
							},
							["GetVertices"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["GetUVSetNames"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["GetTriangles"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["ClipAgainstPlane"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,n: root.vector.Vector,d: )",
								returns = "()",
								valuetype = ""
							},
							["ReserveVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,numVerts: )",
								returns = "()",
								valuetype = ""
							},
							["GenerateNormals"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["ReserveTriangles"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,numTris: )",
								returns = "()",
								valuetype = ""
							},
							["GetTriangleVertexCount"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["ClearVertices"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["ClearTriangles"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["ReserveVertices"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,numVerts: )",
								returns = "()",
								valuetype = ""
							},
							["SetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,n: )",
								returns = "()",
								valuetype = ""
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(0: root.Model.Mesh.Sub,1: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["ClearVertexData"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["SetVertexPosition"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: ,pos: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["GetVertexNormal"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: )",
								returns = "()",
								valuetype = ""
							},
							["GetPose"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["Transform"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,pose: root.phys.ScaledTransform)",
								returns = "()",
								valuetype = ""
							},
							["SetSkinTextureIndex"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,texture: )",
								returns = "()",
								valuetype = ""
							},
							["SetVertexAlpha"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: ,alpha: root.math.Vector2)",
								returns = "()",
								valuetype = ""
							},
							["SetPose"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,pose: root.phys.ScaledTransform)",
								returns = "()",
								valuetype = ""
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,translation: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["GetVertexAlpha"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: )",
								returns = "()",
								valuetype = ""
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "(0: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["Scale"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,scale: root.vector.Vector)",
								returns = "()",
								valuetype = ""
							},
							["GetTriangleCount"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["GetCenter"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "(root.Model.Mesh.Sub)",
								valuetype = "Sub"
							},
							["FlipTriangleWindingOrder"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["GetSkinTextureIndex"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["SetIndexCount"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,n: )",
								returns = "()",
								valuetype = ""
							},
							["AddUVSet"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,uvSetName: )",
								returns = "()",
								valuetype = ""
							},
							["GetUVs"] = {
								type = "method",
								description = [[]],
								args = "(mesh: root.Model.Mesh.Sub,uvSetName: )",
								returns = "()",
								valuetype = ""
							},
							["GetBounds"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["SetVertex"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: ,v: root.Model.Vertex)",
								returns = "()",
								valuetype = ""
							},
							["GetVertexUV"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: )",
								returns = "()",
								valuetype = ""
							},
							["GetVertexPosition"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: )",
								returns = "()",
								valuetype = ""
							},
							["GetVertexWeight"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub,idx: )",
								returns = "()",
								valuetype = ""
							},
							["Optimize"] = {
								type = "method",
								description = [[]],
								args = "(mdl: root.Model.Mesh.Sub)",
								returns = "()",
								valuetype = ""
							},
							["GEOMETRY_TYPE_LINES"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["GEOMETRY_TYPE_POINTS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["GEOMETRY_TYPE_TRIANGLES"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["Flex"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(flex: root.Model.Flex)",
						returns = "()",
						valuetype = ""
					},
					["SetVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(flex: root.Model.Flex,anim: root.Model.VertexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["GetOperations"] = {
						type = "method",
						description = [[]],
						args = "(flex: root.Model.Flex)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(flex: root.Model.Flex)",
						returns = "()",
						valuetype = ""
					},
					["GetFrameIndex"] = {
						type = "method",
						description = [[]],
						args = "(flex: root.Model.Flex)",
						returns = "()",
						valuetype = ""
					},
					["OP_TWO_WAY0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_TWO_WAY1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DME_LOWER_EYELID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DME_UPPER_EYELID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_ADD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_CONST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DOMINATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DIV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_CLOSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_COMBO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_EXP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_COMMA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_MIN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_FETCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_FETCH2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_MAX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_MUL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_NEG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_OPEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_N_WAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_SUB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["Operation"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "(flex: root.Model.Flex)",
								returns = "()",
								valuetype = ""
							},
							["index"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["value"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["type"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["CollisionMesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["Centralize"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["SetTriangles"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,tTriangles: )",
						returns = "()",
						valuetype = ""
					},
					["SetBoneParentId"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetVertexCount"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetVertices"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["AddTriangle"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,idx0: ,idx1: ,idx2: )",
						returns = "()",
						valuetype = ""
					},
					["SetSoftBodyTriangles"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,o: )",
						returns = "()",
						valuetype = ""
					},
					["GetTriangles"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["SetConvex"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,bConvex: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneParentId"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetShape"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,origin: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["SetSurfaceMaterialId"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,surfaceMaterialId: )",
						returns = "()",
						valuetype = ""
					},
					["AddVertex"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,v: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["ClipAgainstPlane"] = {
						type = "method",
						description = [[]],
						args = "(mdl: root.Model.CollisionMesh,n: root.vector.Vector,d: ,clippedMeshA: root.Model.CollisionMesh,clippedMeshB: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["ClearSoftBodyAnchors"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetVolume"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["ClearVertices"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["AddSoftBodyAnchor"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,vertIdx: ,boneIdx: )",
						returns = "()",
						valuetype = ""
					},
					["SetVolume"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,volume: )",
						returns = "()",
						valuetype = ""
					},
					["ClearTriangles"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["SetVertices"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,tVertices: )",
						returns = "()",
						valuetype = ""
					},
					["SetSoftBody"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,bSoftBody: )",
						returns = "()",
						valuetype = ""
					},
					["IsSoftBody"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,t: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftBodyMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["SetSoftBodyMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,subMesh: )",
						returns = "()",
						valuetype = ""
					},
					["IsConvex"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftBodyInfo"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftBodyTriangles"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetAABB"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetSurfaceMaterialId"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["GetSurfaceMaterialIds"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["IntersectAABB"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,min: root.vector.Vector,max: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["SetAABB"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,min: root.vector.Vector,max: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetSoftBodyAnchors"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh)",
						returns = "()",
						valuetype = ""
					},
					["RemoveSoftBodyAnchor"] = {
						type = "method",
						description = [[]],
						args = "(mesh: root.Model.CollisionMesh,anchorIdx: )",
						returns = "()",
						valuetype = ""
					},
					["FSOFTBODY_ANCHOR_DISABLE_COLLISIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FSOFTBODY_ANCHOR_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FSOFTBODY_ANCHOR_RIGID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["VertexWeight"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.Model.VertexWeight)",
						valuetype = "VertexWeight"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.Model.VertexWeight)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.Model.VertexWeight,1: root.Model.VertexWeight)",
						returns = "()",
						valuetype = ""
					},
					["boneIds"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["weights"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Eyeball"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetLowerLidFlexIndex"] = {
						type = "method",
						description = [[]],
						args = "(eyeball: root.Model.Eyeball)",
						returns = "()",
						valuetype = ""
					},
					["GetLowerLidFlexAngles"] = {
						type = "method",
						description = [[]],
						args = "(eyeball: root.Model.Eyeball)",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetUpperLidFlexIndex"] = {
						type = "method",
						description = [[]],
						args = "(eyeball: root.Model.Eyeball)",
						returns = "()",
						valuetype = ""
					},
					["GetUpperLidFlexIndices"] = {
						type = "method",
						description = [[]],
						args = "(eyeball: root.Model.Eyeball)",
						returns = "()",
						valuetype = ""
					},
					["GetUpperLidFlexAngles"] = {
						type = "method",
						description = [[]],
						args = "(eyeball: root.Model.Eyeball)",
						returns = "()",
						valuetype = ""
					},
					["GetLowerLidFlexIndices"] = {
						type = "method",
						description = [[]],
						args = "(eyeball: root.Model.Eyeball)",
						returns = "()",
						valuetype = ""
					},
					["radius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["name"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["origin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["boneIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["zOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["forward"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["up"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["irisMaterialIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxDilationFactor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["irisUvRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["irisScale"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Animation"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetBoneList"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["GetActivity"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,)",
						returns = "()",
						valuetype = ""
					},
					["SetFadeOutTime"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,t: )",
						returns = "()",
						valuetype = ""
					},
					["SetFadeInTime"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,t: )",
						returns = "()",
						valuetype = ""
					},
					["AddBoneId"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveEvent"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,frameId: ,idx: )",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,skeleton: root.Model.Skeleton,rot: root.math.QuaternionInternal)",
						returns = "()",
						valuetype = ""
					},
					["GetFadeOutTime"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["GetFrame"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,ID: )",
						returns = "()",
						valuetype = ""
					},
					["GetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["CalcRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,mdl: )",
						returns = "()",
						valuetype = ""
					},
					["GetActivityName"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["Reverse"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["SetBoneWeight"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,boneId: ,t: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneId"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,idx: )",
						returns = "()",
						valuetype = ""
					},
					["SetActivity"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,act: )",
						returns = "()",
						valuetype = ""
					},
					["GetActivityWeight"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["SetActivityWeight"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,weight: )",
						returns = "()",
						valuetype = ""
					},
					["GetFPS"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["SetFPS"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,fps: )",
						returns = "()",
						valuetype = ""
					},
					["SetFlags"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,flags: )",
						returns = "()",
						valuetype = ""
					},
					["AddFlags"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,flags: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveFlags"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,flags: )",
						returns = "()",
						valuetype = ""
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["AddEvent"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,frameId: ,eventId: ,args: )",
						returns = "()",
						valuetype = ""
					},
					["GetEvents"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["GetEventCount"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["GetFadeInTime"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["SetEventData"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,frameId: ,idx: ,type: ,oArgs: )",
						returns = "()",
						valuetype = ""
					},
					["SetEventType"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,frameId: ,idx: ,type: )",
						returns = "()",
						valuetype = ""
					},
					["SetEventArgs"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,frameId: ,idx: ,oArgs: )",
						returns = "()",
						valuetype = ""
					},
					["ClearFrames"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["SetBoneList"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,o: )",
						returns = "()",
						valuetype = ""
					},
					["GetFrames"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["GetFrameCount"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneWeight"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["AddFrame"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,frame: root.Animation.Frame)",
						returns = "()",
						valuetype = ""
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,scale: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneWeights"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation)",
						returns = "()",
						valuetype = ""
					},
					["SaveLegacy"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,assetData: root.udm.AssetData)",
						returns = "()",
						valuetype = ""
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(anim: root.Model.Animation,skeleton: root.Model.Skeleton,t: root.vector.Vector)",
						returns = "()",
						valuetype = ""
					},
					["FLAG_MOVEZ"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_AUTOPLAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_GESTURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_LOOP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_MOVEX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NOREPEAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vertex"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetBiTangent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.vector.Vector)",
						valuetype = "Vector"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.Model.Vertex,1: root.Model.Vertex)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(root.Model.Vertex)",
						valuetype = "Vertex"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.Model.Vertex)",
						returns = "()",
						valuetype = ""
					},
					["uv"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normal"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tangent"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Skeleton"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddBone"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetBones"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					},
					["ClearBones"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					},
					["MakeRootBone"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton,bone: root.Model.Skeleton.Bone)",
						returns = "()",
						valuetype = ""
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoneHierarchy"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					},
					["IsRootBone"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton,skeletonOther: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					},
					["GetBone"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton,boneId: )",
						returns = "()",
						valuetype = ""
					},
					["GetRootBones"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: root.Model.Skeleton)",
						returns = "()",
						valuetype = ""
					},
					["Bone"] = {
						type = "class",
						description = [[]],
						childs = {
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "(0: root.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["GetParent"] = {
								type = "method",
								description = [[]],
								args = "(bone: root.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["IsDescendantOf"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "(bone: root.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["ClearParent"] = {
								type = "method",
								description = [[]],
								args = "(bone: root.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["GetID"] = {
								type = "method",
								description = [[]],
								args = "(bone: root.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["GetChildren"] = {
								type = "method",
								description = [[]],
								args = "(bone: root.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["IsAncestorOf"] = {
								type = "method",
								description = [[]],
								args = "(arg1: root.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["SetParent"] = {
								type = "method",
								description = [[]],
								args = "(bone: root.Model.Skeleton.Bone,parent: root.Model.Skeleton.Bone)",
								returns = "()",
								valuetype = ""
							},
							["SetName"] = {
								type = "method",
								description = [[]],
								args = "(bone: root.Model.Skeleton.Bone,name: )",
								returns = "()",
								valuetype = ""
							}
						}
					},

				}
			},
			["FlexAnimation"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetFlexControllerValue"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation,frameId: ,id: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["GetFrames"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["GetFps"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["SetFlexControllerIds"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation,tIds: )",
						returns = "()",
						valuetype = ""
					},
					["SetFps"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation,fps: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexControllerIds"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["GetFrame"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation,frameId: )",
						returns = "(root.Model.FlexAnimation.Frame)",
						valuetype = "Frame"
					},
					["GetFrameCount"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["AddFlexControllerId"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation,id: )",
						returns = "()",
						valuetype = ""
					},
					["GetFlexControllerCount"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["SaveLegacy"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation,f: root.file.File)",
						returns = "()",
						valuetype = ""
					},
					["LookupLocalFlexControllerIndex"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation,id: )",
						returns = "()",
						valuetype = ""
					},
					["AddFrame"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation)",
						returns = "(root.Model.FlexAnimation.Frame)",
						valuetype = "Frame"
					},
					["ClearFrames"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation)",
						returns = "()",
						valuetype = ""
					},
					["RemoveFrame"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation,idx: )",
						returns = "()",
						valuetype = ""
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(flexAnim: root.Model.FlexAnimation,assetData: root.udm.AssetData)",
						returns = "()",
						valuetype = ""
					},
					["Frame"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetFlexControllerValue"] = {
								type = "method",
								description = [[]],
								args = "(flexAnimFrame: root.Model.FlexAnimation.Frame,id: ,val: )",
								returns = "()",
								valuetype = ""
							},
							["GetFlexControllerValues"] = {
								type = "method",
								description = [[]],
								args = "(flexAnimFrame: root.Model.FlexAnimation.Frame)",
								returns = "()",
								valuetype = ""
							},
							["SetFlexControllerValues"] = {
								type = "method",
								description = [[]],
								args = "(flexAnimFrame: root.Model.FlexAnimation.Frame,t: )",
								returns = "()",
								valuetype = ""
							},
							["GetFlexControllerValue"] = {
								type = "method",
								description = [[]],
								args = "(flexAnimFrame: root.Model.FlexAnimation.Frame,id: )",
								returns = "()",
								valuetype = ""
							},
							["GetFlexControllerValueCount"] = {
								type = "method",
								description = [[]],
								args = "(flexAnimFrame: root.Model.FlexAnimation.Frame)",
								returns = "()",
								valuetype = ""
							}
						}
					},

				}
			},
			["Joint"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint)",
						returns = "()",
						valuetype = ""
					},
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint,type: )",
						returns = "()",
						valuetype = ""
					},
					["SetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint,key: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionMeshId"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint,meshId: )",
						returns = "()",
						valuetype = ""
					},
					["SetParentCollisionMeshId"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint,meshId: )",
						returns = "()",
						valuetype = ""
					},
					["SetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint,keyValues: )",
						returns = "()",
						valuetype = ""
					},
					["GetArgs"] = {
						type = "method",
						description = [[]],
						args = "(jointInfo: root.Model.Joint)",
						returns = "()",
						valuetype = ""
					},
					["SetArgs"] = {
						type = "method",
						description = [[]],
						args = "(jointInfo: root.Model.Joint,t: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint,key: )",
						returns = "()",
						valuetype = ""
					},
					["SetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint)",
						returns = "()",
						valuetype = ""
					},
					["GetChildBoneId"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint)",
						returns = "()",
						valuetype = ""
					},
					["GetParentBoneId"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint)",
						returns = "()",
						valuetype = ""
					},
					["GetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(joint: root.Model.Joint)",
						returns = "()",
						valuetype = ""
					},
					["TYPE_BALLSOCKET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FIXED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_CONETWIST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_DOF"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_HINGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SLIDER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["collide"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["vrp"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Version"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["ToString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vrp.Version)",
						returns = "()",
						valuetype = ""
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vrp.Version,1: root.vrp.Version)",
						returns = "()",
						valuetype = ""
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vrp.Version,1: root.vrp.Version)",
						returns = "()",
						valuetype = ""
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.vrp.Version,1: root.vrp.Version)",
						returns = "()",
						valuetype = ""
					},
					["major"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["revision"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["pfm"] = {
		type = "lib",
		description = [[]],
		childs = {
			["math"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["impl"] = {
				type = "lib",
				description = [[]],
				childs = {
					["projects"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},

				}
			},

		}
	},
	["sfm"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["gui"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Element"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsVisible"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetVisible"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetMouseInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetChild"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,className: ,idx: )",
						returns = "()",
						valuetype = ""
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetScrollInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetZPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["IsUpdateScheduled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["CenterToParentX"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetHalfSize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetRootWindow"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["CallCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: ,o1: ,o2: ,o3: ,o4: ,o5: ,o6: ,o7: ,o8: )",
						returns = "()",
						valuetype = ""
					},
					["IsClippingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["InjectCharInput"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,c: )",
						returns = "()",
						valuetype = ""
					},
					["CenterToParentY"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetCenterPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,pos: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["ClearStyleClasses"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["CenterToParent"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,applyAnchor: )",
						returns = "()",
						valuetype = ""
					},
					["IsCursorInBounds"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["InjectMouseInput"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,mousePos: root.math.Vector2,button: ,action: )",
						returns = "()",
						valuetype = ""
					},
					["SetWidth"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,w: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveStyleClass"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,className: )",
						returns = "()",
						valuetype = ""
					},
					["FindChildIndex"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,hChild: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetTooltip"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetScaleProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetHalfWidth"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetCenterX"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetRootElement"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "(root.math.Vector2)",
						valuetype = "Vector2"
					},
					["KillFocus"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetKeyboardInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetAlwaysUpdate"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["IsFadingIn"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["FindDescendantsByName"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetHalfHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetCenterY"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetZPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,zpos: )",
						returns = "()",
						valuetype = ""
					},
					["SetKeyboardInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetFirstChild"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,className: )",
						returns = "()",
						valuetype = ""
					},
					["IsPosInBounds"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,pos: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["HasFocus"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetAlpha"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,alpha: )",
						returns = "()",
						valuetype = ""
					},
					["RequestFocus"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetPosProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["TrapFocus"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["IsFocusTrapped"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetX"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["IsHidden"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetAlpha"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetCursorPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["IsParentVisible"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetAutoSizeToContents"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["GetMouseInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["Draw"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,drawInfo: root.gui.Text.DrawInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetCursorMovementCheckEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetCursorMovementCheckEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetX"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,x: )",
						returns = "()",
						valuetype = ""
					},
					["SetAbsolutePos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetVisibilityProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SizeToContents"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["SetSize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,x: ,y: )",
						returns = "()",
						valuetype = ""
					},
					["Wrap"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,hWrapper: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetY"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetY"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,y: )",
						returns = "()",
						valuetype = ""
					},
					["FindChildByName"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["FadeIn"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,tFadeIn: ,alphaTarget: )",
						returns = "()",
						valuetype = ""
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["IsFading"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetStyleClasses"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["IsFadingOut"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["Think"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["DisableThinking"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["InjectMouseMoveInput"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,mousePos: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["InjectMouseClick"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,mousePos: root.math.Vector2,button: )",
						returns = "()",
						valuetype = ""
					},
					["InjectKeyboardInput"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,key: ,action: )",
						returns = "()",
						valuetype = ""
					},
					["InjectKeyPress"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,key: )",
						returns = "()",
						valuetype = ""
					},
					["ApplySkin"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["InjectScrollInput"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,mousePos: root.math.Vector2,offset: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["IsDescendant"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,hOther: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["IsAncestor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,hOther: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["FindChildrenByName"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetAutoAlignToParent"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetAutoAlignToParentX"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetAutoAlignToParentY"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetCursor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,cursor: )",
						returns = "()",
						valuetype = ""
					},
					["GetCursor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetSkin"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,skin: )",
						returns = "()",
						valuetype = ""
					},
					["HasTooltip"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetLeft"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["ClearParent"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetParent"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,hParent: root.gui.Element,index: )",
						returns = "()",
						valuetype = ""
					},
					["SetClippingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetBounds"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,start: root.math.Vector2,end: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["SetBackgroundElement"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetAttachmentPosProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["IsBackgroundElement"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetCenter"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetRemoveOnParentRemoval"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,b: )",
						returns = "()",
						valuetype = ""
					},
					["HasAnchor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetLeft"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,pos: )",
						returns = "()",
						valuetype = ""
					},
					["GetAnchor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["ClearAnchor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetAnchorBottom"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,f: )",
						returns = "()",
						valuetype = ""
					},
					["SetAnchorTop"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,f: )",
						returns = "()",
						valuetype = ""
					},
					["SetAnchorRight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,f: )",
						returns = "()",
						valuetype = ""
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetAnchorLeft"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,f: )",
						returns = "()",
						valuetype = ""
					},
					["SetAnchor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,left: ,top: ,right: ,bottom: )",
						returns = "()",
						valuetype = ""
					},
					["SetTop"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,pos: )",
						returns = "()",
						valuetype = ""
					},
					["AddAttachment"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: ,position: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,className: )",
						returns = "()",
						valuetype = ""
					},
					["IsAncestorOf"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,hOther: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["IsDescendantOf"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,hOther: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetAbsoluteAttachmentPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["SetThinkingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,enabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetAbsolutePos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetScrollInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,b: )",
						returns = "()",
						valuetype = ""
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["RemoveSafely"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetColorProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetFocusProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetMouseInBoundsProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,col: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["SetColorRGB"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,color: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(0: root.gui.Element,1: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["FadeOut"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,tFadeOut: ,remove: )",
						returns = "()",
						valuetype = ""
					},
					["GetClass"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["ScheduleUpdate"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["ResetSkin"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["AddStyleClass"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,styleClass: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveElementOnRemoval"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,hOther: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetTooltip"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,tooltip: )",
						returns = "()",
						valuetype = ""
					},
					["GetTop"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["GetEndPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["FindDescendantByName"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: )",
						returns = "()",
						valuetype = ""
					},
					["GetBottom"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "(0: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetRight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,pos: )",
						returns = "()",
						valuetype = ""
					},
					["SetBottom"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,pos: )",
						returns = "()",
						valuetype = ""
					},
					["EnableThinking"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,h: )",
						returns = "()",
						valuetype = ""
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element)",
						returns = "()",
						valuetype = ""
					},
					["SetAttachmentPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: ,position: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["GetAttachmentPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Element,name: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["impl"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["Line"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetStartPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line,pos: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["GetStartPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line)",
						returns = "()",
						valuetype = ""
					},
					["SetEndPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line,pos: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["SetStartColor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line,col: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["GetStartPosProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line)",
						returns = "()",
						valuetype = ""
					},
					["GetStartColor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line)",
						returns = "()",
						valuetype = ""
					},
					["GetEndColor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line)",
						returns = "()",
						valuetype = ""
					},
					["GetEndPosProperty"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line)",
						returns = "()",
						valuetype = ""
					},
					["GetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line)",
						returns = "()",
						valuetype = ""
					},
					["SetEndColor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line,col: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["SetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Line,w: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Transformable"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetDraggable"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxHeight"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,height: )",
						returns = "()",
						valuetype = ""
					},
					["SetDragBounds"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,min: root.math.Vector2i,max: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["GetDragArea"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["SetResizable"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsDraggable"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["SetMinSize"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,size: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["SetMinHeight"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,height: )",
						returns = "()",
						valuetype = ""
					},
					["IsResizable"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["SetMinWidth"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,width: )",
						returns = "()",
						valuetype = ""
					},
					["GetMinWidth"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["GetMinHeight"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxSize"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["IsBeingDragged"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["GetMinSize"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["SetResizeRatioLocked"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,bResizeRatioLocked: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxWidth"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["IsBeingResized"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["GetDragBounds"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["IsResizeRatioLocked"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["AddSnapTarget"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,hSnapTarget: root.gui.SnapArea)",
						returns = "()",
						valuetype = ""
					},
					["Close"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					},
					["SetMaxSize"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,size: root.math.Vector2i)",
						returns = "()",
						valuetype = ""
					},
					["SetMaxWidth"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable,width: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxHeight"] = {
						type = "method",
						description = [[]],
						args = "(hTransformable: root.gui.Transformable)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DebugSSAO"] = {
				type = "class",
				inherits = "gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetUseBlurredSSAOImage"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.DebugSSAO,useBlurredImage: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Text"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetShadowXOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["SetFont"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,font: )",
						returns = "()",
						valuetype = ""
					},
					["IsShadowEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["SetTagArgument"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,label: ,argIdx: ,o: )",
						returns = "()",
						valuetype = ""
					},
					["SetShadowColor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,col: root.util.Color)",
						returns = "()",
						valuetype = ""
					},
					["EnableShadow"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetShadowXOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,x: )",
						returns = "()",
						valuetype = ""
					},
					["GetShadowColor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["SetShadowOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,pos: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["SetShadowYOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,y: )",
						returns = "()",
						valuetype = ""
					},
					["GetShadowOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["GetShadowYOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["SetShadowAlpha"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,alpha: )",
						returns = "()",
						valuetype = ""
					},
					["GetShadowAlpha"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["SetShadowBlurSize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,blurSize: )",
						returns = "()",
						valuetype = ""
					},
					["GetShadowBlurSize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["SetAutoBreakMode"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,autoBreakMode: )",
						returns = "()",
						valuetype = ""
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["GetLineCount"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["GetLine"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,lineIndex: )",
						returns = "()",
						valuetype = ""
					},
					["PopFrontLine"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["GetTextLength"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["SetTagsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,tagsEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["MoveText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,lineIdx: ,startOffset: ,len: ,targetLineIdx: ,targetCharOffset: )",
						returns = "()",
						valuetype = ""
					},
					["AreTagsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["PopBackLine"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["RemoveText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,lineIndex: ,offset: ,len: )",
						returns = "()",
						valuetype = ""
					},
					["RemoveLine"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,lineIndex: )",
						returns = "()",
						valuetype = ""
					},
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,text: )",
						returns = "()",
						valuetype = ""
					},
					["InsertText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,lineIndex: ,text: ,lineIdx: )",
						returns = "()",
						valuetype = ""
					},
					["AppendText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,text: )",
						returns = "()",
						valuetype = ""
					},
					["AppendLine"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,line: )",
						returns = "()",
						valuetype = ""
					},
					["Substr"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text,startOffset: ,len: )",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Text)",
						returns = "()",
						valuetype = ""
					},
					["AUTO_BREAK_ANY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AUTO_BREAK_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AUTO_BREAK_WHITESPACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DrawInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetColor"] = {
								type = "method",
								description = [[]],
								args = "(drawInfo: root.gui.Text.DrawInfo,color: root.util.Color)",
								returns = "()",
								valuetype = ""
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "(arg1: )",
								returns = "()",
								valuetype = ""
							},
							["SetPostTransform"] = {
								type = "method",
								description = [[]],
								args = "(drawInfo: root.gui.Text.DrawInfo,t: root.math.Mat4)",
								returns = "()",
								valuetype = ""
							},
							["size"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["commandBuffer"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["offset"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["transform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["useScissor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["Shape"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetVertexPos"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Shape,vertID: ,v: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["InvertVertexPositions"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Shape)",
						returns = "()",
						valuetype = ""
					},
					["ClearVertices"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Shape)",
						returns = "()",
						valuetype = ""
					},
					["AddVertex"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Shape,v: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Arrow"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetDirection"] = {
						type = "method",
						description = [[]],
						args = "(hArrow: root.gui.Arrow,dir: )",
						returns = "()",
						valuetype = ""
					},
					["DIRECTION_RIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DIRECTION_DOWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DIRECTION_LEFT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DIRECTION_UP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Checkbox"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["IsChecked"] = {
						type = "method",
						description = [[]],
						args = "(hCheckBox: root.gui.Checkbox)",
						returns = "()",
						valuetype = ""
					},
					["SetChecked"] = {
						type = "method",
						description = [[]],
						args = "(hCheckBox: root.gui.Checkbox,bChecked: )",
						returns = "()",
						valuetype = ""
					},
					["Toggle"] = {
						type = "method",
						description = [[]],
						args = "(hCheckBox: root.gui.Checkbox)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ScrollContainer"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetAutoStickToBottom"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer,stick: )",
						returns = "()",
						valuetype = ""
					},
					["IsContentsHeightFixed"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer)",
						returns = "()",
						valuetype = ""
					},
					["ShouldAutoStickToBottom"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer)",
						returns = "()",
						valuetype = ""
					},
					["IsContentsWidthFixed"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer)",
						returns = "()",
						valuetype = ""
					},
					["SetContentsWidthFixed"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer,fixed: )",
						returns = "()",
						valuetype = ""
					},
					["SetContentsHeightFixed"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer,fixed: )",
						returns = "()",
						valuetype = ""
					},
					["SetScrollAmountY"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer,am: )",
						returns = "()",
						valuetype = ""
					},
					["GetVerticalScrollBar"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer)",
						returns = "()",
						valuetype = ""
					},
					["GetHorizontalScrollBar"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer)",
						returns = "()",
						valuetype = ""
					},
					["SetScrollAmount"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer,amX: ,amY: )",
						returns = "()",
						valuetype = ""
					},
					["SetScrollAmountX"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.ScrollContainer,am: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RoundedTexturedRect"] = {
				type = "class",
				inherits = "gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["GetRoundness"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect)",
						returns = "()",
						valuetype = ""
					},
					["SetRoundTopRight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetRoundness"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect,roundness: )",
						returns = "()",
						valuetype = ""
					},
					["IsTopRightRound"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect)",
						returns = "()",
						valuetype = ""
					},
					["SetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect,cornerSize: )",
						returns = "()",
						valuetype = ""
					},
					["GetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect)",
						returns = "()",
						valuetype = ""
					},
					["SetRoundTopLeft"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetRoundBottomRight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsTopLeftRound"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect)",
						returns = "()",
						valuetype = ""
					},
					["SetRoundBottomLeft"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsBottomLeftRound"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect)",
						returns = "()",
						valuetype = ""
					},
					["IsBottomRightRound"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedTexturedRect)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["CommandLineEntry"] = {
				type = "class",
				inherits = "gui.TextEntry gui.Element",
				description = [[]],
				childs = {
					["SetAutoCompleteEntryLimit"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.CommandLineEntry,limit: )",
						returns = "()",
						valuetype = ""
					},
					["GetAutoCompleteEntryLimit"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.CommandLineEntry)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TreeList"] = {
				type = "class",
				inherits = "gui.Table gui.Element",
				description = [[]],
				childs = {
					["CollapseAll"] = {
						type = "method",
						description = [[]],
						args = "(hTreeList: root.gui.TreeList)",
						returns = "()",
						valuetype = ""
					},
					["GetRootItem"] = {
						type = "method",
						description = [[]],
						args = "(hTreeList: root.gui.TreeList)",
						returns = "()",
						valuetype = ""
					},
					["AddItem"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TreeList,text: ,oPopulate: )",
						returns = "()",
						valuetype = ""
					},
					["ExpandAll"] = {
						type = "method",
						description = [[]],
						args = "(hTreeList: root.gui.TreeList)",
						returns = "()",
						valuetype = ""
					},
					["Element"] = {
						type = "class",
						inherits = "gui.Table.Row gui.Element",
						description = [[]],
						childs = {
							["AddItem"] = {
								type = "method",
								description = [[]],
								args = "(hPanel: root.gui.TreeList.Element,text: ,oPopulate: )",
								returns = "()",
								valuetype = ""
							},
							["Expand"] = {
								type = "method",
								description = [[]],
								args = "(hElement: root.gui.TreeList.Element)",
								returns = "()",
								valuetype = ""
							},
							["GetItems"] = {
								type = "method",
								description = [[]],
								args = "(hElement: root.gui.TreeList.Element)",
								returns = "()",
								valuetype = ""
							},
							["Collapse"] = {
								type = "method",
								description = [[]],
								args = "(hElement: root.gui.TreeList.Element)",
								returns = "()",
								valuetype = ""
							}
						}
					},

				}
			},
			["NumericTextEntry"] = {
				type = "class",
				inherits = "gui.TextEntry gui.Element",
				description = [[]],
				childs = {
					["SetMaxValue"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.NumericTextEntry)",
						returns = "()",
						valuetype = ""
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.NumericTextEntry,min: ,max: )",
						returns = "()",
						valuetype = ""
					},
					["GetMinValue"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.NumericTextEntry)",
						returns = "()",
						valuetype = ""
					},
					["GetMaxValue"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.NumericTextEntry)",
						returns = "()",
						valuetype = ""
					},
					["SetMinValue"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.NumericTextEntry)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["OutlinedRect"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetOutlineWidth"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.OutlinedRect,w: )",
						returns = "()",
						valuetype = ""
					},
					["GetOutlineWidth"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.OutlinedRect)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TextEntry"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetTextElement"] = {
						type = "method",
						description = [[]],
						args = "(hElement: root.gui.TextEntry)",
						returns = "()",
						valuetype = ""
					},
					["IsNumeric"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry)",
						returns = "()",
						valuetype = ""
					},
					["IsMultiLine"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry)",
						returns = "()",
						valuetype = ""
					},
					["IsEditable"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry)",
						returns = "()",
						valuetype = ""
					},
					["SetEditable"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxLength"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry,len: )",
						returns = "()",
						valuetype = ""
					},
					["SetSelectable"] = {
						type = "method",
						description = [[]],
						args = "(hElement: root.gui.TextEntry,bSelectable: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxLength"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry)",
						returns = "()",
						valuetype = ""
					},
					["SetMultiLine"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsSelectable"] = {
						type = "method",
						description = [[]],
						args = "(hElement: root.gui.TextEntry)",
						returns = "()",
						valuetype = ""
					},
					["GetCaretElement"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.TextEntry)",
						returns = "()",
						valuetype = ""
					},
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry,text: )",
						returns = "()",
						valuetype = ""
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry)",
						returns = "()",
						valuetype = ""
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TextEntry)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Frame"] = {
				type = "class",
				inherits = "gui.Transformable gui.Element",
				description = [[]],
				childs = {
					["SetTitle"] = {
						type = "method",
						description = [[]],
						args = "(hFrame: root.gui.Frame,title: )",
						returns = "()",
						valuetype = ""
					},
					["GetTitle"] = {
						type = "method",
						description = [[]],
						args = "(hFrame: root.gui.Frame)",
						returns = "()",
						valuetype = ""
					},
					["SetCloseButtonEnabled"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Frame,enabled: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Button"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Button,text: )",
						returns = "()",
						valuetype = ""
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Button)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["RoundedRect"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["GetRoundness"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect)",
						returns = "()",
						valuetype = ""
					},
					["SetRoundTopRight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsTopRightRound"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect)",
						returns = "()",
						valuetype = ""
					},
					["SetRoundness"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect,roundness: )",
						returns = "()",
						valuetype = ""
					},
					["SetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect,cornerSize: )",
						returns = "()",
						valuetype = ""
					},
					["IsTopLeftRound"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect)",
						returns = "()",
						valuetype = ""
					},
					["SetRoundBottomLeft"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect,b: )",
						returns = "()",
						valuetype = ""
					},
					["GetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect)",
						returns = "()",
						valuetype = ""
					},
					["SetRoundTopLeft"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect,b: )",
						returns = "()",
						valuetype = ""
					},
					["SetRoundBottomRight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsBottomLeftRound"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect)",
						returns = "()",
						valuetype = ""
					},
					["IsBottomRightRound"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.RoundedRect)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TexturedShape"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["GetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape)",
						returns = "()",
						valuetype = ""
					},
					["SetShader"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape,shader: root.shader.GUITextured)",
						returns = "()",
						valuetype = ""
					},
					["GetTexture"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape)",
						returns = "()",
						valuetype = ""
					},
					["SetChannelSwizzle"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape,src: ,dst: )",
						returns = "()",
						valuetype = ""
					},
					["GetAlphaCutoff"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape)",
						returns = "()",
						valuetype = ""
					},
					["SetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape,alphaMode: )",
						returns = "()",
						valuetype = ""
					},
					["SetTexture"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape,tex: )",
						returns = "()",
						valuetype = ""
					},
					["SetVertexUVCoord"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape,vertID: ,uv: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["InvertVertexUVCoordinates"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape)",
						returns = "()",
						valuetype = ""
					},
					["ClearTexture"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape)",
						returns = "()",
						valuetype = ""
					},
					["SizeToTexture"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape)",
						returns = "()",
						valuetype = ""
					},
					["GetChannelSwizzle"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape,channel: )",
						returns = "()",
						valuetype = ""
					},
					["SetAlphaCutoff"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape,cutoff: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape,mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.TexturedShape)",
						returns = "()",
						valuetype = ""
					},
					["CHANNEL_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_BLUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_RED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_GREEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SilkIcon"] = {
				type = "class",
				inherits = "gui.Icon gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetIcon"] = {
						type = "method",
						description = [[]],
						args = "(hIcon: root.gui.SilkIcon,icon: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Icon"] = {
				type = "class",
				inherits = "gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetClipping"] = {
						type = "method",
						description = [[]],
						args = "(hIcon: root.gui.Icon,xStart: ,yStart: ,width: ,height: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Slider"] = {
				type = "class",
				inherits = "gui.ProgressBar gui.Element",
				description = [[]],
				childs = {
					["IsBeingDragged"] = {
						type = "method",
						description = [[]],
						args = "(hSlider: root.gui.Slider)",
						returns = "()",
						valuetype = ""
					},
					["DrawInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetColor"] = {
								type = "method",
								description = [[]],
								args = "(,)",
								returns = "()",
								valuetype = ""
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["SetPostTransform"] = {
								type = "method",
								description = [[]],
								args = "(,)",
								returns = "()",
								valuetype = ""
							},
							["offset"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["commandBuffer"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["size"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["transform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["useScissor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["SnapArea"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetTriggerArea"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.SnapArea)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DropDownMenu"] = {
				type = "class",
				inherits = "gui.TextEntry gui.Element",
				description = [[]],
				childs = {
					["SelectOption"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu,option: )",
						returns = "()",
						valuetype = ""
					},
					["ClearOptions"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu)",
						returns = "()",
						valuetype = ""
					},
					["ScrollToOption"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.DropDownMenu,idx: ,center: )",
						returns = "()",
						valuetype = ""
					},
					["CloseMenu"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu)",
						returns = "()",
						valuetype = ""
					},
					["SelectOptionByText"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu,text: )",
						returns = "()",
						valuetype = ""
					},
					["GetOptionElement"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.DropDownMenu,idx: )",
						returns = "()",
						valuetype = ""
					},
					["ToggleMenu"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu)",
						returns = "()",
						valuetype = ""
					},
					["GetOptionText"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu,idx: )",
						returns = "()",
						valuetype = ""
					},
					["GetOptionValue"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu,idx: )",
						returns = "()",
						valuetype = ""
					},
					["OpenMenu"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu)",
						returns = "()",
						valuetype = ""
					},
					["HasOption"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.DropDownMenu,value: )",
						returns = "()",
						valuetype = ""
					},
					["IsMenuOpen"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu)",
						returns = "()",
						valuetype = ""
					},
					["ClearSelectedOption"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.DropDownMenu)",
						returns = "()",
						valuetype = ""
					},
					["FindOptionSelectedByCursor"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.DropDownMenu)",
						returns = "()",
						valuetype = ""
					},
					["SetListItemCount"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.DropDownMenu,n: )",
						returns = "()",
						valuetype = ""
					},
					["AddOption"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu,option: )",
						returns = "()",
						valuetype = ""
					},
					["GetSelectedOption"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.DropDownMenu)",
						returns = "()",
						valuetype = ""
					},
					["GetOptionCount"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu)",
						returns = "()",
						valuetype = ""
					},
					["SetOptionValue"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu,idx: ,val: )",
						returns = "()",
						valuetype = ""
					},
					["SetOptionText"] = {
						type = "method",
						description = [[]],
						args = "(hDm: root.gui.DropDownMenu,idx: ,text: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Console"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetFrame"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.Console)",
						returns = "()",
						valuetype = ""
					},
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.Console,text: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxLogLineCount"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.Console)",
						returns = "()",
						valuetype = ""
					},
					["AppendText"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.Console,text: )",
						returns = "()",
						valuetype = ""
					},
					["GetTextLogElement"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.Console)",
						returns = "()",
						valuetype = ""
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.Console)",
						returns = "()",
						valuetype = ""
					},
					["SetMaxLogLineCount"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.Console,maxLogLineCount: )",
						returns = "()",
						valuetype = ""
					},
					["GetCommandLineEntryElement"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.Console)",
						returns = "()",
						valuetype = ""
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.Console)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DebugDepthTexture"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetTexture"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.DebugDepthTexture,tex: )",
						returns = "()",
						valuetype = ""
					},
					["GetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.DebugDepthTexture)",
						returns = "()",
						valuetype = ""
					},
					["SetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.DebugDepthTexture,contrastFactor: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["ProgressBar"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(hBar: root.gui.ProgressBar,v: )",
						returns = "()",
						valuetype = ""
					},
					["SetPostFix"] = {
						type = "method",
						description = [[]],
						args = "(hBar: root.gui.ProgressBar,postfix: )",
						returns = "()",
						valuetype = ""
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(hBar: root.gui.ProgressBar,min: ,max: )",
						returns = "()",
						valuetype = ""
					},
					["GetProgress"] = {
						type = "method",
						description = [[]],
						args = "(hBar: root.gui.ProgressBar)",
						returns = "()",
						valuetype = ""
					},
					["SetProgress"] = {
						type = "method",
						description = [[]],
						args = "(hBar: root.gui.ProgressBar,progress: )",
						returns = "()",
						valuetype = ""
					},
					["GetRange"] = {
						type = "method",
						description = [[]],
						args = "(hProgressBar: root.gui.ProgressBar)",
						returns = "()",
						valuetype = ""
					},
					["SetOptions"] = {
						type = "method",
						description = [[]],
						args = "(hBar: root.gui.ProgressBar,o: )",
						returns = "()",
						valuetype = ""
					},
					["AddOption"] = {
						type = "method",
						description = [[]],
						args = "(hBar: root.gui.ProgressBar,option: )",
						returns = "()",
						valuetype = ""
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(hBar: root.gui.ProgressBar)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Table"] = {
				type = "class",
				inherits = "gui.Container gui.Element",
				description = [[]],
				childs = {
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["GetRowHeight"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["GetRowCount"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["GetSelectableMode"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["SetRowHeight"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table,height: )",
						returns = "()",
						valuetype = ""
					},
					["SetSelectableMode"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table,mode: )",
						returns = "()",
						valuetype = ""
					},
					["AddRow"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["SetColumnWidth"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table,colId: ,width: )",
						returns = "()",
						valuetype = ""
					},
					["AddHeaderRow"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["SetSortable"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsSortable"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["SetScrollable"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table,b: )",
						returns = "()",
						valuetype = ""
					},
					["IsScrollable"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["GetRow"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table,rowId: )",
						returns = "()",
						valuetype = ""
					},
					["GetSelectedRows"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["GetRows"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["RemoveRow"] = {
						type = "method",
						description = [[]],
						args = "(hTable: root.gui.Table,rowIdx: )",
						returns = "()",
						valuetype = ""
					},
					["MoveRow"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Table,rowA: root.gui.Table.Row,rowB: root.gui.Table.Row)",
						returns = "()",
						valuetype = ""
					},
					["SelectRow"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Table,row: root.gui.Table.Row)",
						returns = "()",
						valuetype = ""
					},
					["GetFirstSelectedRow"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.Table)",
						returns = "()",
						valuetype = ""
					},
					["SELECTABLE_MODE_MULTI"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTABLE_MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTABLE_MODE_SINGLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["Cell"] = {
						type = "class",
						inherits = "gui.Container gui.Element",
						description = [[]],
						childs = {
							["GetFirstElement"] = {
								type = "method",
								description = [[]],
								args = "(hCell: root.gui.Table.Cell)",
								returns = "()",
								valuetype = ""
							},
							["GetColSpan"] = {
								type = "method",
								description = [[]],
								args = "(hCell: root.gui.Table.Cell)",
								returns = "()",
								valuetype = ""
							},
							["SetColSpan"] = {
								type = "method",
								description = [[]],
								args = "(hCell: root.gui.Table.Cell,colSpan: )",
								returns = "()",
								valuetype = ""
							}
						}
					},
					["Row"] = {
						type = "class",
						inherits = "gui.Container gui.Element",
						description = [[]],
						childs = {
							["SetValue"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row,column: ,value: )",
								returns = "()",
								valuetype = ""
							},
							["InsertElement"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row,column: ,hElement: root.gui.Element)",
								returns = "()",
								valuetype = ""
							},
							["Deselect"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row)",
								returns = "()",
								valuetype = ""
							},
							["GetCellCount"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row)",
								returns = "()",
								valuetype = ""
							},
							["IsSelected"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row)",
								returns = "()",
								valuetype = ""
							},
							["SetCellWidth"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row,column: ,width: )",
								returns = "()",
								valuetype = ""
							},
							["GetCell"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row,cellId: )",
								returns = "()",
								valuetype = ""
							},
							["GetRowIndex"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row)",
								returns = "()",
								valuetype = ""
							},
							["Select"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row)",
								returns = "()",
								valuetype = ""
							},
							["GetValue"] = {
								type = "method",
								description = [[]],
								args = "(hRow: root.gui.Table.Row,column: )",
								returns = "()",
								valuetype = ""
							}
						}
					},

				}
			},
			["ScrollBar"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetScrollAmount"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.ScrollBar)",
						returns = "()",
						valuetype = ""
					},
					["AddScrollOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.ScrollBar,offset: )",
						returns = "()",
						valuetype = ""
					},
					["GetScrollOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.ScrollBar)",
						returns = "()",
						valuetype = ""
					},
					["IsHorizontal"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.ScrollBar)",
						returns = "()",
						valuetype = ""
					},
					["SetScrollOffset"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.ScrollBar,offset: )",
						returns = "()",
						valuetype = ""
					},
					["SetScrollAmount"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.ScrollBar,am: )",
						returns = "()",
						valuetype = ""
					},
					["SetUp"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.ScrollBar,numElementsListed: ,numElementsTotal: )",
						returns = "()",
						valuetype = ""
					},
					["IsVertical"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.ScrollBar)",
						returns = "()",
						valuetype = ""
					},
					["SetHorizontal"] = {
						type = "method",
						description = [[]],
						args = "(hPanel: root.gui.ScrollBar,b: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Container"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetPaddingRight"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container)",
						returns = "()",
						valuetype = ""
					},
					["GetPaddingBottom"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container)",
						returns = "()",
						valuetype = ""
					},
					["SetPadding"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container,padding: )",
						returns = "()",
						valuetype = ""
					},
					["SetPaddingTop"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container,top: )",
						returns = "()",
						valuetype = ""
					},
					["SetPaddingBottom"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container,bottom: )",
						returns = "()",
						valuetype = ""
					},
					["SetPaddingRight"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container,right: )",
						returns = "()",
						valuetype = ""
					},
					["SetPaddingLeft"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container,left: )",
						returns = "()",
						valuetype = ""
					},
					["GetPadding"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container)",
						returns = "()",
						valuetype = ""
					},
					["GetPaddingTop"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container)",
						returns = "()",
						valuetype = ""
					},
					["GetPaddingLeft"] = {
						type = "method",
						description = [[]],
						args = "(hContainer: root.gui.Container)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Base"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["OnDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.gui.Text.DrawInfo,arg2: root.math.Mat4,arg3: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					},
					["OnInitialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["CharCallback"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["OnRemove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnThink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnInitialThink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["KeyboardCallback"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					},
					["ScrollCallback"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["MouseCallback"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: )",
						returns = "()",
						valuetype = ""
					},
					["OnUpdate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnVisibilityChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["OnSizeChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["OnColorChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: ,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					},
					["OnAlphaChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["OnCursorEntered"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnCursorExited"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnFocusGained"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnFocusKilled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DebugShadowMap"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.DebugShadowMap,contrastFactor: )",
						returns = "()",
						valuetype = ""
					},
					["GetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.DebugShadowMap)",
						returns = "()",
						valuetype = ""
					},
					["SetShadowMapSize"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.DebugShadowMap,w: ,h: )",
						returns = "()",
						valuetype = ""
					},
					["SetLightSource"] = {
						type = "method",
						description = [[]],
						args = "(hEl: root.gui.DebugShadowMap,hLight: root.ents.LightComponent)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["GridPanel"] = {
				type = "class",
				inherits = "gui.Table gui.Element",
				description = [[]],
				childs = {
					["GetColumnCount"] = {
						type = "method",
						description = [[]],
						args = "(hGridPanel: root.gui.GridPanel)",
						returns = "()",
						valuetype = ""
					},
					["AddItem"] = {
						type = "method",
						description = [[]],
						args = "(hGridPanel: root.gui.GridPanel,hEl: root.gui.Element,row: ,col: )",
						returns = "()",
						valuetype = ""
					}
				}
			},

		}
	},
	["shader"] = {
		type = "lib",
		description = [[]],
		childs = {
			["BasePostProcessing"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BaseComputeModule"] = {
				type = "class",
				inherits = "shader.BaseModule",
				description = [[]],
				childs = {

				}
			},
			["BaseCompute"] = {
				type = "class",
				inherits = "shader.BaseComputeModule shader.Compute shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["GameWorld"] = {
				type = "class",
				inherits = "shader.ShaderEntity shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["SetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.GameWorld,depthBias: root.math.Vector2)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BaseGraphics"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Info"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Info)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Glow"] = {
				type = "class",
				inherits = "shader.TexturedLit3D shader.ShaderEntity shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {

				}
			},
			["BaseGUITextured"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.GUITextured shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["GraphicsPipelineCreateInfo"] = {
				type = "class",
				inherits = "shader.BasePipelineCreateInfo",
				description = [[]],
				childs = {
					["GetDepthBiasConstantFactor"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetDynamicStateEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,state: ,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetLogicOpProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: ,logicOp: )",
						returns = "()",
						valuetype = ""
					},
					["SetRasterizerDiscardEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetSampleMask"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,sampleMask: )",
						returns = "()",
						valuetype = ""
					},
					["GetSampleMask"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetLogicOpEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetDepthTestState"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetMultisamplingProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,sampleCount: ,sampleShading: ,sampleMask: )",
						returns = "()",
						valuetype = ""
					},
					["SetPrimitiveRestartEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetSampleCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,sampleCount: )",
						returns = "()",
						valuetype = ""
					},
					["SetMinSampleShading"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,minSampleShading: )",
						returns = "()",
						valuetype = ""
					},
					["GetMinDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetStencilTestEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetDepthBoundsState"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetVertexAttributeCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetBlendingProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,blendingProperties: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["SetCommonAlphaBlendProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetColorBlendAttachmentProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,attId: ,blendingEnabled: ,blendOpColor: ,blendOpAlpha: ,srcColorBlendFactor: ,dstColorBlendFactor: ,srcAlphaBlendFactor: ,dstAlphaBlendFactor: ,channelWriteMask: )",
						returns = "()",
						valuetype = ""
					},
					["SetSampleShadingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetSampleMaskEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetSampleShadingState"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetDynamicScissorBoxesCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,numDynamicScissorBoxes: )",
						returns = "()",
						valuetype = ""
					},
					["SetDynamicViewportsCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,numDynamicViewports: )",
						returns = "()",
						valuetype = ""
					},
					["GetDynamicScissorBoxesCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetVertexAttributeProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,iVerexInputAttribute: )",
						returns = "()",
						valuetype = ""
					},
					["SetPrimitiveTopology"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,primitiveTopology: )",
						returns = "()",
						valuetype = ""
					},
					["SetRasterizationProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,polygonMode: ,cullMode: ,frontFace: ,lineWidth: )",
						returns = "()",
						valuetype = ""
					},
					["GetDepthClamp"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetPolygonMode"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,polygonMode: )",
						returns = "()",
						valuetype = ""
					},
					["GetViewportCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetCullMode"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,cullMode: )",
						returns = "()",
						valuetype = ""
					},
					["SetFrontFace"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,frontFace: )",
						returns = "()",
						valuetype = ""
					},
					["GetDepthBiasSlopeFactor"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,lineWidth: )",
						returns = "()",
						valuetype = ""
					},
					["GetSubpassId"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetScissorBoxProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,iScissorBox: ,x: ,y: ,w: ,h: )",
						returns = "()",
						valuetype = ""
					},
					["GetMaxDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetStencilTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,updateFrontFaceState: ,stencilFailOp: ,stencilPassOp: ,stencilDepthFailOp: ,stencilCompareOp: ,stencilCompareMask: ,stencilWriteMask: ,stencilReference: )",
						returns = "()",
						valuetype = ""
					},
					["SetViewportProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,iViewport: ,originX: ,originY: ,w: ,h: ,minDepth: ,maxDepth: )",
						returns = "()",
						valuetype = ""
					},
					["AreDepthWritesEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetBlendingProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetColorBlendAttachmentProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,attId: )",
						returns = "()",
						valuetype = ""
					},
					["AddSpecializationConstant"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,shaderStage: ,constantId: ,ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["GetScissorBoxProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,iScissor: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthBoundsTestEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetDepthBiasState"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetDepthBiasClamp"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetMultisamplingProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetDynamicStates"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetDynamicViewportsCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetScissorCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["SetDepthTestEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["GetLogicOpState"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetSampleCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetViewportProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,iViewport: )",
						returns = "()",
						valuetype = ""
					},
					["IsAlphaToOneEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetMinSampleShading"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetScissorBoxesCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetRasterizationProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetViewportsCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetPrimitiveTopology"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetPushConstantRanges"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetPolygonMode"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetCullMode"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetFrontFace"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["GetStencilTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["IsAlphaToCoverageEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["IsDepthClampEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["IsPrimitiveRestartEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["IsRasterizerDiscardEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["IsSampleMaskEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo)",
						returns = "()",
						valuetype = ""
					},
					["AttachVertexAttribute"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,binding: root.shader.VertexBinding,attributes: )",
						returns = "()",
						valuetype = ""
					},
					["SetAlphaToCoverageEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetAlphaToOneEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthBiasEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthBiasProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: ,depthBiasConstantFactor: ,depthBiasClamp: ,depthBiasSlopeFactor: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthBiasConstantFactor"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,depthBiasConstantFactor: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthBiasClamp"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,depthBiasClamp: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthBiasSlopeFactor"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,depthBiasSlopeFactor: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthBoundsTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: ,minDepthBounds: ,maxDepthBounds: )",
						returns = "()",
						valuetype = ""
					},
					["SetMinDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,minDepthBounds: )",
						returns = "()",
						valuetype = ""
					},
					["SetMaxDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,maxDepthBounds: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthClampEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: ,compareOp: )",
						returns = "()",
						valuetype = ""
					},
					["SetDepthWritesEnabled"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,bEnabled: )",
						returns = "()",
						valuetype = ""
					},
					["SetDynamicStates"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.GraphicsPipelineCreateInfo,states: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["DescriptorSetBinding"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["shaderStages"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bindingIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["type"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["descriptorArraySize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseTexturedLit3D"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.TexturedLit3D shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["BindMaterialParameters"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["InitializeGfxPipelineVertexAttributes"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.shader.BasePipelineCreateInfo,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["InitializeGfxPipelinePushConstantRanges"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.shader.BasePipelineCreateInfo,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["OnBindMaterial"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["InitializeGfxPipelineDescriptorSets"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.shader.BasePipelineCreateInfo,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["OnBindEntity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["OnDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.game.Model.Mesh.Sub)",
						returns = "()",
						valuetype = ""
					},
					["OnBindScene"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["OnBeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.prosper.CommandBuffer,arg2: root.math.Vector4,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					},
					["OnEndDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BaseGraphicsModule"] = {
				type = "class",
				inherits = "shader.BaseModule",
				description = [[]],
				childs = {

				}
			},
			["Compute"] = {
				type = "class",
				inherits = "shader.Shader",
				description = [[]],
				childs = {
					["RecordDispatch"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Compute)",
						returns = "()",
						valuetype = ""
					},
					["RecordBeginCompute"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Compute,hCommandBuffer: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["RecordEndCompute"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Compute)",
						returns = "()",
						valuetype = ""
					},
					["RecordCompute"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Compute)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BaseModule"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetCurrentCommandBuffer"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.BaseModule)",
						returns = "()",
						valuetype = ""
					},
					["InitializePipeline"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.shader.BasePipelineCreateInfo,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["OnInitialized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OnPipelinesInitialized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetShaderSource"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.BaseModule,shaderStage: ,fpath: )",
						returns = "()",
						valuetype = ""
					},
					["OnPipelineInitialized"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["SetPipelineCount"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.BaseModule,pipelineCount: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["GUITextured"] = {
				type = "class",
				inherits = "shader.Graphics shader.Shader",
				description = [[]],
				childs = {

				}
			},
			["SceneLit3D"] = {
				type = "class",
				inherits = "shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindLights"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.SceneLit3D,dsLights: )",
						returns = "()",
						valuetype = ""
					},
					["RecordBindScene"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.SceneLit3D,scene: root.ents.SceneComponent,renderer: ,bView: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Shader"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetSourceFilePath"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader,shaderStage: )",
						returns = "()",
						valuetype = ""
					},
					["RecordBindDescriptorSets"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader,descSets: )",
						returns = "()",
						valuetype = ""
					},
					["GetGlslSourceCode"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader,shaderStage: ,pipelineIdx: )",
						returns = "()",
						valuetype = ""
					},
					["IsComputeShader"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader)",
						returns = "()",
						valuetype = ""
					},
					["RecordPushConstants"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader,ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					},
					["GetEntrypointName"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader,shaderStage: )",
						returns = "()",
						valuetype = ""
					},
					["CreateDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader,setIdx: )",
						returns = "()",
						valuetype = ""
					},
					["IsGraphicsShader"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader)",
						returns = "()",
						valuetype = ""
					},
					["GetPipelineInfo"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader,shaderStage: ,pipelineIdx: )",
						returns = "()",
						valuetype = ""
					},
					["GetPipelineBindPoint"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader)",
						returns = "()",
						valuetype = ""
					},
					["GetIdentifier"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader)",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader)",
						returns = "()",
						valuetype = ""
					},
					["GetSourceFilePaths"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader)",
						returns = "()",
						valuetype = ""
					},
					["RecordBindDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Shader,ds: root.prosper.DescriptorSet)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BasePbr"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.TexturedLit3D shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["BindMaterialParameters"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["InitializeGfxPipelineVertexAttributes"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.shader.BasePipelineCreateInfo,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["InitializeGfxPipelinePushConstantRanges"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.shader.BasePipelineCreateInfo,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["OnBindMaterial"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["InitializeGfxPipelineDescriptorSets"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.shader.BasePipelineCreateInfo,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["OnBindEntity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["OnDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.game.Model.Mesh.Sub)",
						returns = "()",
						valuetype = ""
					},
					["OnBindScene"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ,arg2: )",
						returns = "()",
						valuetype = ""
					},
					["OnBeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: root.prosper.CommandBuffer,arg2: root.math.Vector4,arg3: ,arg4: )",
						returns = "()",
						valuetype = ""
					},
					["OnEndDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Scene3D"] = {
				type = "class",
				inherits = "shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindSceneCamera"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Scene3D,scene: root.ents.SceneComponent,renderer: ,bView: )",
						returns = "()",
						valuetype = ""
					},
					["RecordBindRenderSettings"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Scene3D,descSet: )",
						returns = "()",
						valuetype = ""
					},
					["RENDER_PASS_BLOOM_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_COLOR_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_DEPTH_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ComputePipelineCreateInfo"] = {
				type = "class",
				inherits = "shader.BasePipelineCreateInfo",
				description = [[]],
				childs = {
					["AddSpecializationConstant"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.ComputePipelineCreateInfo,constantId: ,ds: root.util.DataStream)",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BaseParticle2D"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["PUSH_CONSTANTS_SIZE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PUSH_CONSTANTS_USER_DATA_OFFSET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ShaderEntity"] = {
				type = "class",
				inherits = "shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindInstanceDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.ShaderEntity,descSet: )",
						returns = "()",
						valuetype = ""
					},
					["RecordDrawMesh"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.ShaderEntity,mesh: root.game.Model.Mesh.Sub)",
						returns = "()",
						valuetype = ""
					},
					["RecordBindEntity"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.ShaderEntity,hEnt: root.ents.Entity)",
						returns = "()",
						valuetype = ""
					},
					["RecordBindVertexAnimationOffset"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.ShaderEntity,offset: )",
						returns = "()",
						valuetype = ""
					},
					["GetBoundEntity"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.ShaderEntity)",
						returns = "()",
						valuetype = ""
					},
					["BindVertexAnimationOffset"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.ShaderEntity,offset: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["TexturedLit3D"] = {
				type = "class",
				inherits = "shader.GameWorld shader.ShaderEntity shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindMaterial"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.TexturedLit3D,mat: root.game.Material)",
						returns = "()",
						valuetype = ""
					},
					["RecordBindClipPlane"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.TexturedLit3D,clipPlane: root.math.Vector4)",
						returns = "()",
						valuetype = ""
					},
					["PUSH_CONSTANTS_SIZE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PUSH_CONSTANTS_USER_DATA_OFFSET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ComposeRMA"] = {
				type = "class",
				inherits = "shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["ComposeRMA"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.ComposeRMA,roughnessMap: root.prosper.Texture,metalnessMap: root.prosper.Texture,aoMap: root.prosper.Texture,flags: )",
						returns = "()",
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_USE_SPECULAR_WORKFLOW_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["VertexBinding"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["inputRate"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["stride"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Graphics"] = {
				type = "class",
				inherits = "shader.Shader",
				description = [[]],
				childs = {
					["RecordBindIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Graphics,indexBuffer: root.prosper.Buffer,indexType: )",
						returns = "()",
						valuetype = ""
					},
					["RecordBeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Graphics,hCommandBuffer: root.prosper.CommandBuffer)",
						returns = "()",
						valuetype = ""
					},
					["RecordEndDraw"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Graphics)",
						returns = "()",
						valuetype = ""
					},
					["RecordDraw"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Graphics)",
						returns = "()",
						valuetype = ""
					},
					["GetRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Graphics)",
						returns = "()",
						valuetype = ""
					},
					["RecordDrawIndexed"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Graphics,indexCount: )",
						returns = "()",
						valuetype = ""
					},
					["RecordBindVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Graphics,buffer: root.prosper.Buffer)",
						returns = "()",
						valuetype = ""
					},
					["RecordBindVertexBuffers"] = {
						type = "method",
						description = [[]],
						args = "(shader: root.shader.Graphics,buffers: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["VertexAttribute"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["offset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["format"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["location"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DescriptorSetInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: )",
						returns = "()",
						valuetype = ""
					},
					["setIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BasePipelineCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AttachDescriptorSetInfo"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.BasePipelineCreateInfo,descSetInfo: root.shader.DescriptorSetInfo)",
						returns = "()",
						valuetype = ""
					},
					["AttachPushConstantRange"] = {
						type = "method",
						description = [[]],
						args = "(pipelineInfo: root.shader.BasePipelineCreateInfo,offset: ,size: ,shaderStages: )",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["BaseImageProcessing"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["DESCRIPTOR_SET_TEXTURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DESCRIPTOR_SET_TEXTURE_BINDING_TEXTURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["ents"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create"] = {
				type = "function",
				description = [[]],
				args = "(classname: std::basic_string)",
				returns = "(ents.BaseEntity)",
				valuetype = "BaseEntity"
			},
			["get_weapons"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["get_closest"] = {
				type = "function",
				description = [[]],
				args = "(origin: glm::vec)",
				returns = "([multents.BaseEntity|float])",
				valuetype = "BaseEntity,float>"
			},
			["get_all"] = {
				type = "function",
				description = [[]],
				args = "(filterFlags: EntityIterator::FilterFlags,filters: tableLuaEntityIteratorFilterBase)",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["get_spawned"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["find_by_component"] = {
				type = "function",
				description = [[]],
				args = "(componentName: std::basic_string)",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["get_players"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["get_world"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([ents.BaseEntity])",
				valuetype = "BaseEntity"
			},
			["get_npcs"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["find_in_sphere"] = {
				type = "function",
				description = [[]],
				args = "(origin: glm::vec,radius: )",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["get_vehicles"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tablepragma::BaseVehicleComponent)",
				valuetype = "BaseVehicleComponent>"
			},
			["find_by_class"] = {
				type = "function",
				description = [[]],
				args = "(className: std::basic_string)",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["get_by_index"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([ents.BaseEntity])",
				valuetype = "BaseEntity"
			},
			["get_by_local_index"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([ents.BaseEntity])",
				valuetype = "BaseEntity"
			},
			["find_by_unique_index"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([ents.BaseEntity])",
				valuetype = "BaseEntity"
			},
			["iterator"] = {
				type = "function",
				description = [[]],
				args = "(arg1: EntityIterator::FilterFlags,arg2: tableLuaEntityIteratorFilterBase)",
				returns = "(LuaEntityIterator)",
				valuetype = "LuaEntityIterator"
			},
			["get_null"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(ents.BaseEntity)",
				valuetype = "BaseEntity"
			},
			["get_component_id"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([uint32])",
				valuetype = "uint32"
			},
			["find_by_filter"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string)",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["find_by_name"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string)",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["register"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["register_component_net_event"] = {
				type = "function",
				description = [[]],
				args = "(componentId: uint32,name: std::basic_string)",
				returns = "([uint32])",
				valuetype = "uint32"
			},
			["register_component_event"] = {
				type = "function",
				description = [[]],
				args = "(componentId: uint32,name: std::basic_string)",
				returns = "([uint32])",
				valuetype = "uint32"
			},
			["get_farthest"] = {
				type = "function",
				description = [[]],
				args = "(origin: glm::vec)",
				returns = "([multents.BaseEntity|float])",
				valuetype = "BaseEntity,float>"
			},
			["get_random"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(ents.BaseEntity)",
				valuetype = "BaseEntity"
			},
			["find_in_aabb"] = {
				type = "function",
				description = [[]],
				args = "(min: glm::vec,max: glm::vec)",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["get_sorted_by_distance"] = {
				type = "function",
				description = [[]],
				args = "(origin: glm::vec)",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["find_in_cone"] = {
				type = "function",
				description = [[]],
				args = "(origin: glm::vec,dir: glm::vec,radius: ,angle: )",
				returns = "(tableents.BaseEntity)",
				valuetype = "BaseEntity>"
			},
			["create_trigger"] = {
				type = "function",
				description = [[]],
				args = "(origin: glm::vec,radius: )",
				returns = "(ents.BaseEntity)",
				valuetype = "BaseEntity"
			},
			["create_prop"] = {
				type = "function",
				description = [[]],
				args = "(mdl: std::basic_string,origin: glm::vec,angles: math.EulerAngles,false: bool)",
				returns = "(ents.BaseEntity)",
				valuetype = "BaseEntity"
			},
			["get_component_name"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([std::basic_string])",
				valuetype = "basic_string"
			},
			["DamageableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["TakeDamage"] = {
						type = "method",
						description = [[]],
						args = "(info: game.DamageInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_TAKE_DAMAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SubmergibleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetWaterEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSubmerged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubmergedFraction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInWater"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFullySubmerged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubmergedFractionProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_WATER_EMERGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WATER_ENTERED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WATER_EXITED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WATER_SUBMERGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["tf2"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["SoundDspChorusComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["WeaponComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetSecondaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxSecondaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrimaryAmmoTypeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddSecondaryClip"] = {
						type = "method",
						description = [[]],
						args = "(num: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Holster"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxPrimaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Reload"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSecondaryAmmoTypeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPrimaryClipEmpty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewModelOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Deploy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAutomaticSecondary"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EndAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EndPrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EndSecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAutomaticSecondary"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHideWorldModelInFirstPerson"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSecondaryClipEmpty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAutomaticPrimary"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddPrimaryClip"] = {
						type = "method",
						description = [[]],
						args = "(num: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RefillPrimaryClip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RefillSecondaryClip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Attack4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemovePrimaryClip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveSecondaryClip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPrimaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "(type: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSecondaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "(type: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNextPrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNextSecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNextAttack"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["PrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasPrimaryAmmo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrimaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TertiaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAutomaticPrimary"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDeployed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrimaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSecondaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasSecondaryAmmo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasAmmo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetViewFOV"] = {
						type = "method",
						description = [[]],
						args = "(fov: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewFOV"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetViewModelOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInFirstPersonMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHideWorldModelInFirstPerson"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayViewActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetViewModel"] = {
						type = "method",
						description = [[]],
						args = "(mdl: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_PRIMARY_CLIP_SIZE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ATTACK4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PRIMARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TERTIARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SECONDARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEPLOY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_PRIMARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RELOAD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_SECONDARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_HOLSTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SECONDARY_CLIP_SIZE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ATTACH_TO_OWNER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["LightComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetFalloffExponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLightIntensityCandela"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFalloffExponent"] = {
						type = "method",
						description = [[]],
						args = "(falloffExponent: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLightIntensityType"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLightIntensity"] = {
						type = "method",
						description = [[]],
						args = "(intensity: ,type: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLightIntensityType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLightIntensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAddToGameScene"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShadowType"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShadowType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMorphTargetsInShadowsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["AreMorphTargetsInShadowsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["INTENSITY_TYPE_CANDELA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INTENSITY_TYPE_LUX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INTENSITY_TYPE_LUMEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_PASS_ENTITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_PASS_MESH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_PASS_ENTITY_MESH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SHADOW_BUFFER_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_GET_TRANSFORMATION_MATRIX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_UPDATE_RENDER_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_SHADOW_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SHADOW_TYPE_FULL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SHADOW_TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SHADOW_TYPE_STATIC_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["HealthComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetHealth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHealth"] = {
						type = "method",
						description = [[]],
						args = "(health: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "(maxHealth: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHealthProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxHealthProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_TAKEN_DAMAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_HEALTH_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["PhysicsComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(min: glm::vec,max: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyTorqueImpulse"] = {
						type = "method",
						description = [[]],
						args = "(torque: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializePhysics"] = {
						type = "method",
						description = [[]],
						args = "(shape: util::TSharedHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionExtents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionContactReportEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMoveType"] = {
						type = "method",
						description = [[]],
						args = "(moveType: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMoveType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DestroyPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DropToFloor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTrigger"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetPhysJointConstraints"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetKinematic"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsKinematic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAABBDistance"] = {
						type = "method",
						description = [[]],
						args = "(hOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bool: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionContactReportEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bool: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(force: glm::vec,relPos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(mask: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilter"] = {
						type = "method",
						description = [[]],
						args = "(group: int32,mask: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["EnableCollisions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DisableCollisions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["ResetCollisions"] = {
						type = "method",
						description = [[]],
						args = "(hEntOther: SPhysicsComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotatedCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyTorque"] = {
						type = "method",
						description = [[]],
						args = "(torque: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPhysicsType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionRadius"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPhysicsProp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsRagdoll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyImpulse"] = {
						type = "method",
						description = [[]],
						args = "(impulse: glm::vec,relPos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["MOVETYPE_PHYSICS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_FLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_FREE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_NOCLIP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_WALK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_RAYCAST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_INITIALIZE_PHYSICS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DYNAMIC_PHYSICS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PHYSICS_DESTROYED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PHYSICS_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PHYSICS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_POST_PHYSICS_SIMULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PRE_PHYSICS_SIMULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SLEEP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WAKE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DebugLineComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintBallSocketComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["DebugCylinderComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["LogicRelayComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["BrushComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointAtTargetComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetPointAtTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPointAtTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["SpriteComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["StopAndRemoveEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TriggerTeleportComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["AttachableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["AttachToAttachment"] = {
						type = "method",
						description = [[]],
						args = "(hParent: EntityHandle,attachment: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalPose"] = {
						type = "method",
						description = [[]],
						args = "(pose: umath::Transform)",
						returns = "(void)",
						valuetype = "void"
					},
					["AttachToBone"] = {
						type = "method",
						description = [[]],
						args = "(hParent: EntityHandle,bone: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBone"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetAttachmentFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAttachmentFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AttachToEntity"] = {
						type = "method",
						description = [[]],
						args = "(hParent: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearAttachment"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_ATTACHMENT_UPDATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_PLAYER_VIEW_YAW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_PLAYER_VIEW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_BONEMERGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_POSITION_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_UPDATE_EACH_FRAME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_SNAP_TO_ORIGIN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_FORCE_IN_PLACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_FORCE_ROTATION_IN_PLACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_FORCE_TRANSLATION_IN_PLACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AttachmentInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetOffset"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetRotation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["flags"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["LightMapComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetExposure"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["ReloadLightmapData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetExposureProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLightmapTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ConvertLightmapToBSPLuxelData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateLightmapUvBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLightmapAtlas"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetExposure"] = {
						type = "method",
						description = [[]],
						args = "(exposure: )",
						returns = "(void)",
						valuetype = "void"
					},
					["BakeSettings"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ResetColorTransform"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetColorTransform"] = {
								type = "method",
								description = [[]],
								args = "(config: std::basic_string,look: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							},
							["globalLightIntensityFactor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["denoise"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["createAsRenderJob"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["samples"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rebuildUvAtlas"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["height"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["exposure"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["width"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["TriggerRemoveComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["TriggerHurtComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SceneComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOcclusionCullingMethod"] = {
						type = "method",
						description = [[]],
						args = "(method: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(width: uint32,height: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["BuildRenderQueue"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo,renderMode: RenderMode)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDebugMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActiveCamera"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializeRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "(width: uint32,height: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetActiveCamera"] = {
						type = "method",
						description = [[]],
						args = "(hCam: CCameraComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["BeginDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateBuffers"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: prosper::ICommandBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWorldEnvironment"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWorldEnvironment"] = {
						type = "method",
						description = [[]],
						args = "(worldEnv: game.WorldEnvironment)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearWorldEnvironment"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCameraDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RenderPrepass"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo,renderMode: RenderMode)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRenderer"] = {
						type = "method",
						description = [[]],
						args = "(renderer: CRendererComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSceneIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParticleSystemColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParticleSystemColorFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderParticleSystems"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderQueue"] = {
						type = "method",
						description = [[]],
						args = "(renderMode: RenderMode,translucent: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(sceneOther: CSceneComponentHandleWrapper,linkCamera: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugMode"] = {
						type = "method",
						description = [[]],
						args = "(debugMode: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewCameraDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DEBUG_MODE_ALBEDO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_REFLECTANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_AMBIENT_OCCLUSION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_DIFFUSE_LIGHTING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_NORMAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_EMISSION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_NORMAL_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_METALNESS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_ROUGHNESS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_BRUTE_FORCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_CHC_PLUSPLUS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_BSP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_INERT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_OCTREE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_TARGET_TEXTURE_BLOOM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_TARGET_TEXTURE_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_TARGET_TEXTURE_DEPTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_IBL_IRRADIANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_IBL_PREFILTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ACTIVE_CAMERA_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CreateInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["sampleCount"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["FlashlightComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintSliderComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["RadiusComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetRadiusProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRadius"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRadius"] = {
						type = "method",
						description = [[]],
						args = "(radius: )",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_RADIUS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["WorldComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetBSPTree"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["BSPTree"] = {
						type = "class",
						description = [[]],
						childs = {
							["IsValid"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["IsClusterVisible"] = {
								type = "method",
								description = [[]],
								args = "(clusterSrc: uint32,clusterDst: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["FindLeafNodesInAABB"] = {
								type = "method",
								description = [[]],
								args = "(min: glm::vec,max: glm::vec)",
								returns = "(object)",
								valuetype = "object"
							},
							["FindLeafNode"] = {
								type = "method",
								description = [[]],
								args = "(origin: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRootNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetClusterVisibility"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetNodes"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetClusterCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Node"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetInternalNodeFirstFaceIndex"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetCluster"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetChildren"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetIndex"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(uint32)",
										valuetype = "uint32"
									},
									["IsLeaf"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetBounds"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetInternalNodeFaceCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVisibleLeafAreaBounds"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetInternalNodePlane"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									}
								}
							},

						}
					},

				}
			},
			["MapComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetMapIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["LogicComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["EVENT_ON_TICK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DebugBoxComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterSphere"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector,arg2: float)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["FuncPhysicsComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundScapeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["MicrophoneComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterComponent"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: lua_State,arg2: string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["GamemodeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["GetIdentifier"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["GetAuthor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["GetGamemodeVersion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Version)",
						valuetype = "Version"
					},
					["EVENT_ON_PLAYER_JOINED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_GAME_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_GAME_READY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MAP_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_DEATH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_SPAWNED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_DROPPED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_READY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FuncSoftPhysicsComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["RaytracingRendererComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PlayerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetStandEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "(eyelevel: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCrouchedWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCrouchedWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "(speed: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStandEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocalPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStandHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCrouchHeight"] = {
						type = "method",
						description = [[]],
						args = "(height: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCrouchHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStandHeight"] = {
						type = "method",
						description = [[]],
						args = "(height: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCrouchEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCrouchEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "(eyelevel: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetObserverMode"] = {
						type = "method",
						description = [[]],
						args = "(mode: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetObserverMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSprintSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetObserverModeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetObserverTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEntTarget: util::WeakHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetObserverTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlashlightEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToggleFlashlight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActionInput"] = {
						type = "method",
						description = [[]],
						args = "(input: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFlashlightEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetActionInputAxisMagnitude"] = {
						type = "method",
						description = [[]],
						args = "(input: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsKeyDown"] = {
						type = "method",
						description = [[]],
						args = "(key: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyViewRotationOffset"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRunSpeed"] = {
						type = "method",
						description = [[]],
						args = "(speed: )",
						returns = "(void)",
						valuetype = "void"
					},
					["PrintMessage"] = {
						type = "method",
						description = [[]],
						args = "(msg: std::basic_string,messageType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Respawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Kick"] = {
						type = "method",
						description = [[]],
						args = "(reason: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActionInputs"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetActionInputAxisMagnitude"] = {
						type = "method",
						description = [[]],
						args = "(input: uint32,magnitude: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetActionInput"] = {
						type = "method",
						description = [[]],
						args = "(input: uint32,pressed: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SendResource"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUtilityDrone"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)"
					},
					["GetTimeConnected"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRunSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "(speed: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSprintSpeed"] = {
						type = "method",
						description = [[]],
						args = "(speed: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetViewOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInFirstPersonMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MESSAGE_TYPE_CHAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MESSAGE_TYPE_CONSOLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_FIRSTPERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_THIRDPERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_ROAMING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_SHOULDER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_ACTION_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_OBSERVATION_MODE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ExplosionComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["FogControllerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterUuid"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["IteratorFilterEntity"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["SkyboxComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetSkyAngles"] = {
						type = "method",
						description = [[]],
						args = "(skyAngles: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSkyAngles"] = {
						type = "method",
						description = [[]],
						args = "(skyAngles: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["IteratorFilterModel"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DebugTextComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(text: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["PointConstraintDoFComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ColorComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(color: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_COLOR_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Animated2Component"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(playbackRate: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearAnimationManagers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveAnimationManager"] = {
						type = "method",
						description = [[]],
						args = "(manager: pragma::animation::AnimationManager)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetPlaybackRateProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAnimationManager"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::shared_ptr)",
						valuetype = "shared_ptr"
					},
					["GetAnimationManagers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetAnimationManager"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(object)",
						valuetype = "object"
					}
				}
			},
			["DebugPlaneComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilter"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["IKComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetIKControllerEnabled"] = {
						type = "method",
						description = [[]],
						args = "(ikControllerId: uint32,b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsIKControllerEnabled"] = {
						type = "method",
						description = [[]],
						args = "(ikControllerId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetIKEffectorPos"] = {
						type = "method",
						description = [[]],
						args = "(ikControllerId: uint32,effectorIdx: uint32,pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIKEffectorPos"] = {
						type = "method",
						description = [[]],
						args = "(ikControllerId: uint32,effectorIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ParentComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["UsableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["EVENT_CAN_USE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_USE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["AIComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetMoveSpeed"] = {
						type = "method",
						description = [[]],
						args = "(animId: uint32,speed: )",
						returns = "(void)",
						valuetype = "void"
					},
					["CanHear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxViewDistance"] = {
						type = "method",
						description = [[]],
						args = "(distance: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLookTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMoveSpeed"] = {
						type = "method",
						description = [[]],
						args = "(animId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLookTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearMoveSpeed"] = {
						type = "method",
						description = [[]],
						args = "(animId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint16,info: pragma::SAIComponent::AIAnimationInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["CancelSchedule"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearLookTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["StartSchedule"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSquad"] = {
						type = "method",
						description = [[]],
						args = "(squadName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsMoving"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSquadName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearRelationship"] = {
						type = "method",
						description = [[]],
						args = "(faction: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRelationship"] = {
						type = "method",
						description = [[]],
						args = "(faction: std::shared_ptr,disposition: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxViewDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxViewAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInMemory"] = {
						type = "method",
						description = [[]],
						args = "(hEntOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxViewAngle"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSquad"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDisposition"] = {
						type = "method",
						description = [[]],
						args = "(faction: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentSchedule"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMemory"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMemoryDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetControllable"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["Memorize"] = {
						type = "method",
						description = [[]],
						args = "(hEntOther: EntityHandle,memType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAnimationLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Forget"] = {
						type = "method",
						description = [[]],
						args = "(hEntOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHearingStrength"] = {
						type = "method",
						description = [[]],
						args = "(strength: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearMemory"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInViewCone"] = {
						type = "method",
						description = [[]],
						args = "(hEntOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHearingStrength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMemoryDuration"] = {
						type = "method",
						description = [[]],
						args = "(dur: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAIEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CanSee"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMemoryFragmentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasPrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNPCState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNPCState"] = {
						type = "method",
						description = [[]],
						args = "(state: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAIEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["EnableAI"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DisableAI"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MoveTo"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec,info: ai.MoveInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsControllable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["StartControl"] = {
						type = "method",
						description = [[]],
						args = "(hPl: SPlayerComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["LockAnimation"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["EndControl"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsControlled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["StopMoving"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsEnemy"] = {
						type = "method",
						description = [[]],
						args = "(hEntOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["TurnStep"] = {
						type = "method",
						description = [[]],
						args = "(turnTarget: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDistanceToMoveTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMoveTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasReachedDestination"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMoveActivity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetControllerActionInput"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TriggerScheduleInterrupt"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(animation: uint16,info: pragma::SAIComponent::AIAnimationInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_CONTROLLER_ACTION_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_CONTROL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_NPC_STATE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MEMORY_GAINED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_LOOK_TARGET_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TARGET_ACQUIRED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MEMORY_LOST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PATH_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PATH_NODE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PRIMARY_TARGET_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SUSPICIOUS_SOUND_HEARED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SCHEDULE_COMPLETE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SCHEDULE_STARTED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_START_CONTROL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TARGET_VISIBILITY_LOST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TARGET_VISIBILITY_REACQUIRED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SELECT_CONTROLLER_SCHEDULE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SELECT_SCHEDULE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AnimationInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetFacePrimaryTarget"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearFaceTarget"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFaceTarget"] = {
								type = "method",
								description = [[]],
								args = "(hEnt: EntityHandle)",
								returns = "(void)",
								valuetype = "void"
							},
							["flags"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["playAsSchedule"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["RenderTargetComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["CharacterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetViewAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["HolsterWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetViewRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAmmoCount"] = {
						type = "method",
						description = [[]],
						args = "(ammoType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWeapons"] = {
						type = "method",
						description = [[]],
						args = "(className: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["NormalizeViewRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActiveWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitboxPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LocalOrientationToWorld"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetJumpPowerProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFrozen"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWeaponCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMoveController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasWeapon"] = {
						type = "method",
						description = [[]],
						args = "(className: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFrozen"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAimRayData"] = {
						type = "method",
						description = [[]],
						args = "(maxDist: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSlopeLimitProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FootStep"] = {
						type = "method",
						description = [[]],
						args = "(foot: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNeckControllers"] = {
						type = "method",
						description = [[]],
						args = "(yawController: std::basic_string,pitchController: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNeckYawController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNeckPitchController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMoveController"] = {
						type = "method",
						description = [[]],
						args = "(moveController: std::basic_string,moveControllerY: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOrientationAxes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRelativeVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOrientationAxesRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOrientation"] = {
						type = "method",
						description = [[]],
						args = "(up: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveAmmo"] = {
						type = "method",
						description = [[]],
						args = "(ammoType: uint32,count: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsMoving"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalOrientationAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalOrientationRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DropActiveWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DeployWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hWep: SWeaponComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalOrientationViewAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalOrientationViewRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Attack4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WorldToLocalOrientation"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["PrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShootPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAmmoCount"] = {
						type = "method",
						description = [[]],
						args = "(ammoType: uint32,count: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAmmo"] = {
						type = "method",
						description = [[]],
						args = "(ammoType: uint32,count: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUpDirectionProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStepOffsetProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetJumpPower"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGodMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetJumpPower"] = {
						type = "method",
						description = [[]],
						args = "(jumpPower: )",
						returns = "(void)",
						valuetype = "void"
					},
					["DropWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hWep: SWeaponComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReloadWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Jump"] = {
						type = "method",
						description = [[]],
						args = "(velocity: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GiveWeapon"] = {
						type = "method",
						description = [[]],
						args = "(className: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGodMode"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hWep: SWeaponComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Kill"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStepOffset"] = {
						type = "method",
						description = [[]],
						args = "(stepOffset: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveWeapons"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SelectNextWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SelectPreviousWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TertiaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNoTarget"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNoTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFaction"] = {
						type = "method",
						description = [[]],
						args = "(faction: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFaction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrozenProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAlive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDead"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStepOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTurnSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Ragdolize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "(slopeLimit: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTurnSpeed"] = {
						type = "method",
						description = [[]],
						args = "(turnSpeed: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "(up: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_CALC_MOVEMENT_ACCELERATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CALC_MOVEMENT_DIRECTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CALC_MOVEMENT_SPEED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_JUMP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEPLOY_WEAPON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CALC_AIR_MOVEMENT_MODIFIER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_FOOT_STEP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_VIEW_ROTATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_IS_MOVING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_CHARACTER_ORIENTATION_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEATH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_KILLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RESPAWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SET_ACTIVE_WEAPON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PLAY_FOOTSTEP_SOUND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOOT_LEFT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOOT_RIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["OwnableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetOwner"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOwner"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_OWNER_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SoundDspComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["DebugConeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterBox"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector,arg2: math.Vector)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DebugPointComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspDistortionComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["DebugSphereComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["InfoLandmarkComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["GenericComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["EntityComponent"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetComponentId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNextTick"] = {
						type = "method",
						description = [[]],
						args = "(dt: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTickPolicy"] = {
						type = "method",
						description = [[]],
						args = "(tickPolicy: pragma::TickPolicy)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTickPolicy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(pragma::TickPolicy)",
						valuetype = "TickPolicy"
					},
					["GetNextTick"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RegisterNetEvent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetComponentName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddEventCallback"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["InjectEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,object: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(udm: udm.LinkedPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(udm: udm.LinkedPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(hComponentOther: BaseEntityComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["SendNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,packet: NetPacket)",
						returns = "(void)",
						valuetype = "void"
					},
					["BroadcastEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,object: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeEventCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,object: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CALLBACK_TYPE_COMPONENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CALLBACK_TYPE_ENTITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FREGISTER_BIT_NETWORKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FREGISTER_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SoundComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["Pause"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPlaying"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPlayOnSpawn"] = {
						type = "method",
						description = [[]],
						args = "(bPlayOnSpawn: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(pitch: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoundSource"] = {
						type = "method",
						description = [[]],
						args = "(sndName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGain"] = {
						type = "method",
						description = [[]],
						args = "(gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(rolloffFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinGain"] = {
						type = "method",
						description = [[]],
						args = "(minGain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxGain"] = {
						type = "method",
						description = [[]],
						args = "(maxGain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxDistance"] = {
						type = "method",
						description = [[]],
						args = "(maxDist: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetInnerConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(angle: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOuterConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(angle: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetReferenceDistance"] = {
						type = "method",
						description = [[]],
						args = "(referenceDist: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRelativeToListener"] = {
						type = "method",
						description = [[]],
						args = "(bRelative: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLooping"] = {
						type = "method",
						description = [[]],
						args = "(bLoop: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoundTypes"] = {
						type = "method",
						description = [[]],
						args = "(soundTypes: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Play"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["IteratorFilterClass"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: bool,arg3: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["FilterNameComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["ShouldPass"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_NAME_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IteratorFilterName"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: bool,arg3: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["IteratorFilterNameOrClass"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: bool,arg3: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["SoundDspEchoComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterCone"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector,arg2: math.Vector,arg3: float,arg4: float)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["GravityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetGravityScale"] = {
						type = "method",
						description = [[]],
						args = "(scale: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGravityOverride"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasGravityForceOverride"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasGravityDirectionOverride"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcBallisticVelocity"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec,destPos: glm::vec,fireAngle: ,maxSpeed: ,spread: ,maxPitch: ,maxYaw: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGravityDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGravity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGravityForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["LightDirectionalComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetAmbientColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DecalComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["CreateFromProjection"] = {
						type = "method",
						description = [[]],
						args = "(tMeshes: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["DebugDraw"] = {
						type = "method",
						description = [[]],
						args = "(duration: )",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["FireComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PropPhysicsComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["VelocityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["AddLocalAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularVelocityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVelocityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddLocalVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TransformComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LocalToWorld"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec,rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLastMoveTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "(hOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(q: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEyePos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(scale: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WorldToLocal"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec,rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetYaw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRoll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(pitch: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetYaw"] = {
						type = "method",
						description = [[]],
						args = "(yaw: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoll"] = {
						type = "method",
						description = [[]],
						args = "(roll: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxAxisScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDirection"] = {
						type = "method",
						description = [[]],
						args = "(hOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAbsMaxAxisScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDistance"] = {
						type = "method",
						description = [[]],
						args = "(hOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDotProduct"] = {
						type = "method",
						description = [[]],
						args = "(hOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["LightSpotComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetOuterCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOuterCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetInnerCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInnerCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["VehicleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetSpeedKmh"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSteeringFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSteeringWheel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasDriver"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDriver"] = {
						type = "method",
						description = [[]],
						args = "(hDriver: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDriver"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearDriver"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPhysicsVehicle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetupSteeringWheel"] = {
						type = "method",
						description = [[]],
						args = "(model: std::basic_string,maxSteeringAngle: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetupPhysics"] = {
						type = "method",
						description = [[]],
						args = "(vhcCreateInfo: phys.VehicleCreateInfo,oWheelModels: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_DRIVER_EXITED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DRIVER_ENTERED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["LightPointComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PropDynamicComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["LightSpotVolComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ParticleSystemComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetRenderParticleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddOperator"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetInitialColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsEmissionPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSpriteSheetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInitialColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetControlPointRotation"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GenerateModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetControlPointPose"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,pose: umath::Transform,timeStamp: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParticleBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEmissionRate"] = {
						type = "method",
						description = [[]],
						args = "(emissionRate: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetControlPointEntity"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(drawCmd: std::shared_ptr,scene: CSceneComponentHandleWrapper,renderer: pragma::CRasterizationRendererComponent,renderFlags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRemoveOnComplete"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParticleBufferIndexFromParticleIndex"] = {
						type = "method",
						description = [[]],
						args = "(ptIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "(bStopImmediately: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRadius"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetControlPointPose"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,timeStamp: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetExtent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimationSpriteSheetBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftParticles"] = {
						type = "method",
						description = [[]],
						args = "(bSoft: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSortParticles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimationDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNodeCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Die"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetColorFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDying"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSimulationTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveChild"] = {
						type = "method",
						description = [[]],
						args = "(hChild: CParticleSystemComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetExtent"] = {
						type = "method",
						description = [[]],
						args = "(extent: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftParticles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(alphaMode: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSortParticles"] = {
						type = "method",
						description = [[]],
						args = "(bSort: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOrientationType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsContinuous"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNextParticleEmissionCount"] = {
						type = "method",
						description = [[]],
						args = "(count: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetContinuous"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBloomColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["PauseEmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBloomColorFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEffectiveBloomColorFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBloomEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParticleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParticle"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParticles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxParticleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEffectiveAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEmissionRate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ResumeEmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLifeTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStartTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsActiveOrPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Simulate"] = {
						type = "method",
						description = [[]],
						args = "(tDelta: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ShouldAutoSimulate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParticleIndexFromParticleBufferIndex"] = {
						type = "method",
						description = [[]],
						args = "(ptBufIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddChild"] = {
						type = "method",
						description = [[]],
						args = "(hChild: CParticleSystemComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasChild"] = {
						type = "method",
						description = [[]],
						args = "(hChild: CParticleSystemComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParticleAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAnimated"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAutoSimulate"] = {
						type = "method",
						description = [[]],
						args = "(autoSimulate: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializeFromParticleSystemDefinition"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetControlPointEntity"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetControlPointPosition"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddInitializer"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddRenderer"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveInitializer"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveOperator"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveRenderer"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsStatic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParent"] = {
						type = "method",
						description = [[]],
						args = "(hParent: CParticleSystemComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveOperatorByType"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveRendererByType"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInitializers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["FindInitializer"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["FindOperator"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["FindRenderer"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["FindInitializerByType"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["FindOperatorByType"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["FindRendererByType"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNodeTarget"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32,pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNodePosition"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNodeTarget"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrevControlPointPose"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Start"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOrientationType"] = {
						type = "method",
						description = [[]],
						args = "(orientationType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRadius"] = {
						type = "method",
						description = [[]],
						args = "(radius: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRemoveOnComplete"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveInitializerByType"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mat: Material)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOperators"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "(renderMode: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RENDER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_WORLD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_STATIC"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_ALIGNED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_BILLBOARD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_UPRIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_FLAG_BIT_BLOOM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_FLAG_BIT_DEPTH_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_ADDITIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_PREMULTIPLIED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_ADDITIVE_BY_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_TRANSLUCENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_MASKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_OPAQUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ParticleOperator"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["CalcStrength"] = {
								type = "method",
								description = [[]],
								args = "(curTime: )",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["BaseRenderer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleRenderer ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["OnParticleCreated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetShader"] = {
								type = "method",
								description = [[]],
								args = "(shader: pragma::LuaShaderGUIParticle2D)",
								returns = "(void)",
								valuetype = "void"
							},
							["OnParticleDestroyed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Render"] = {
								type = "method",
								description = [[]],
								args = "(scene: pragma::CSceneComponent,renderer: pragma::CRasterizationRendererComponent,bloom: bool)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetShader"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Initialize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["OnParticleSystemStarted"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["OnParticleSystemStopped"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["Particle"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetSequence"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Die"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetRadius"] = {
								type = "method",
								description = [[]],
								args = "(radius: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetAlpha"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetOrigin"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetField"] = {
								type = "method",
								description = [[]],
								args = "(fieldId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetLife"] = {
								type = "method",
								description = [[]],
								args = "(life: )",
								returns = "(void)",
								valuetype = "void"
							},
							["SetPreviousPosition"] = {
								type = "method",
								description = [[]],
								args = "(prevPos: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRotationYaw"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetAlive"] = {
								type = "method",
								description = [[]],
								args = "(alive: bool)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVelocity"] = {
								type = "method",
								description = [[]],
								args = "(vel: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetRotationYaw"] = {
								type = "method",
								description = [[]],
								args = "(rot: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetPreviousPosition"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRadius"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetLife"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTimeAlive"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetCameraDistance"] = {
								type = "method",
								description = [[]],
								args = "(dist: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetInitialRotation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetInitialLife"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["CalcRandomFloat"] = {
								type = "method",
								description = [[]],
								args = "(min: ,max: ,seed: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetTimeAlive"] = {
								type = "method",
								description = [[]],
								args = "(life: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTimeCreated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetDeathTime"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetPosition"] = {
								type = "method",
								description = [[]],
								args = "(pos: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["Resurrect"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetExtent"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetLength"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetLength"] = {
								type = "method",
								description = [[]],
								args = "(len: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetCameraDistance"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetAnimationFrameOffset"] = {
								type = "method",
								description = [[]],
								args = "(offset: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetAnimationFrameOffset"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetWorldRotation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["IsDying"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetColor"] = {
								type = "method",
								description = [[]],
								args = "(color: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["Reset"] = {
								type = "method",
								description = [[]],
								args = "(t: )",
								returns = "(void)",
								valuetype = "void"
							},
							["IsAlive"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ShouldDraw"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["CalcRandomInt"] = {
								type = "method",
								description = [[]],
								args = "(min: int32,max: int32,seed: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSequence"] = {
								type = "method",
								description = [[]],
								args = "(sequence: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["CalcRandomFloatExp"] = {
								type = "method",
								description = [[]],
								args = "(min: ,max: ,exp: ,seed: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetColor"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetRotation"] = {
								type = "method",
								description = [[]],
								args = "(rot: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetInitialLength"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetAlpha"] = {
								type = "method",
								description = [[]],
								args = "(a: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetInitialColor"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetInitialAnimationFrameOffset"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetLifeSpan"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetInitialAlpha"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetInitialRadius"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetOrigin"] = {
								type = "method",
								description = [[]],
								args = "(origin: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetWorldRotation"] = {
								type = "method",
								description = [[]],
								args = "(rot: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVelocity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetAngularVelocity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetAngularVelocity"] = {
								type = "method",
								description = [[]],
								args = "(vel: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetTimeCreated"] = {
								type = "method",
								description = [[]],
								args = "(time: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRotation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetPosition"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetField"] = {
								type = "method",
								description = [[]],
								args = "(fieldId: uint32,value: )",
								returns = "(void)",
								valuetype = "void"
							},
							["FIELD_ID_ANGULAR_VELOCITY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ALPHA"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_CREATION_TIME"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_COLOR"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_VELOCITY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_INVALID"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_COUNT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_LENGTH"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_LIFE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ORIGIN"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_POS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_RADIUS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ROT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ROT_YAW"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_SEQUENCE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["BaseInitializer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleInitializer ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["OnParticleCreated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["OnParticleDestroyed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Initialize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["OnParticleSystemStarted"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["OnParticleSystemStopped"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["BaseOperator"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleOperator ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["OnParticleCreated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["OnParticleDestroyed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Simulate"] = {
								type = "method",
								description = [[]],
								args = "(dt: ,strength: )",
								returns = "(void)",
								valuetype = "void"
							},
							["Initialize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["OnParticleSystemStarted"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["OnParticleSystemStopped"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["ParticleRenderer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {

						}
					},
					["ParticleInitializer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {

						}
					},
					["ParticleModifier"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetKeyValues"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetType"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetPriority"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(key: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetPriority"] = {
								type = "method",
								description = [[]],
								args = "(priority: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(key: std::basic_string,value: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetParticleSystem"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},

				}
			},
			["QuakeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SmokeTrailComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["EnvTimeScaleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["WindComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["RasterizationRendererComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetRenderTargetTextureDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ScheduleMeshForRendering"] = {
						type = "method",
						description = [[]],
						args = "(scene: CSceneComponentHandleWrapper,renderMode: uint32,mat: Material,hEnt: EntityHandle,mesh: game.Model.Mesh.Sub)",
						returns = "(void)",
						valuetype = "void"
					},
					["ExecutePrepass"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReloadPresentationRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ExecuteLightingPass"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordPrepass"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrepassDepthTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordLightingPass"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrepassCommandBufferRecorder"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::shared_ptr)",
						valuetype = "shared_ptr"
					},
					["GetShadowCommandBufferRecorder"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::shared_ptr)",
						valuetype = "shared_ptr"
					},
					["GetLightingPassCommandBufferRecorder"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::shared_ptr)",
						valuetype = "shared_ptr"
					},
					["EndRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPostPrepassDepthTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdatePrepassRenderBuffers"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateLightingPassRenderBuffers"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrepassNormalTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSSAOEnabled"] = {
						type = "method",
						description = [[]],
						args = "(ssaoEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["BeginRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrepassShader"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShaderOverride"] = {
						type = "method",
						description = [[]],
						args = "(srcName: std::basic_string,dstName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearShaderOverride"] = {
						type = "method",
						description = [[]],
						args = "(srcName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPrepassMode"] = {
						type = "method",
						description = [[]],
						args = "(mode: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrepassMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSSAOEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLightSourceDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPostProcessingDepthDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPostProcessingHDRColorDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBloomTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_POST_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_POST_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_POST_EXECUTE_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_POST_EXECUTE_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PREPASS_MODE_DISABLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PREPASS_MODE_DEPTH_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PREPASS_MODE_EXTENDED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RECORD_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RECORD_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_EXECUTE_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_EXECUTE_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FilterClassComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["ShouldPass"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["KinematicComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["FuncPortalComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["Entity"] = {
				type = "class",
				description = [[]],
				childs = {
					["RemoveComponent"] = {
						type = "method",
						description = [[]],
						args = "(componentId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Spawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializePhysics"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsNPC"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsCharacter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTransformComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShared"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsMapEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,val: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsWorld"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Disable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInert"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveSafely"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetClass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsScripted"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParent"] = {
						type = "method",
						description = [[]],
						args = "(hParent: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsStatic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSpawned"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TakeDamage"] = {
						type = "method",
						description = [[]],
						args = "(dmgInfo: game.DamageInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetComponents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsVehicle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveEntityOnRemoval"] = {
						type = "method",
						description = [[]],
						args = "(hEntOther: EntityHandle,Bool: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDisabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSpawnFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearComponents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPose"] = {
						type = "method",
						description = [[]],
						args = "(t: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSkin"] = {
						type = "method",
						description = [[]],
						args = "(skin: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddComponent"] = {
						type = "method",
						description = [[]],
						args = "(componentId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPhysicsComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNameComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetModelComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHealth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSnapshotDirty"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetComponent"] = {
						type = "method",
						description = [[]],
						args = "(object: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["C"] = {
						type = "method",
						description = [[]],
						args = "(object: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWeaponComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGenericComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAirDensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVehicleComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPlayerComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSynchronized"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTimeScaleComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAIComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUuid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimatedComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetUuid"] = {
						type = "method",
						description = [[]],
						args = "(uuid: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDynamic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSkin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttachmentPose"] = {
						type = "method",
						description = [[]],
						args = "(attId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetModel"] = {
						type = "method",
						description = [[]],
						args = "(mdl: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Enable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsShared"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DropToFloor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["BroadcastNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(protocol: uint32,eventId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSynchronized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DestroyPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActivity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(slot: int32,anim: std::basic_string,flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayLayeredActivity"] = {
						type = "method",
						description = [[]],
						args = "(slot: int32,activity: uint32,flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["StopLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(slot: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetModelName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CreateSound"] = {
						type = "method",
						description = [[]],
						args = "(sndname: std::basic_string,soundType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOwner"] = {
						type = "method",
						description = [[]],
						args = "(hOwner: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddNetworkedComponent"] = {
						type = "method",
						description = [[]],
						args = "(component: std::basic_string)",
						returns = "(object)",
						valuetype = "object"
					},
					["GetOwner"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TurnOn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TurnOff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTurnedOff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveFromScene"] = {
						type = "method",
						description = [[]],
						args = "(scene: CSceneComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(udm: udm.LinkedPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SendNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(protocol: uint32,eventId: uint32,rp: pragma::networking::TargetRecipientFilter)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(velocity: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddVelocity"] = {
						type = "method",
						description = [[]],
						args = "(velocity: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(velocity: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(velocity: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["EmitSound"] = {
						type = "method",
						description = [[]],
						args = "(sndname: std::basic_string,soundType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(udm: udm.LinkedPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(bgId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCharacterComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["GetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Input"] = {
						type = "method",
						description = [[]],
						args = "(input: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHealth"] = {
						type = "method",
						description = [[]],
						args = "(health: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "(health: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(mask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(bgId: uint32,id: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasComponent"] = {
						type = "method",
						description = [[]],
						args = "(object: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsClientsideOnly"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetClientIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSceneFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddToScene"] = {
						type = "method",
						description = [[]],
						args = "(scene: CSceneComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveFromAllScenes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInScene"] = {
						type = "method",
						description = [[]],
						args = "(scene: CSceneComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddChild"] = {
						type = "method",
						description = [[]],
						args = "(hEntOther: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_POST_SPAWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_KEY_VALUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_COMPONENT_ADDED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_REMOVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_COMPONENT_REMOVED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SPAWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SCENE_FLAGS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SHARED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_LOCAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ScoreComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetScoreProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScore"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScore"] = {
						type = "method",
						description = [[]],
						args = "(score: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddScore"] = {
						type = "method",
						description = [[]],
						args = "(score: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SubtractScore"] = {
						type = "method",
						description = [[]],
						args = "(score: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_SCORE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ButtonComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PlayerSpawnComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["EnvSoundProbeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["BotComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspEAXReverbComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintConeTwistComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintFixedComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintHingeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PathNodeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ModelComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetModel"] = {
						type = "method",
						description = [[]],
						args = "(mdl: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSkin"] = {
						type = "method",
						description = [[]],
						args = "(skin: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSkin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxDrawDistance"] = {
						type = "method",
						description = [[]],
						args = "(maxDrawDist: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(groupId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSkinProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRandomSkin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBodyGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["SetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(groupId: uint32,val: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderMaterial"] = {
						type = "method",
						description = [[]],
						args = "(matIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBodyGroups"] = {
						type = "method",
						description = [[]],
						args = "(t: table)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetModelName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupBlendController"] = {
						type = "method",
						description = [[]],
						args = "(controller: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaterialOverride"] = {
						type = "method",
						description = [[]],
						args = "(matSrc: std::basic_string,matDst: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupAttachment"] = {
						type = "method",
						description = [[]],
						args = "(attachment: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitboxCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitboxBounds"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(boneName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttachmentTransform"] = {
						type = "method",
						description = [[]],
						args = "(attachment: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLOD"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterialOverride"] = {
						type = "method",
						description = [[]],
						args = "(matIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxDrawDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearMaterialOverride"] = {
						type = "method",
						description = [[]],
						args = "(matIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_MODEL_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MODEL_MATERIALS_LOADED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_MESHES_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["CSMComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PropComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["TriggerGravityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["TriggerPushComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["NameComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNameProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TouchComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetTriggerFlags"] = {
						type = "method",
						description = [[]],
						args = "(triggerFlags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTriggerFlags"] = {
						type = "method",
						description = [[]],
						args = "(triggerFlags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTouchingEntityCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetTouchingEntities"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["TRIGGER_FLAG_EVERYTHING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_BIT_PLAYERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_BIT_NPCS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_BIT_PHYSICS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CAN_TRIGGER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_TOUCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_START_TOUCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TRIGGER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TRIGGER_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["NetworkedComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ObservableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetLocalCameraOrigin"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32,origin: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalCameraOrigin"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalCameraOffset"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32,offset: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalCameraOffset"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCameraOffsetProperty"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCameraData"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCameraEnabled"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32,enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCameraEnabledProperty"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["CAMERA_TYPE_FIRST_PERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CAMERA_TYPE_THIRD_PERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CameraData"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetAngleLimits"] = {
								type = "method",
								description = [[]],
								args = "(min: math.EulerAngles,max: math.EulerAngles)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetAngleLimits"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearAngleLimits"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["localOrigin"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["offset"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rotateWithObservee"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["enabled"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["IOComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["Input"] = {
						type = "method",
						description = [[]],
						args = "(input: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["StoreOutput"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,info: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["FireOutput"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,hEnt: EntityHandle,flags: pragma::BaseIOComponent::IoFlags)",
						returns = "(void)",
						valuetype = "void"
					},
					["IO_FLAG_BIT_FORCE_DELAYED_FIRE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IO_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ShooterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["FireBullets"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_FIRE_BULLETS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseEntity"] = {
				type = "class",
				inherits = "ents.Entity",
				description = [[]],
				childs = {
					["Initialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BaseEntityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Initialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnTick"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnRemove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnEntitySpawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnAttachedToEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNetworked"] = {
						type = "method",
						description = [[]],
						args = "(bNetworked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnDetachedFromEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsNetworked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShouldTransmitSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(bSend: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["ShouldTransmitSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddEntityComponent"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,methodNameOrFunction: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVersion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FlagCallbackForRemoval"] = {
						type = "method",
						description = [[]],
						args = "(hCb: CallbackHandle,callbackType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["BindComponentInitEvent"] = {
						type = "method",
						description = [[]],
						args = "(componentId: uint32,methodNameOrFunction: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["BindEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,methodNameOrFunction: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnMemberValueChanged"] = {
						type = "method",
						description = [[]],
						args = "(memberIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SendData"] = {
						type = "method",
						description = [[]],
						args = "(packet: NetPacket,rp: net.ClientRecipientFilter)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReceiveNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(pl: SPlayerComponentHandleWrapper,evId: uint32,packet: NetPacket)",
						returns = "(void)",
						valuetype = "void"
					},
					["SendSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(packet: NetPacket,pl: SPlayerComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEntityComponent"] = {
						type = "method",
						description = [[]],
						args = "(componentName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReceiveData"] = {
						type = "method",
						description = [[]],
						args = "(packet: NetPacket)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReceiveSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(packet: NetPacket)",
						returns = "(void)",
						valuetype = "void"
					},
					["MEMBER_FLAG_BIT_USE_HAS_GETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_USE_IS_GETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT_NETWORKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT_SNAPSHOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_SNAPSHOT_DATA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_TRANSMIT_ON_CHANGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_GETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_STORE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_SETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_KEY_VALUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_PROPERTY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_NETWORKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_OUTPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["AnimatedComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateEffectiveBoneTransforms"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBindPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBindPose"] = {
						type = "method",
						description = [[]],
						args = "(frame: Frame)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(slot: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearAnimationEvents"] = {
						type = "method",
						description = [[]],
						args = "(anim: std::basic_string,frameId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCycle"] = {
						type = "method",
						description = [[]],
						args = "(cycle: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneBindPose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCycle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneRotation"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,pos: glm::vec,ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["InjectAnimationEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,args: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexPosition"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: std::shared_ptr,vertexId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGlobalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,pos: glm::vec,rot: glm::qua,scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAnimationEvent"] = {
						type = "method",
						description = [[]],
						args = "(anim: std::basic_string,frameId: uint32,f: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(controller: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalBonePos"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["BindAnimationEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,component: BaseEntityComponentHandleWrapper,methodName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(rate: )",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayLayeredActivity"] = {
						type = "method",
						description = [[]],
						args = "(slot: int32,activity: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBoneRenderMatrix"] = {
						type = "method",
						description = [[]],
						args = "(boneIndex: uint32,m: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPlaybackRateProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRootPoseBoneId"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(slot: int32,anim: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBonePos"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRootPoseBoneId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["GetBoneRenderMatrices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,pose: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnimatedRootPoseTransformEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(controller: std::basic_string,val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAnimatedRootPoseTransformEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddRootPoseBone"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["GetBaseAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(pragma::FPlayAnim)",
						valuetype = "FPlayAnim"
					},
					["SetGlobalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,pose: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBaseAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: pragma::FPlayAnim)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLayeredAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(layerIdx: uint32)",
						returns = "(object)",
						valuetype = "object"
					},
					["GetLayeredActivity"] = {
						type = "method",
						description = [[]],
						args = "(slot: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLayeredAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(layerIdx: uint32,flags: pragma::FPlayAnim)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGlobalBonePos"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGlobalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSkeletonUpdateCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimationObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActivity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLayeredAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["StopLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(slot: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyLayeredAnimations"] = {
						type = "method",
						description = [[]],
						args = "(dt: )",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetBoneMatrix"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBonePos"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGlobalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneAngles"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneScale"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,pose: umath::Transform)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBoneAngles"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBoneScale"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,pos: glm::vec,rot: glm::qua,scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGlobalBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEffectiveBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEffectiveBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: std::basic_string,t: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneRenderMatrix"] = {
						type = "method",
						description = [[]],
						args = "(boneIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalVertexPosition"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: std::shared_ptr,vertexId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AreSkeletonUpdateCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_MAINTAIN_ANIMATION_MOVEMENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_MAINTAIN_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_MAINTAIN_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_LOOP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_SNAP_TO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_RESET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_TRANSFORM_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_POSES_FINALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_ANIMATION_EVENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATIONS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATION_COMPLETE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_LAYERED_ANIMATION_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BLEND_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATION_RESET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATION_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_LAYERED_ANIMATION_COMPLETE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_LAYERED_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_LAYERED_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_STOP_LAYERED_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PLAY_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_UPDATE_BONES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_MATRICES_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_UPDATE_BONE_POSES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_BUFFER_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SKELETON_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_TRANSLATE_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_TRANSLATE_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_TRANSLATE_LAYERED_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetRenderClipPlane"] = {
						type = "method",
						description = [[]],
						args = "(clipPlane: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderModeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderOffsetTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalRenderSphereBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearRenderClipPlane"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearDepthBias"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAbsoluteRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAbsoluteRenderSphereBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsReceivingShadows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(min: glm::vec,max: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLODMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRenderBufferDirty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLodRenderMeshes"] = {
						type = "method",
						description = [[]],
						args = "(lod: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetExemptFromOcclusionCulling"] = {
						type = "method",
						description = [[]],
						args = "(exempt: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearRenderOffsetTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsExemptFromOcclusionCulling"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetReceiveShadows"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTransformationMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcRayIntersection"] = {
						type = "method",
						description = [[]],
						args = "(start: glm::vec,dir: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthPassEnabled"] = {
						type = "method",
						description = [[]],
						args = "(depthPassEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDepthPassEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderClipPlane"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShouldCastShadows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetRenderOffsetTransform"] = {
						type = "method",
						description = [[]],
						args = "(pose: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["ShouldDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ShouldDrawShadow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ClearBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(d: ,delta: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "(mode: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_SHOULD_DRAW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_DRAW_SHADOW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_WORLD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_SKYBOX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_VIEW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_WATER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEPTH_BIAS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_CLIP_PLANE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_BOUNDS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_MODE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_BUFFERS_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_UPDATE_RENDER_MATRICES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_UPDATE_INSTANTIABILITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SoundEmitterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetSounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CreateSound"] = {
						type = "method",
						description = [[]],
						args = "(sndname: std::basic_string,soundType: uint32,bTransmit: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["EmitSound"] = {
						type = "method",
						description = [[]],
						args = "(sndname: std::basic_string,soundType: uint32,gain: ,pitch: ,bTransmit: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["StopSounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_SOUND_CREATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ToggleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["TurnOn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TurnOff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Toggle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTurnedOff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTurnedOnProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_TURN_OFF"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TURN_ON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["GlobalComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetGlobalName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGlobalName"] = {
						type = "method",
						description = [[]],
						args = "(globalName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["WheelComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspEqualizerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointTargetComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ViewBodyComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["WaterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["CreateSplash"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec,radius: ,force: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStiffness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(coefficient: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStiffness"] = {
						type = "method",
						description = [[]],
						args = "(stiffness: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPropagation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPropagation"] = {
						type = "method",
						description = [[]],
						args = "(propagation: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWaterVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(coefficient: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWaterVelocity"] = {
						type = "method",
						description = [[]],
						args = "(velocity: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDensity"] = {
						type = "method",
						description = [[]],
						args = "(density: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcLineSurfaceIntersection"] = {
						type = "method",
						description = [[]],
						args = "(lineOrigin: glm::vec,lineDir: glm::vec,bCull: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWaterPlane"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ProjectToSurface"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWaterSceneDepthTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetReflectionScene"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWaterSceneTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_WATER_SURFACE_SIMULATOR_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FlammableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["Ignite"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIgnitableProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsOnFire"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsIgnitable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Extinguish"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetIgnitable"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOnFireProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EVENT_ON_EXTINGUISHED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_IGNITED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["CompositeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetEntities"] = {
						type = "method",
						description = [[]],
						args = "(groupName: std::basic_string)",
						returns = "(object)",
						valuetype = "object"
					},
					["GetRootGroup"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(ents.CompositeComponent.CompositeGroup)",
						valuetype = "CompositeGroup"
					},
					["AddEntity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: EntityHandle,groupName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearEntities"] = {
						type = "method",
						description = [[]],
						args = "(groupName: std::basic_string,safely: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["CompositeGroup"] = {
						type = "class",
						description = [[]],
						childs = {
							["RemoveEntity"] = {
								type = "method",
								description = [[]],
								args = "(hEnt: EntityHandle)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearEntities"] = {
								type = "method",
								description = [[]],
								args = "(groupName: std::basic_string,safely: bool)",
								returns = "(void)",
								valuetype = "void"
							},
							["AddChildGroup"] = {
								type = "method",
								description = [[]],
								args = "(name: std::basic_string)",
								returns = "(ents.CompositeComponent.CompositeGroup)",
								valuetype = "CompositeGroup"
							},
							["GetEntities"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["GetChildGroups"] = {
								type = "method",
								description = [[]],
								args = "(name: std::basic_string)",
								returns = "(object)",
								valuetype = "object"
							},
							["AddEntity"] = {
								type = "method",
								description = [[]],
								args = "(hEnt: EntityHandle,groupName: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},

				}
			},
			["TimeScaleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetTimeScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTimeScale"] = {
						type = "method",
						description = [[]],
						args = "(timeScale: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEffectiveTimeScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["SoundDspFlangerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["CameraComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetFOV"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAspectRatio"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFOVRad"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNearZ"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrustumPlanes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrustumPoints"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNearPlanePoint"] = {
						type = "method",
						description = [[]],
						args = "(uv: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFarPlanePoint"] = {
						type = "method",
						description = [[]],
						args = "(uv: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPlanePoint"] = {
						type = "method",
						description = [[]],
						args = "(z: ,uv: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrustumNeighbors"] = {
						type = "method",
						description = [[]],
						args = "(planeID: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFarZ"] = {
						type = "method",
						description = [[]],
						args = "(farZ: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrustumPlaneCornerPoints"] = {
						type = "method",
						description = [[]],
						args = "(planeA: int32,planeB: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["CreateFrustumKDop"] = {
						type = "method",
						description = [[]],
						args = "(uvStart: glm::vec,uvEnd: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["CreateFrustumMesh"] = {
						type = "method",
						description = [[]],
						args = "(uvStart: glm::vec,uvEnd: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ScreenSpaceToWorldSpace"] = {
						type = "method",
						description = [[]],
						args = "(uv: glm::vec,width: ,height: )",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["WorldSpaceToScreenSpace"] = {
						type = "method",
						description = [[]],
						args = "(point: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WorldSpaceToScreenSpaceDirection"] = {
						type = "method",
						description = [[]],
						args = "(dir: glm::vec)",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["CalcScreenSpaceDistance"] = {
						type = "method",
						description = [[]],
						args = "(point: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["DepthToDistance"] = {
						type = "method",
						description = [[]],
						args = "(depth: ,nearZ: ,farZ: )",
						returns = "()",
						valuetype = ""
					},
					["GetNearPlaneCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcRayDirection"] = {
						type = "method",
						description = [[]],
						args = "(uv: glm::vec)",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["SetNearZ"] = {
						type = "method",
						description = [[]],
						args = "(nearZ: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPlaneBoundaries"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAspectRatio"] = {
						type = "method",
						description = [[]],
						args = "(aspectRatio: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAspectRatioProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFOVProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFarZProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNearZProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewMatrixProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetProjectionMatrixProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFarPlaneBounds"] = {
						type = "method",
						description = [[]],
						args = "(z: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNearPlaneBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "(mat: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "(mat: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LookAt"] = {
						type = "method",
						description = [[]],
						args = "(lookAtPos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFarPlaneCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateMatrices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFarPlaneBoundaries"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFOV"] = {
						type = "method",
						description = [[]],
						args = "(fov: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFarZ"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPlaneCenter"] = {
						type = "method",
						description = [[]],
						args = "(z: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNearPlaneBoundaries"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DEFAULT_FAR_Z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEFAULT_FOV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEFAULT_NEAR_Z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEFAULT_VIEWMODEL_FOV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["vrp"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["EyeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetEyePose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetViewTarget"] = {
						type = "method",
						description = [[]],
						args = "(viewTarget: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEyeballState"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearViewTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEyeJitter"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBlinkingEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEyeShift"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEyeShift"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32,eyeShift: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEyeJitter"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32,eyeJitter: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEyeSize"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcEyeballPose"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBlinkDuration"] = {
						type = "method",
						description = [[]],
						args = "(blinkDuration: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlinkDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBlinkingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(blinkingEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIrisDilation"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetIrisDilation"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32,dilation: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEyeSize"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32,eyeSize: )",
						returns = "(void)",
						valuetype = "void"
					},
					["EyeballState"] = {
						type = "class",
						description = [[]],
						childs = {
							["origin"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisProjectionV"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["up"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["forward"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisProjectionU"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["right"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["RendererComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetPresentationTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHDRPresentationTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializeRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "(scene: CSceneComponentHandleWrapper,width: uint32,height: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetSceneTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["VertexAnimatedComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["UpdateVertexAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "(drawCmd: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexAnimationBufferMeshOffset"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalVertexPosition"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: std::shared_ptr,vertexId: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["FlexComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetFlexController"] = {
						type = "method",
						description = [[]],
						args = "(flexController: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcFlexValue"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexAnimationCycle"] = {
						type = "method",
						description = [[]],
						args = "(id: std::basic_string)",
						returns = "()",
						valuetype = ""
					},
					["GetFlexWeight"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlexController"] = {
						type = "method",
						description = [[]],
						args = "(flexName: std::basic_string,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScaledFlexController"] = {
						type = "method",
						description = [[]],
						args = "(flexControllerId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlexControllerScale"] = {
						type = "method",
						description = [[]],
						args = "(scale: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexControllerScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexWeights"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlexWeight"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32,weight: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearFlexWeightOverride"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasFlexWeightOverride"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlexWeightOverride"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32,weight: )",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(id: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["StopFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(id: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlexAnimationCycle"] = {
						type = "method",
						description = [[]],
						args = "(id: std::basic_string,cycle: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlexAnimationPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(id: std::basic_string,playbackRate: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetFlexAnimationCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["EVENT_ON_FLEX_CONTROLLERS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ViewModelComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					}
				}
			},
			["LightMapReceiverComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["UpdateLightmapUvData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["PBRConverterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GenerateAmbientOcclusionMaps"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["EnvTimescaleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["WeatherComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ReflectionProbeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetIBLStrength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetIBLStrength"] = {
						type = "method",
						description = [[]],
						args = "(strength: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIBLMaterialFilePath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["CaptureIBLReflectionsFromScene"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RequiresRebuild"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["SkyCameraComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ShadowMapComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ShadowManagerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["WaterSurfaceComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ListenerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SoftBodyComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["RaytracingComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["BSPLeafComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["BSPComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["_G"] = {
		type = "lib",
		description = [[]],
		childs = {
			["ec"] = {
				type = "function",
				description = [[]],
				args = "(o: object,o2: object)",
				returns = "(object)",
				valuetype = "object"
			},
			["include"] = {
				type = "function",
				description = [[]],
				args = "(f: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["e"] = {
				type = "function",
				description = [[]],
				args = "(o: object)",
				returns = "(object)",
				valuetype = "object"
			},
			["class_names"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(luabind::object)",
				valuetype = "object"
			},
			["Quaternion"] = {
				type = "function",
				description = [[]],
				args = "(forward: glm::vec,up: glm::vec)",
				returns = "(glm::qua)",
				valuetype = "qua"
			},
			["exec"] = {
				type = "function",
				description = [[]],
				args = "(f: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["class_info"] = {
				type = "function",
				description = [[]],
				args = "(arg0: luabind::argument)",
				returns = "(class_info_data)",
				valuetype = "class_info_data"
			},
			["get_script_path"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			}
		}
	},
	["phys"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Heightfield"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {
					["SetHeight"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,height: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUpAxis"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Shape"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["IsConvex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsConvexHull"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsHeightfield"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTriangleShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalculateLocalInertia"] = {
						type = "method",
						description = [[]],
						args = "(mass: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: )",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TriangleShape"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {

				}
			},
			["FixedConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {

				}
			},
			["SliderConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetSoftness"] = {
						type = "method",
						description = [[]],
						args = "(softness: )",
						returns = "(void)",
						valuetype = "void"
					},
					["DisableLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(damping: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLimits"] = {
						type = "method",
						description = [[]],
						args = "(lower: ,upper: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(restitution: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLimits"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ChassisCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddShapeIndex"] = {
						type = "method",
						description = [[]],
						args = "(shapeIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShapeIndices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["momentOfInertia"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["centerOfMass"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Transform"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetIdentity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsIdentity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["TranslateGlobal"] = {
						type = "method",
						description = [[]],
						args = "(v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["TranslateLocal"] = {
						type = "method",
						description = [[]],
						args = "(v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RotateLocal"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(rotation: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Interpolate"] = {
						type = "method",
						description = [[]],
						args = "(dst: umath::Transform,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["InterpolateToIdentity"] = {
						type = "method",
						description = [[]],
						args = "(factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(tOther: umath::Transform)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TransformLocal"] = {
						type = "method",
						description = [[]],
						args = "(t2: umath::Transform)",
						returns = "(void)",
						valuetype = "void"
					},
					["TransformGlobal"] = {
						type = "method",
						description = [[]],
						args = "(t2: umath::Transform)",
						returns = "(void)",
						valuetype = "void"
					},
					["RotateGlobal"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMatrix"] = {
						type = "method",
						description = [[]],
						args = "(m: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["pitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["yaw"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["roll"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RigidBody"] = {
				type = "class",
				inherits = "phys.CollisionObj phys.Base",
				description = [[]],
				childs = {
					["SetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTotalTorque"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInertia"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(linDamping: ,angDamping: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInvInertiaTensorWorld"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearForces"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTotalForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneID"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(linDamping: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBoneID"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetKinematic"] = {
						type = "method",
						description = [[]],
						args = "(bKinematic: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(threshold: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyImpulse"] = {
						type = "method",
						description = [[]],
						args = "(impulse: glm::vec,relPos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(threshold: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSleepingThresholds"] = {
						type = "method",
						description = [[]],
						args = "(linear: ,angular: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCenterOfMassOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCenterOfMassOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(angDamping: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsKinematic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(force: glm::vec,relPos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyTorque"] = {
						type = "method",
						description = [[]],
						args = "(torque: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyTorqueImpulse"] = {
						type = "method",
						description = [[]],
						args = "(torque: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["RayCastData"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSource"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShape"] = {
						type = "method",
						description = [[]],
						args = "(shape: pragma::physics::IConvexShape)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTargetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSourceRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFilter"] = {
						type = "method",
						description = [[]],
						args = "(object: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSourceTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTargetTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSourceOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTargetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSourceRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTargetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(mask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["CompoundShape"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {

				}
			},
			["ScaledTransform"] = {
				type = "class",
				inherits = "phys.Transform",
				description = [[]],
				childs = {
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ConvexHullShape"] = {
				type = "class",
				inherits = "phys.ConvexShape phys.Shape phys.Base",
				description = [[]],
				childs = {
					["AddPoint"] = {
						type = "method",
						description = [[]],
						args = "(point: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddTriangle"] = {
						type = "method",
						description = [[]],
						args = "(idx0: uint32,idx1: uint32,idx2: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReservePoints"] = {
						type = "method",
						description = [[]],
						args = "(numPoints: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReserveTriangles"] = {
						type = "method",
						description = [[]],
						args = "(numTris: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Build"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["GhostObj"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["WheelCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FLAG_BIT_FRONT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_LEFT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_REAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_RIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["chassisOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["suspension"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxHandBrakeTorque"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxSteeringAngle"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["momentOfInertia"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["radius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shapeIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tireType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BoxShape"] = {
				type = "class",
				inherits = "phys.ConvexShape phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetHalfExtents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Vehicle"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["SetGear"] = {
						type = "method",
						description = [[]],
						args = "(gear: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGearDown"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGearUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGearSwitchTime"] = {
						type = "method",
						description = [[]],
						args = "(switchTime: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetUseDigitalInputs"] = {
						type = "method",
						description = [[]],
						args = "(useDigitalInputs: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetForwardSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ChangeToGear"] = {
						type = "method",
						description = [[]],
						args = "(gear: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ShouldUseAutoGears"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentGear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSteerFactor"] = {
						type = "method",
						description = [[]],
						args = "(turnFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEngineRotationSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRestState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ResetControls"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWheelRotationAngle"] = {
						type = "method",
						description = [[]],
						args = "(wheelIdx: uint32,angle: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWheelRotationSpeed"] = {
						type = "method",
						description = [[]],
						args = "(wheelIdx: uint32,speed: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInAir"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWheelCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSidewaysSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetUseAutoGears"] = {
						type = "method",
						description = [[]],
						args = "(useAutoGears: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBrakeFactor"] = {
						type = "method",
						description = [[]],
						args = "(brakeFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHandBrakeFactor"] = {
						type = "method",
						description = [[]],
						args = "(brakeFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAccelerationFactor"] = {
						type = "method",
						description = [[]],
						args = "(accFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GEAR_TWENTYSIXTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_THIRTIETH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_ELEVENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_EIGHTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYSECOND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_EIGHTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_NEUTRAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FIFTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FIFTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FIRST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FOURTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FOURTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_NINETEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_NINTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYSEVENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_REVERSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYNINTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SECOND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SEVENTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SEVENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SIXTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SIXTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_THIRD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_THIRTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWELFTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTIETH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYEIGHTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYFIFTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYFIRST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYFOURTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYTHIRD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SoftBody"] = {
				type = "class",
				inherits = "phys.CollisionObj phys.Base",
				description = [[]],
				childs = {
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LocalVertexIndexToNodeIndex"] = {
						type = "method",
						description = [[]],
						args = "(localVertexIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftVsRigidHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDensity"] = {
						type = "method",
						description = [[]],
						args = "(density: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["NodeIndexToLocalVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(nodeIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnisotropicFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterialVolumeStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AppendAnchor"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32,hRigidBody: pragma::physics::IRigidBody)",
						returns = "(void)",
						valuetype = "void"
					},
					["LocalVertexIndexToMeshVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(localIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["MeshVertexIndexToLocalVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(meshVertexIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDampingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MeshVertexIndexToNodeIndex"] = {
						type = "method",
						description = [[]],
						args = "(meshVertexIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["NodeIndexToMeshVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(nodeIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAeroForceToNode"] = {
						type = "method",
						description = [[]],
						args = "(node: uint32,force: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRestLengthScale"] = {
						type = "method",
						description = [[]],
						args = "(scale: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAeroForceToFace"] = {
						type = "method",
						description = [[]],
						args = "(face: uint32,force: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftVsSoftHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetKineticContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftVsRigidHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitFraction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRollingFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnisotropicFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHitFraction"] = {
						type = "method",
						description = [[]],
						args = "(fraction: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRollingFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDampingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetKineticContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftVsRigidImpulseSplitS"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLiftCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDynamicFrictionCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPoseMatchingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWindVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPressureCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftVsKineticHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(rest: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftVsRigidImpulseSplitK"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVelocitiesCorrectionFactor"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVolumeDensity"] = {
						type = "method",
						description = [[]],
						args = "(density: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftVsRigidImpulseSplitR"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVolumeConversationCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnchorsHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRigidContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRestLengthScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLiftCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVelocitiesCorrectionFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPoseMatchingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPressureCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftVsKineticHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterialLinearStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftVsRigidImpulseSplitK"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVolumeConversationCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftVsRigidImpulseSplitR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftVsSoftHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftVsRigidImpulseSplitS"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaterialAngularStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32,val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaterialLinearStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32,val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterialAngularStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWindVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVolumeMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnchorsHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRigidContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVolume"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDynamicFrictionCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(force: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaterialVolumeStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32,val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNodeCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["SoftBodyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetMaterialStiffnessCoefficients"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32,linear: ,angular: ,volume: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterialStiffnessCoefficients"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["bendingConstraintsDistance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxClusterIterations"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["clusterCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["poseMatchingCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dragCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["anchorsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["rigidContactsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softContactsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["liftCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["kineticContactsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dynamicFrictionCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidImpulseSplitK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dampingCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["volumeConversationCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidImpulseSplitR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidImpulseSplitS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsKineticHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsSoftHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["pressureCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["velocitiesCorrectionFactor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Base"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["IKTree"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetJointCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Print"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InsertRightSibling"] = {
						type = "method",
						description = [[]],
						args = "(parent: Node,child: Node)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEffector"] = {
						type = "method",
						description = [[]],
						args = "(nodeIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSuccessor"] = {
						type = "method",
						description = [[]],
						args = "(node: Node)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEffectorPosition"] = {
						type = "method",
						description = [[]],
						args = "(nodeIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRoot"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetJoint"] = {
						type = "method",
						description = [[]],
						args = "(nodeIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["InsertLeftChild"] = {
						type = "method",
						description = [[]],
						args = "(parent: Node,child: Node)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(node: Node)",
						returns = "(void)",
						valuetype = "void"
					},
					["UnFreeze"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Compute"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InsertRoot"] = {
						type = "method",
						description = [[]],
						args = "(node: Node)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNodeCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEffectorCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Node"] = {
						type = "class",
						description = [[]],
						childs = {
							["Freeze"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetAttach"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["PrintNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetRotationAxis"] = {
								type = "method",
								description = [[]],
								args = "(axis: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRotationAxis"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["UpdateTheta"] = {
								type = "method",
								description = [[]],
								args = "(delta: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetLeftChildNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["InitNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRightChildNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetAttach"] = {
								type = "method",
								description = [[]],
								args = "(attach: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetLocalTransform"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRelativePosition"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTheta"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AddToTheta"] = {
								type = "method",
								description = [[]],
								args = "(delta: )",
								returns = "(void)",
								valuetype = "void"
							},
							["IsFrozen"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetS"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetW"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMinTheta"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMaxTheta"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRestAngle"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetTheta"] = {
								type = "method",
								description = [[]],
								args = "(theta: )",
								returns = "(void)",
								valuetype = "void"
							},
							["ComputeS"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ComputeW"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["IsEffector"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["IsJoint"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetEffectorIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["UnFreeze"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetJointIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["PURPOSE_JOINT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["PURPOSE_EFFECTOR"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["DoFConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLinearMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentAngularPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentAngularLimitError"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(force: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearLimit"] = {
						type = "method",
						description = [[]],
						args = "(lower: glm::vec,upper: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularLimit"] = {
						type = "method",
						description = [[]],
						args = "(lower: math.EulerAngles,upper: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetlinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "(softness: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(force: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularMaxLimitForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularMaxLimitForce"] = {
						type = "method",
						description = [[]],
						args = "(force: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(damping: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAngularMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "(tolerance: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(damping: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(velocity: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentAngularLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentAngularAccumulatedImpulse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(velocity: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "(softness: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "(tolerance: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentLinearDifference"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentLinearLimitError"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentLinearLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentLinearAccumulatedImpulse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ConeTwistConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["RayCastResult"] = {
				type = "class",
				description = [[]],
				childs = {
					["HIT_TYPE_BLOCK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["HIT_TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["HIT_TYPE_TOUCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["startPosition"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["subMesh"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mesh"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["colObj"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normal"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["materialName"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["material"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["fraction"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["hitType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["entity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physObj"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["distance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ContactInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["collisionObj1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GetContactPointCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["collisionObj0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GetContactPoint"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shape1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GetContactPoints"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shape0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Controller"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["SetFootPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "(up: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(newHeight: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "(slopeLimit: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDimensions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Move"] = {
						type = "method",
						description = [[]],
						args = "(disp: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundBody"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTouchingGround"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundTouchNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFootPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundTouchPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStepHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Spawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStepHeight"] = {
						type = "method",
						description = [[]],
						args = "(stepHeight: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDimensions"] = {
						type = "method",
						description = [[]],
						args = "(dims: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["VehicleCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWheels"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAntiRollBar"] = {
						type = "method",
						description = [[]],
						args = "(antiRollBar: pragma::physics::VehicleCreateInfo::AntiRollBar)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAntiRollBars"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddWheel"] = {
						type = "method",
						description = [[]],
						args = "(wheelCreateInfo: phys.WheelCreateInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["WHEEL_DRIVE_FOUR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WHEEL_DRIVE_FRONT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WHEEL_DRIVE_REAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxEngineRotationSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["wheelDrive"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["gearSwitchTime"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["chassis"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["clutchStrength"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["gravityFactor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["actor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxEngineTorque"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SuspensionInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["springStrength"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["springDamperRate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["camberAngleAtRest"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["camberAngleAtMaxDroop"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["maxDroop"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["camberAngleAtMaxCompression"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["maxCompression"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["Constraint"] = {
				type = "class",
				description = [[]],
				childs = {
					["EnableCollisions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DisableCollisions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBreakForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSourceActor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTargetActor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTargetPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBreakTorque"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSourceRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBreakTorque"] = {
						type = "method",
						description = [[]],
						args = "(threshold: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSourceTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTargetTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSourcePosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTargetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBreakForce"] = {
						type = "method",
						description = [[]],
						args = "(threshold: )",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Object"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionObjects"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundPhysObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundSurfaceMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTotalForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearForces"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTotalTorque"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilter"] = {
						type = "method",
						description = [[]],
						args = "(mask: int32,group: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(mask: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsGroundWalkable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(threshold: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyImpulse"] = {
						type = "method",
						description = [[]],
						args = "(torque: glm::vec,relPos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(threshold: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(linDamping: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOwner"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(angDamping: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroundPhysCollisionObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(linDamping: ,angDamping: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsOnGround"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSleepingThresholds"] = {
						type = "method",
						description = [[]],
						args = "(linear: ,angular: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyTorque"] = {
						type = "method",
						description = [[]],
						args = "(torque: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyTorqueImpulse"] = {
						type = "method",
						description = [[]],
						args = "(torque: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["PutToSleep"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(force: glm::vec,relPos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WakeUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ContactPoint"] = {
				type = "class",
				description = [[]],
				childs = {
					["material1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normal"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["distance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["material0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["impulse"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["HingeConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {

				}
			},
			["DoFSpringConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["CalculateTransforms"] = {
						type = "method",
						description = [[]],
						args = "(transformA: umath::Transform,transformB: umath::Transform)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetERP"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCalculatedTransformA"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetServoTarget"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,target: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCalculatedTransformB"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrameOffsetA"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAxis"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRelativePivotPosition"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStiffness"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,stiffness: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFrames"] = {
						type = "method",
						description = [[]],
						args = "(transformA: umath::Transform,transformB: umath::Transform)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(linearUpper: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStopCFM"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,velocity: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(angularLower: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,damping: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularLowerLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(angularLower: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularLowerLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(angularUpper: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngularUpperLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(angularUpper: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngle"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngularUpperLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,lo: ,hi: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLimited"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint32,type: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStopCFM"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRotationOrder"] = {
						type = "method",
						description = [[]],
						args = "(rotationOrder: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotationOrder"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBounce"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,bounce: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAxis"] = {
						type = "method",
						description = [[]],
						args = "(axis1: glm::vec,axis2: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(linearLower: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["EnableMotor"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,enable: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetServo"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,enable: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,force: )",
						returns = "(void)",
						valuetype = "void"
					},
					["EnableSpring"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,enable: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEquilibriumPoint"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetERP"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStopERP"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStopERP"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCFM"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCFM"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,lo: ,hi: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrameOffsetB"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BallSocketConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {

				}
			},
			["IKJacobian"] = {
				type = "class",
				description = [[]],
				childs = {
					["UpdatedSClampValue"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRowCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetColumnCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetJtargetActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ComputeJacobian"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcDeltaThetas"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetJendActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ZeroDeltaThetas"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcDeltaThetasTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcDeltaThetasPseudoinverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcDeltaThetasDLS"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcDeltaThetasDLSwithSVD"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcDeltaThetasSDLS"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateThetas"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateThetaDot"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["IKController"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChainLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEffectorName"] = {
						type = "method",
						description = [[]],
						args = "(effectorName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,value: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEffectorName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetChainLength"] = {
						type = "method",
						description = [[]],
						args = "(chainLength: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMethod"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMethod"] = {
						type = "method",
						description = [[]],
						args = "(method: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(type: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["METHOD_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_JACOBIAN_TRANSPOSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_PSEUDOINVERSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_SELECTIVELY_DAMPED_LEAST_SQUARE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_DAMPED_LEAST_SQUARES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_DAMPED_LEAST_SQUARES_WITH_SINGULAR_VALUE_DECOMPOSITION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ConvexShape"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetCollisionMesh"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["CapsuleShape"] = {
				type = "class",
				inherits = "phys.ConvexShape phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetHalfHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRadius"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Material"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(restitution: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSurfaceMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSurfaceMaterial"] = {
						type = "method",
						description = [[]],
						args = "(surfMat: game.SurfaceMaterial)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["CollisionObj"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["IsAsleep"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAlwaysAwake"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["EnableSimulation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(mask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsGhostObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Spawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsRigidBody"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlwaysAwake"] = {
						type = "method",
						description = [[]],
						args = "(alwaysAwake: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSoftBody"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoundingSphere"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DisableSimulation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActivationState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WakeUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetActivationState"] = {
						type = "method",
						description = [[]],
						args = "(state: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWorldTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWorldTransform"] = {
						type = "method",
						description = [[]],
						args = "(t: umath::Transform)",
						returns = "(void)",
						valuetype = "void"
					},
					["PutToSleep"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["coroutine"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["game"] = {
		type = "lib",
		description = [[]],
		childs = {
			["call_callbacks"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["set_gravity"] = {
				type = "function",
				description = [[]],
				args = "(gravity: glm::vec)",
				returns = "(void)",
				valuetype = "void"
			},
			["add_callback"] = {
				type = "function",
				description = [[]],
				args = "(identifier: std::basic_string,function: functype)",
				returns = "([CallbackHandle])",
				valuetype = "CallbackHandle"
			},
			["clear_callbacks"] = {
				type = "function",
				description = [[]],
				args = "(identifier: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["get_ammo_type_id"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string)",
				returns = "([uint32])",
				valuetype = "uint32"
			},
			["get_sound_intensity"] = {
				type = "function",
				description = [[]],
				args = "(pos: glm::vec)",
				returns = "()",
				valuetype = ""
			},
			["get_ammo_type_name"] = {
				type = "function",
				description = [[]],
				args = "(typeId: uint32)",
				returns = "([std::basic_string])",
				valuetype = "basic_string"
			},
			["get_game_mode"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([pragma::BaseGamemodeComponent])",
				valuetype = "BaseGamemodeComponent"
			},
			["clear_unused_materials"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(void)",
				valuetype = "void"
			},
			["get_light_color"] = {
				type = "function",
				description = [[]],
				args = "(pos: glm::vec)",
				returns = "([glm::vec])",
				valuetype = "vec"
			},
			["get_time_scale"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["change_map"] = {
				type = "function",
				description = [[]],
				args = "(mapName: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["register_ammo_type"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["is_game_mode_initialized"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_nav_mesh"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([std::shared_ptr])",
				valuetype = "shared_ptr"
			},
			["load_nav_mesh"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_material"] = {
				type = "function",
				description = [[]],
				args = "(identifier: std::basic_string)",
				returns = "(Material)",
				valuetype = "Material"
			},
			["is_map_loaded"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_map_name"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_game_state_flags"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(Game::GameFlags)",
				valuetype = "GameFlags"
			},
			["get_gravity"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["load_model"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["load_sound_scripts"] = {
				type = "function",
				description = [[]],
				args = "(fileName: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["precache_model"] = {
				type = "function",
				description = [[]],
				args = "(mdlName: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["get_model"] = {
				type = "function",
				description = [[]],
				args = "(mdlName: std::basic_string)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["load_material"] = {
				type = "function",
				description = [[]],
				args = "(mat: std::basic_string)",
				returns = "(Material)",
				valuetype = "Material"
			},
			["set_time_scale"] = {
				type = "function",
				description = [[]],
				args = "(timeScale: )",
				returns = "(void)",
				valuetype = "void"
			},
			["register_component_event"] = {
				type = "function",
				description = [[]],
				args = "(componentId: uint32,name: std::basic_string)",
				returns = "([uint32])",
				valuetype = "uint32"
			},
			["load_texture"] = {
				type = "function",
				description = [[]],
				args = "(file: file.File)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["create_material"] = {
				type = "function",
				description = [[]],
				args = "(shader: std::basic_string)",
				returns = "(Material)",
				valuetype = "Material"
			},
			["precache_material"] = {
				type = "function",
				description = [[]],
				args = "(mat: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["get_error_material"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(Material)",
				valuetype = "Material"
			},
			["precache_particle_system"] = {
				type = "function",
				description = [[]],
				args = "(particle: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["limits"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["SurfaceMaterial"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(coefficient: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAudioScattering"] = {
						type = "method",
						description = [[]],
						args = "(scattering: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPBRRoughness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSubsurfaceColor"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(coefficient: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearIOR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAudioHighFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHardImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(snd: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAudioLowFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(restitution: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAudioScattering"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFootstepSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWavePropagation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFootstepSound"] = {
						type = "method",
						description = [[]],
						args = "(type: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBulletImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(snd: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWavePropagation"] = {
						type = "method",
						description = [[]],
						args = "(propagation: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetImpactParticleEffect"] = {
						type = "method",
						description = [[]],
						args = "(eff: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSubsurfaceRadiusMM"] = {
						type = "method",
						description = [[]],
						args = "(radiusMM: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetImpactParticleEffect"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBulletImpactSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHardImpactSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWaveStiffness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSubsurfaceScatterColor"] = {
						type = "method",
						description = [[]],
						args = "(radiusRGB: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(snd: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftImpactSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIOR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetAudioLowFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetIOR"] = {
						type = "method",
						description = [[]],
						args = "(ior: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAudioLowFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(absp: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAudioMidFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(absp: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAudioMidFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubsurfaceRadiusMM"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAudioHighFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(absp: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAudioLowFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(transmission: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWaveStiffness"] = {
						type = "method",
						description = [[]],
						args = "(stiffness: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAudioMidFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(transmission: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAudioMidFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAudioHighFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(transmission: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPBRMetalness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAudioHighFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNavigationFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNavigationFlags"] = {
						type = "method",
						description = [[]],
						args = "(navFlags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubsurfaceFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSubsurfaceFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubsurfaceScatterColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubsurfaceColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDensity"] = {
						type = "method",
						description = [[]],
						args = "(density: )",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["drone"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["BulletInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["spread"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["attacker"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["force"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["distance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["damageType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["damage"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bulletCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["inflictor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerColor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerLength"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerMaterial"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerBloom"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ammoType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["direction"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["effectOrigin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Material"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetShaderName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSpriteSheetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsError"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLoaded"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDataBlock"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAlphaCutoff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["UpdateTextures"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearSpriteSheetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(AlphaMode)",
						valuetype = "AlphaMode"
					},
					["GetTextureInfo"] = {
						type = "method",
						description = [[]],
						args = "(textureID: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(fname: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShader"] = {
						type = "method",
						description = [[]],
						args = "(shader: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTranslucent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTexture"] = {
						type = "method",
						description = [[]],
						args = "(textureID: std::basic_string,hTex: prosper::Texture,name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializeShaderDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DETAIL_BLEND_MODE_TRANSLUCENT_BASE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_TRANSLUCENT_DETAIL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_BASE_MASK_VIA_DETAIL_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_ADDITIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_MULTIPLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_BLEND_FACTOR_FADE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_INVALID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_SELF_SHADOWED_BUMPMAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_DECAL_MODULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_SSBUMP_ALBEDO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_TWO_PATTERN_DECAL_MODULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_UNLIT_ADDITIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_UNLIT_ADDITIVE_THRESHOLD_FADE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_OPAQUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_BLEND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_MASK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SpriteSheetAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetSequences"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSequenceCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSequence"] = {
								type = "method",
								description = [[]],
								args = "(seqIdx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Sequence"] = {
								type = "class",
								description = [[]],
								childs = {
									["IsLooping"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFrames"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetInterpolatedFrameData"] = {
										type = "method",
										description = [[]],
										args = "(ptTime: )",
										returns = "(void)",
										valuetype = "void"
									},
									["GetDuration"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFrameCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFrameOffset"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFrame"] = {
										type = "method",
										description = [[]],
										args = "(frameIdx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["Frame"] = {
										type = "class",
										description = [[]],
										childs = {
											["GetUVBounds"] = {
												type = "method",
												description = [[]],
												args = "()",
												returns = "(void)",
												valuetype = "void"
											},
											["GetDuration"] = {
												type = "method",
												description = [[]],
												args = "()",
												returns = "(void)",
												valuetype = "void"
											}
										}
									},

								}
							},

						}
					},

				}
			},
			["Model"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(texIdx: uint32,name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTriangleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHitboxGroup"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32,hitGroup: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitboxBounds"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(mdlOther: game.Model)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterials"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubMeshCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimationNames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddMaterial"] = {
						type = "method",
						description = [[]],
						args = "(textureGroup: uint32,name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearCollisionMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSkeleton"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttachmentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTextureGroup"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearBaseMeshGroupIds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttachments"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearMeshGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlendControllers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimationCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PrecacheTextureGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupAttachment"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddHitbox"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32,hitGroup: uint32,min: glm::vec,max: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimationName"] = {
						type = "method",
						description = [[]],
						args = "(animID: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["PrecacheTextureGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionMeshCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveHitbox"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetReferencePose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMeshes"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMeshGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupFlexController"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBaseMeshGroupIds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBaseMeshGroupIds"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddMeshGroup"] = {
						type = "method",
						description = [[]],
						args = "(meshGroup: ModelMeshGroup)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTextureGroupCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SelectWeightedAnimation"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint32,animIgnore: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddBaseMeshGroupId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMeshGroupId"] = {
						type = "method",
						description = [[]],
						args = "(bodyGroupId: uint32,groupId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(min: glm::vec,max: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMeshGroup"] = {
						type = "method",
						description = [[]],
						args = "(mgId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(bgId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddTextureGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(min: glm::vec,max: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterialPaths"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCollisionMesh"] = {
						type = "method",
						description = [[]],
						args = "(colMesh: game.Model.CollisionMesh)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitboxCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterialCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMeshGroupCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBodyGroupCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveAnimation"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitboxGroup"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitboxBones"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHitboxBounds"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32,min: glm::vec,max: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTextureGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(object)",
						valuetype = "object"
					},
					["GetMaterialNames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LoadMaterials"] = {
						type = "method",
						description = [[]],
						args = "(bReload: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddMaterialPath"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(blendControllerId: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveMaterialPath"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaterialPaths"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasVertexWeights"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexControllerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SaveLegacy"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearMaterials"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,anim: pragma::animation::Animation)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveMeshGroup"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearJoints"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLODCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SelectFirstAnimation"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLODData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLOD"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["TranslateLODMeshes"] = {
						type = "method",
						description = [[]],
						args = "(lod: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetJoints"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddJoint"] = {
						type = "method",
						description = [[]],
						args = "(type: JointType,child: uint16,parent: uint16)",
						returns = "(JointInfo)",
						valuetype = "JointInfo"
					},
					["GetVertexAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBodyGroupMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBodyGroupMesh"] = {
						type = "method",
						description = [[]],
						args = "(bodyGroupId: uint32,bgValue: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexControllers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveIKController"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexController"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupFlex"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexFormula"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcFlexWeight"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32,oFc: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcReferenceAttachmentPose"] = {
						type = "method",
						description = [[]],
						args = "(attIdx: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcReferenceBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdx: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasFlag"] = {
						type = "method",
						description = [[]],
						args = "(flag: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEyeballs"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIKControllers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIKController"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupIKController"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIncludeModels"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ExportAnimation"] = {
						type = "method",
						description = [[]],
						args = "(animName: std::basic_string,exportInfo: pragma::asset::ModelExportInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddIKController"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,chainLength: uint32,type: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsRootBone"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBodyGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMeshCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimationActivity"] = {
						type = "method",
						description = [[]],
						args = "(anim: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimationDuration"] = {
						type = "method",
						description = [[]],
						args = "(anim: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetFlexAnimationNames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetFlexAnimationCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetFlexAnimationName"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(object)",
						valuetype = "object"
					},
					["AddFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,flexAnim: game.Model.FlexAnimation)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(object)",
						valuetype = "object"
					},
					["ClearFlexAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: game.Model)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(fname: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(copyFlags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimationActivityWeight"] = {
						type = "method",
						description = [[]],
						args = "(anim: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AssignDistinctMaterial"] = {
						type = "method",
						description = [[]],
						args = "(group: ModelMeshGroup,mesh: ModelMesh,subMesh: game.Model.Mesh.Sub)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPhonemeMap"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPhonemeMap"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddIncludeModel"] = {
						type = "method",
						description = [[]],
						args = "(modelName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddEyeball"] = {
						type = "method",
						description = [[]],
						args = "(eyeball: game.Model.Eyeball)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveAttachment"] = {
						type = "method",
						description = [[]],
						args = "(attId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAttachmentData"] = {
						type = "method",
						description = [[]],
						args = "(attId: uint32,data: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEyeballCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(animId: uint32,frameId: uint32,boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsStatic"] = {
						type = "method",
						description = [[]],
						args = "(eyeballIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterialIndex"] = {
						type = "method",
						description = [[]],
						args = "(mesh: game.Model.Mesh.Sub,skinId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(animID: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetObjectAttachments"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupBlendController"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: )",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlendControllerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetObjectAttachmentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAttachment"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,boneId: uint32,offset: glm::vec,ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttachment"] = {
						type = "method",
						description = [[]],
						args = "(attId: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveMaterial"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBodyGroupId"] = {
						type = "method",
						description = [[]],
						args = "(bodyGroupName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,name: std::basic_string,attachment: std::basic_string,oKeyValues: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Export"] = {
						type = "method",
						description = [[]],
						args = "(exportInfo: pragma::asset::ModelExportInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["FUPDATE_VERTEX_ANIMATION_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_VERTEX_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBJECT_ATTACHMENT_TYPE_MODEL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBJECT_ATTACHMENT_TYPE_PARTICLE_SYSTEM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_ALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_ALL_DATA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_INDEX_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_ALPHA_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_BUFFERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_BOUNDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_COLLISION_SHAPES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_CHILDREN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_PRIMITIVE_COUNTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_TANGENTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_WEIGHT_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_DEEP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_SHALLOW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_ALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_HITBOXES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_ATTACHMENTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_JOINTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_BLEND_CONTROLLERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_COLLISION_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_COLLISION_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_FLEX_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_VERTEX_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_INANIMATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_DONT_PRECACHE_TEXTURE_GROUPS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_STATIC"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["Eyeball"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetUpperLidFlexIndices"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["GetUpperLidFlexAngles"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["GetLowerLidFlexIndices"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["GetLowerLidFlexAngles"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["GetLowerLidFlexIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(int32)",
								valuetype = "int32"
							},
							["GetUpperLidFlexIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(int32)",
								valuetype = "int32"
							},
							["maxDilationFactor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisScale"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisUvRadius"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["radius"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["origin"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["name"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["boneIndex"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["zOffset"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["up"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["forward"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisMaterialIndex"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["VertexWeight"] = {
						type = "class",
						description = [[]],
						childs = {
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(1: game.Model.VertexWeight)",
								returns = "(void)",
								valuetype = "void"
							},
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(game.Model.VertexWeight)",
								valuetype = "VertexWeight"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["boneIds"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["weights"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["Animation"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetBlendController"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetActivity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFlags"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetActivityWeight"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFrame"] = {
								type = "method",
								description = [[]],
								args = "(ID: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["LookupBone"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneList"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetActivityName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["Reverse"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetBoneWeight"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32,t: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneId"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(int32)",
								valuetype = "int32"
							},
							["SetActivityWeight"] = {
								type = "method",
								description = [[]],
								args = "(weight: uint8)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFPS"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["RemoveEvent"] = {
								type = "method",
								description = [[]],
								args = "(frameId: uint32,idx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["AddBoneId"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetEvents"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AddEvent"] = {
								type = "method",
								description = [[]],
								args = "(frameId: uint32,eventId: uint32,args: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: game.Model.Skeleton,t: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["Scale"] = {
								type = "method",
								description = [[]],
								args = "(scale: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["AddFrame"] = {
								type = "method",
								description = [[]],
								args = "(frame: Frame)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneWeight"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetDuration"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetActivity"] = {
								type = "method",
								description = [[]],
								args = "(act: uint16)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearFrames"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetEventArgs"] = {
								type = "method",
								description = [[]],
								args = "(frameId: uint32,idx: uint32,oArgs: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["Save"] = {
								type = "method",
								description = [[]],
								args = "(assetData: udm.AssetData)",
								returns = "(void)",
								valuetype = "void"
							},
							["SaveLegacy"] = {
								type = "method",
								description = [[]],
								args = "(f: file.File)",
								returns = "(void)",
								valuetype = "void"
							},
							["CalcRenderBounds"] = {
								type = "method",
								description = [[]],
								args = "(mdl: std::shared_ptr)",
								returns = "(void)",
								valuetype = "void"
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: game.Model.Skeleton,rot: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFadeOutTime"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFPS"] = {
								type = "method",
								description = [[]],
								args = "(fps: uint8)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFlags"] = {
								type = "method",
								description = [[]],
								args = "(flags: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["AddFlags"] = {
								type = "method",
								description = [[]],
								args = "(flags: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["RemoveFlags"] = {
								type = "method",
								description = [[]],
								args = "(flags: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFrames"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetBoneList"] = {
								type = "method",
								description = [[]],
								args = "(o: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFrameCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetEventCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFadeInTime"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRenderBounds"] = {
								type = "method",
								description = [[]],
								args = "(std::shared_ptr)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFadeOutTime"] = {
								type = "method",
								description = [[]],
								args = "(t: )",
								returns = "(void)",
								valuetype = "void"
							},
							["SetEventData"] = {
								type = "method",
								description = [[]],
								args = "(frameId: uint32,idx: uint32,type: uint32,oArgs: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetEventType"] = {
								type = "method",
								description = [[]],
								args = "(frameId: uint32,idx: uint32,type: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFadeInTime"] = {
								type = "method",
								description = [[]],
								args = "(t: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneWeights"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["FLAG_MOVEZ"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_AUTOPLAY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_GESTURE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_LOOP"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_MOVEX"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FLAG_NOREPEAT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["Frame"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetBoneMatrix"] = {
										type = "method",
										description = [[]],
										args = "(boneID: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["Copy"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetLocalBoneTransform"] = {
										type = "method",
										description = [[]],
										args = "(skeleton: game.Model.Skeleton,boneId: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetBoneTransform"] = {
										type = "method",
										description = [[]],
										args = "(boneID: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["Translate"] = {
										type = "method",
										description = [[]],
										args = "(anim: pragma::animation::Animation,skeleton: game.Model.Skeleton,t: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetMoveTranslation"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["Scale"] = {
										type = "method",
										description = [[]],
										args = "(scale: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFlexControllerIds"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetBonePosition"] = {
										type = "method",
										description = [[]],
										args = "(boneID: uint32,pos: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetBoneRotation"] = {
										type = "method",
										description = [[]],
										args = "(boneID: uint32,rot: glm::qua)",
										returns = "(void)",
										valuetype = "void"
									},
									["Localize"] = {
										type = "method",
										description = [[]],
										args = "(skeleton: game.Model.Skeleton)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetBoneRotation"] = {
										type = "method",
										description = [[]],
										args = "(boneID: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetMoveTranslationX"] = {
										type = "method",
										description = [[]],
										args = "(x: )",
										returns = "(void)",
										valuetype = "void"
									},
									["SetBoneTransform"] = {
										type = "method",
										description = [[]],
										args = "(boneID: uint32,pos: glm::vec,rot: glm::qua)",
										returns = "(void)",
										valuetype = "void"
									},
									["CalcRenderBounds"] = {
										type = "method",
										description = [[]],
										args = "(anim: pragma::animation::Animation,mdl: std::shared_ptr)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetBoneScale"] = {
										type = "method",
										description = [[]],
										args = "(boneId: uint32,scale: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["Rotate"] = {
										type = "method",
										description = [[]],
										args = "(anim: pragma::animation::Animation,skeleton: game.Model.Skeleton,rot: glm::qua)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetMoveTranslationZ"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFlexControllerWeights"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetMoveTranslation"] = {
										type = "method",
										description = [[]],
										args = "(x: ,z: )",
										returns = "(void)",
										valuetype = "void"
									},
									["SetFlexControllerWeights"] = {
										type = "method",
										description = [[]],
										args = "(object: object)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetMoveTranslationZ"] = {
										type = "method",
										description = [[]],
										args = "(z: )",
										returns = "(void)",
										valuetype = "void"
									},
									["GetBoneScale"] = {
										type = "method",
										description = [[]],
										args = "(boneId: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetBonePose"] = {
										type = "method",
										description = [[]],
										args = "(boneId: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetBonePose"] = {
										type = "method",
										description = [[]],
										args = "(boneId: uint32,pose: umath::Transform)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetBoneCount"] = {
										type = "method",
										description = [[]],
										args = "(boneCount: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetBoneCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["Globalize"] = {
										type = "method",
										description = [[]],
										args = "(skeleton: game.Model.Skeleton)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetMoveTranslationX"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									}
								}
							},

						}
					},
					["Vertex"] = {
						type = "class",
						description = [[]],
						childs = {
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBiTangent"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(glm::vec)",
								valuetype = "vec"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(game.Model.Vertex)",
								valuetype = "Vertex"
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(1: game.Model.Vertex)",
								returns = "(void)",
								valuetype = "void"
							},
							["normal"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["tangent"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["uv"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["position"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["MeshGroup"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMeshCount"] = {
								type = "method",
								description = [[]],
								args = "(index: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(1: ModelMeshGroup)",
								returns = "(void)",
								valuetype = "void"
							},
							["AddMesh"] = {
								type = "method",
								description = [[]],
								args = "(mesh: ModelMesh)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMesh"] = {
								type = "method",
								description = [[]],
								args = "(index: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMeshes"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearMeshes"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetMeshes"] = {
								type = "method",
								description = [[]],
								args = "(tMeshes: object)",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["VertexAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(rot: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMeshAnimations"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["MeshAnimation"] = {
								type = "class",
								description = [[]],
								childs = {
									["Rotate"] = {
										type = "method",
										description = [[]],
										args = "(rot: glm::qua)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetMesh"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFrames"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["Frame"] = {
										type = "class",
										description = [[]],
										childs = {
											["Rotate"] = {
												type = "method",
												description = [[]],
												args = "(rot: glm::qua)",
												returns = "(void)",
												valuetype = "void"
											},
											["SetFlags"] = {
												type = "method",
												description = [[]],
												args = "(flags: uint32)",
												returns = "(void)",
												valuetype = "void"
											},
											["SetVertexPosition"] = {
												type = "method",
												description = [[]],
												args = "(vertIdx: uint32,pos: glm::vec)",
												returns = "(void)",
												valuetype = "void"
											},
											["SetVertexNormal"] = {
												type = "method",
												description = [[]],
												args = "(vertIdx: uint32,n: glm::vec)",
												returns = "(void)",
												valuetype = "void"
											},
											["GetVertexNormal"] = {
												type = "method",
												description = [[]],
												args = "(vertIdx: uint32)",
												returns = "(void)",
												valuetype = "void"
											},
											["GetVertexPosition"] = {
												type = "method",
												description = [[]],
												args = "(vertIdx: uint32)",
												returns = "(void)",
												valuetype = "void"
											},
											["GetFlags"] = {
												type = "method",
												description = [[]],
												args = "()",
												returns = "(void)",
												valuetype = "void"
											},
											["SetVertexCount"] = {
												type = "method",
												description = [[]],
												args = "(numVerts: uint32)",
												returns = "(void)",
												valuetype = "void"
											},
											["GetVertices"] = {
												type = "method",
												description = [[]],
												args = "()",
												returns = "(void)",
												valuetype = "void"
											},
											["GetVertexCount"] = {
												type = "method",
												description = [[]],
												args = "()",
												returns = "(void)",
												valuetype = "void"
											},
											["SetDeltaValue"] = {
												type = "method",
												description = [[]],
												args = "(vertId: uint32,value: )",
												returns = "(void)",
												valuetype = "void"
											},
											["GetDeltaValue"] = {
												type = "method",
												description = [[]],
												args = "(vertId: uint32)",
												returns = "(void)",
												valuetype = "void"
											},
											["FLAG_BIT_HAS_DELTA_VALUES"] = {
												type = "value",
												description = [[]],
												valuetype = ""
											},
											["FLAG_NONE"] = {
												type = "value",
												description = [[]],
												valuetype = ""
											}
										}
									},

								}
							},

						}
					},
					["Joint"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetCollisionMeshId"] = {
								type = "method",
								description = [[]],
								args = "(meshId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetParentCollisionMeshId"] = {
								type = "method",
								description = [[]],
								args = "(meshId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetKeyValues"] = {
								type = "method",
								description = [[]],
								args = "(keyValues: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["RemoveKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(key: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetArgs"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["GetType"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetCollisionsEnabled"] = {
								type = "method",
								description = [[]],
								args = "(bEnabled: bool)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetArgs"] = {
								type = "method",
								description = [[]],
								args = "(t: table)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(key: std::basic_string,val: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetChildBoneId"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetParentBoneId"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetCollisionsEnabled"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetKeyValues"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetType"] = {
								type = "method",
								description = [[]],
								args = "(type: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["TYPE_BALLSOCKET"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_FIXED"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_CONETWIST"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_DOF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_HINGE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_NONE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_SLIDER"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["collide"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["Skeleton"] = {
						type = "class",
						description = [[]],
						childs = {
							["MakeRootBone"] = {
								type = "method",
								description = [[]],
								args = "(bone: game.Model.Skeleton.Bone)",
								returns = "(void)",
								valuetype = "void"
							},
							["LookupBone"] = {
								type = "method",
								description = [[]],
								args = "(name: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneHierarchy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["IsRootBone"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32)",
								returns = "(bool)",
								valuetype = "bool"
							},
							["Merge"] = {
								type = "method",
								description = [[]],
								args = "(skeletonOther: game.Model.Skeleton)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBone"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRootBones"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBones"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AddBone"] = {
								type = "method",
								description = [[]],
								args = "(name: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearBones"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Bone"] = {
								type = "class",
								description = [[]],
								childs = {
									["__tostring"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["IsDescendantOf"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(bool)",
										valuetype = "bool"
									},
									["ClearParent"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetParent"] = {
										type = "method",
										description = [[]],
										args = "(parent: game.Model.Skeleton.Bone)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetName"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetChildren"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetName"] = {
										type = "method",
										description = [[]],
										args = "(name: std::basic_string)",
										returns = "(void)",
										valuetype = "void"
									},
									["IsAncestorOf"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(bool)",
										valuetype = "bool"
									},
									["GetParent"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetID"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									}
								}
							},

						}
					},
					["FlexAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["Save"] = {
								type = "method",
								description = [[]],
								args = "(assetData: udm.AssetData)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFlexControllerValue"] = {
								type = "method",
								description = [[]],
								args = "(frameId: uint32,id: uint32,val: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFrames"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["GetFps"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "()",
								valuetype = ""
							},
							["SetFps"] = {
								type = "method",
								description = [[]],
								args = "(fps: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFlexControllerIds"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["GetFrame"] = {
								type = "method",
								description = [[]],
								args = "(frameId: uint32)",
								returns = "(std::shared_ptr)",
								valuetype = "shared_ptr"
							},
							["GetFrameCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(uint32)",
								valuetype = "uint32"
							},
							["SetFlexControllerIds"] = {
								type = "method",
								description = [[]],
								args = "(tIds: table)",
								returns = "(void)",
								valuetype = "void"
							},
							["AddFlexControllerId"] = {
								type = "method",
								description = [[]],
								args = "(id: uint32)",
								returns = "(uint32)",
								valuetype = "uint32"
							},
							["GetFlexControllerCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(uint32)",
								valuetype = "uint32"
							},
							["SaveLegacy"] = {
								type = "method",
								description = [[]],
								args = "(f: file.File)",
								returns = "(bool)",
								valuetype = "bool"
							},
							["LookupLocalFlexControllerIndex"] = {
								type = "method",
								description = [[]],
								args = "(id: uint32)",
								returns = "(object)",
								valuetype = "object"
							},
							["AddFrame"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(std::shared_ptr)",
								valuetype = "shared_ptr"
							},
							["ClearFrames"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["RemoveFrame"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Frame"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetFlexControllerValueCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(uint32)",
										valuetype = "uint32"
									},
									["SetFlexControllerValue"] = {
										type = "method",
										description = [[]],
										args = "(id: uint32,val: )",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFlexControllerValues"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(object)",
										valuetype = "object"
									},
									["SetFlexControllerValues"] = {
										type = "method",
										description = [[]],
										args = "(t: table)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFlexControllerValue"] = {
										type = "method",
										description = [[]],
										args = "(id: uint32)",
										returns = "(void)",
										valuetype = "void"
									}
								}
							},

						}
					},
					["Mesh"] = {
						type = "class",
						description = [[]],
						childs = {
							["AddSubMesh"] = {
								type = "method",
								description = [[]],
								args = "(mesh: game.Model.Mesh.Sub)",
								returns = "(void)",
								valuetype = "void"
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(translation: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["Scale"] = {
								type = "method",
								description = [[]],
								args = "(scale: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["RemoveSubMesh"] = {
								type = "method",
								description = [[]],
								args = "(i: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Update"] = {
								type = "method",
								description = [[]],
								args = "(flags: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Centralize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTriangleCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSubMeshes"] = {
								type = "method",
								description = [[]],
								args = "(tSubMeshes: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetCenter"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSubMeshes"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetCenter"] = {
								type = "method",
								description = [[]],
								args = "(center: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearSubMeshes"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(1: ModelMesh)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSubMeshCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSubMesh"] = {
								type = "method",
								description = [[]],
								args = "(index: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBounds"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTriangleVertexCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetReferenceId"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(rotation: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["Sub"] = {
								type = "class",
								description = [[]],
								childs = {
									["__tostring"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetSkinTextureIndex"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["ClearVertexData"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["ReserveTriangles"] = {
										type = "method",
										description = [[]],
										args = "(numTris: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetTriangleVertexCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "(n: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["ReserveVertices"] = {
										type = "method",
										description = [[]],
										args = "(numVerts: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["ClearUVSets"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["HasUVSet"] = {
										type = "method",
										description = [[]],
										args = "(uvSetName: std::basic_string)",
										returns = "(void)",
										valuetype = "void"
									},
									["Translate"] = {
										type = "method",
										description = [[]],
										args = "(translation: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["Scale"] = {
										type = "method",
										description = [[]],
										args = "(scale: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetIndexCount"] = {
										type = "method",
										description = [[]],
										args = "(n: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetTriangleCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetCenter"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["AddUVSet"] = {
										type = "method",
										description = [[]],
										args = "(uvSetName: std::basic_string)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetUVs"] = {
										type = "method",
										description = [[]],
										args = "(uvSetName: std::basic_string)",
										returns = "(object)",
										valuetype = "object"
									},
									["GetUVSetNames"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(object)",
										valuetype = "object"
									},
									["GetVertices"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["AddTriangle"] = {
										type = "method",
										description = [[]],
										args = "(a: uint32,b: uint32,c: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetNormals"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexWeight"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32,weight: game.Model.VertexWeight)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetReferenceId"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertexWeights"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["AddPoint"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["Rotate"] = {
										type = "method",
										description = [[]],
										args = "(rotation: glm::qua)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetSkinTextureIndex"] = {
										type = "method",
										description = [[]],
										args = "(texture: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexAlpha"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32,alpha: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["Transform"] = {
										type = "method",
										description = [[]],
										args = "(pose: phys.ScaledTransform)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetBounds"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertex"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32,v: game.Model.Vertex)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexUV"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32,uv: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["AddVertex"] = {
										type = "method",
										description = [[]],
										args = "(v: game.Model.Vertex)",
										returns = "(void)",
										valuetype = "void"
									},
									["ClearExtendedVertexWeights"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32,normal: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertex"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["ClearVertexWeights"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertexUV"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertexAlpha"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertexWeight"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GenerateNormals"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["ReserveVertexWeights"] = {
										type = "method",
										description = [[]],
										args = "(numVerts: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["NormalizeUVCoordinates"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["ApplyUVMapping"] = {
										type = "method",
										description = [[]],
										args = "(nu: glm::vec,nv: glm::vec,w: uint32,h: uint32,ou: ,ov: ,su: ,sv: )",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexTangent"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32,t: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetGeometryType"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetGeometryType"] = {
										type = "method",
										description = [[]],
										args = "(geometryType: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["AddLine"] = {
										type = "method",
										description = [[]],
										args = "(idx0: uint32,idx1: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["ClearAlphas"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["Update"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetTriangles"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["ClipAgainstPlane"] = {
										type = "method",
										description = [[]],
										args = "(n: glm::vec,d: )",
										returns = "(void)",
										valuetype = "void"
									},
									["ClearVertices"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["ClearTriangles"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["__eq"] = {
										type = "method",
										description = [[]],
										args = "(1: game.Model.Mesh.Sub)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetPose"] = {
										type = "method",
										description = [[]],
										args = "(pose: phys.ScaledTransform)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetPose"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["Copy"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(std::shared_ptr)",
										valuetype = "shared_ptr"
									},
									["FlipTriangleWindingOrder"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["Optimize"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(idx: uint32,pos: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["GEOMETRY_TYPE_LINES"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["GEOMETRY_TYPE_POINTS"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["GEOMETRY_TYPE_TRIANGLES"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									}
								}
							},

						}
					},
					["CollisionMesh"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetSoftBodyAnchors"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["IsSoftBody"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(t: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetOrigin"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetAABB"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetBoneParentId"] = {
								type = "method",
								description = [[]],
								args = "(boneId: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetTriangles"] = {
								type = "method",
								description = [[]],
								args = "(tTriangles: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["Centralize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(rot: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertices"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AddTriangle"] = {
								type = "method",
								description = [[]],
								args = "(idx0: uint32,idx1: uint32,idx2: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneParentId"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetShape"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetConvex"] = {
								type = "method",
								description = [[]],
								args = "(bConvex: bool)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSurfaceMaterialId"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSurfaceMaterialIds"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["IntersectAABB"] = {
								type = "method",
								description = [[]],
								args = "(min: glm::vec,max: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["IsConvex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSoftBodyMesh"] = {
								type = "method",
								description = [[]],
								args = "(subMesh: std::shared_ptr)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetAABB"] = {
								type = "method",
								description = [[]],
								args = "(min: glm::vec,max: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetOrigin"] = {
								type = "method",
								description = [[]],
								args = "(origin: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSurfaceMaterialId"] = {
								type = "method",
								description = [[]],
								args = "(surfaceMaterialId: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Update"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AddVertex"] = {
								type = "method",
								description = [[]],
								args = "(v: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTriangles"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSoftBodyTriangles"] = {
								type = "method",
								description = [[]],
								args = "(o: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClipAgainstPlane"] = {
								type = "method",
								description = [[]],
								args = "(n: glm::vec,d: ,clippedMeshA: game.Model.CollisionMesh,clippedMeshB: game.Model.CollisionMesh)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearSoftBodyAnchors"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVolume"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearVertices"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AddSoftBodyAnchor"] = {
								type = "method",
								description = [[]],
								args = "(vertIdx: uint32,boneIdx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVolume"] = {
								type = "method",
								description = [[]],
								args = "(volume: )",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearTriangles"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertices"] = {
								type = "method",
								description = [[]],
								args = "(tVertices: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSoftBody"] = {
								type = "method",
								description = [[]],
								args = "(bSoftBody: bool)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSoftBodyMesh"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSoftBodyInfo"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSoftBodyTriangles"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["RemoveSoftBodyAnchor"] = {
								type = "method",
								description = [[]],
								args = "(anchorIdx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["FSOFTBODY_ANCHOR_DISABLE_COLLISIONS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FSOFTBODY_ANCHOR_NONE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FSOFTBODY_ANCHOR_RIGID"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["Flex"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexAnimation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertexAnimation"] = {
								type = "method",
								description = [[]],
								args = "(anim: game.Model.VertexAnimation)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetOperations"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFrameIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["OP_TWO_WAY0"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_TWO_WAY1"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_DME_LOWER_EYELID"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_DME_UPPER_EYELID"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_ADD"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_CONST"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_DOMINATE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_DIV"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_CLOSE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_COMBO"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_EXP"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_COMMA"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_MIN"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_FETCH"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_FETCH2"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_MAX"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_MUL"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_NEG"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_NONE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_OPEN"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_N_WAY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["OP_SUB"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["Operation"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetName"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["index"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["value"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["type"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									}
								}
							},

						}
					},

				}
			},
			["DamageInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetDamage"] = {
						type = "method",
						description = [[]],
						args = "(dmg: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInflictor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ScaleDamage"] = {
						type = "method",
						description = [[]],
						args = "(scale: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttacker"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSource"] = {
						type = "method",
						description = [[]],
						args = "(source: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDamage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetInflictor"] = {
						type = "method",
						description = [[]],
						args = "(hInflictor: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDamageTypes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDamageType"] = {
						type = "method",
						description = [[]],
						args = "(type: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddDamageType"] = {
						type = "method",
						description = [[]],
						args = "(type: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveDamageType"] = {
						type = "method",
						description = [[]],
						args = "(type: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDamageType"] = {
						type = "method",
						description = [[]],
						args = "(type: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSource"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHitPosition"] = {
						type = "method",
						description = [[]],
						args = "(hitPos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetForce"] = {
						type = "method",
						description = [[]],
						args = "(force: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHitGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHitGroup"] = {
						type = "method",
						description = [[]],
						args = "(hitGroup: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAttacker"] = {
						type = "method",
						description = [[]],
						args = "(hAttacker: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddDamage"] = {
						type = "method",
						description = [[]],
						args = "(dmg: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["GibletCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PHYS_SHAPE_BOX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_CYLINDER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_SPHERE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_MODEL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["scale"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mass"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["lifetime"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["angularVelocity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["rotation"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physTranslationOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physRotationOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physShape"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["velocity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["model"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["skin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseRenderProcessor"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(d: ,delta: )",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DepthStageRenderProcessor"] = {
				type = "class",
				inherits = "game.BaseRenderProcessor",
				description = [[]],
				childs = {
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(renderQueue: game.RenderQueue)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["RenderQueue"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsComplete"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["WaitForCompletion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DrawSceneInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetEntityRenderFilter"] = {
						type = "method",
						description = [[]],
						args = "(f: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEntityPrepassFilter"] = {
						type = "method",
						description = [[]],
						args = "(f: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FLAG_DISABLE_RENDER_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_FLIP_VERTICALLY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["clearColor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["renderStats"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["commandBuffer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["renderFlags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["scene"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["toneMapping"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["renderTarget"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["outputImage"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["outputLayerId"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["WorldEnvironment"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFogType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogFarDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAmbientColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShadowResolution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogEnd"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShaderQualityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUnlitProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShadowResolutionProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogStartProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogEndProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShaderQuality"] = {
						type = "method",
						description = [[]],
						args = "(shaderQuality: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogMaxDensityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogTypeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogEnabledProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "(ambientColor: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFogColor"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShaderQuality"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsUnlit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFogStart"] = {
						type = "method",
						description = [[]],
						args = "(start: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetUnlit"] = {
						type = "method",
						description = [[]],
						args = "(bUnlit: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShadowResolution"] = {
						type = "method",
						description = [[]],
						args = "(shadowResolution: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFogEnd"] = {
						type = "method",
						description = [[]],
						args = "(end: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogStart"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFogEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFogEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFogDensity"] = {
						type = "method",
						description = [[]],
						args = "(density: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFogDensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFogType"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["FOG_TYPE_LINEAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOG_TYPE_EXPONENTIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOG_TYPE_EXPONENTIAL2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderPassStats"] = {
				type = "class",
				description = [[]],
				childs = {
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: game.RenderPassStats)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCount"] = {
						type = "method",
						description = [[]],
						args = "(counter: RenderPassStats::Counter)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetTime"] = {
						type = "method",
						description = [[]],
						args = "(timer: time.Timer)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.RenderPassStats)",
						valuetype = "RenderPassStats"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TIMER_CPU_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_CPU_END"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_CPU_EXECUTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_CPU_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_ENTITY_BUFFER_UPDATES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_ENTITY_STATE_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCED_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCED_SKIPPED_RENDER_ITEMS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCE_SETS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCE_SET_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_END"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_EXECUTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAWN_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAWN_TRIANGLES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAWN_VERTICES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAW_CALLS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_ENTITIES_WITHOUT_INSTANCING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_SHADER_STATE_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_MATERIAL_STATE_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_ENTITY_BIND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_DRAW_CALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_RENDER_THREAD_WAIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_MATERIAL_BIND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_SHADER_BIND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderStats"] = {
				type = "class",
				description = [[]],
				childs = {
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: game.RenderStats)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTime"] = {
						type = "method",
						description = [[]],
						args = "(timer: RenderStats::RenderStage)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.RenderStats)",
						valuetype = "RenderStats"
					},
					["GetPassStats"] = {
						type = "method",
						description = [[]],
						args = "(pass: prosper.RenderPass)",
						returns = "(game.RenderPassStats)",
						valuetype = "RenderPassStats"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TIMER_POST_PROCESSING_GPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_TONE_MAPPING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_BLOOM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_FOG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_FXAA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_SSAO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_LIGHTING_PASS_TRANSLUCENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_UPDATE_RENDER_BUFFERS_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_PREPASS_EXECUTION_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_EXECUTION_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_LIGHTING_PASS_EXECUTION_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_LIGHT_CULLING_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_LIGHT_CULLING_GPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_SHADOW_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["LightingStageRenderProcessor"] = {
				type = "class",
				inherits = "game.BaseRenderProcessor",
				description = [[]],
				childs = {
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(renderQueue: game.RenderQueue)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["steamworks"] = {
		type = "lib",
		description = [[]],
		childs = {
			["workshop"] = {
				type = "lib",
				description = [[]],
				childs = {
					["get_item"] = {
						type = "function",
						description = [[]],
						args = "(fileId: uint64,oCallback: luabind::object,language: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["create_item"] = {
						type = "function",
						description = [[]],
						args = "(oCallback: luabind::object)",
						returns = "(void)",
						valuetype = "void"
					},
					["add_item_dependency"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint64,itemIdOther: uint64,callback: luabind::object)",
						returns = "(void)",
						valuetype = "void"
					},
					["add_item_app_dependency"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint64,appId: uint64,callback: luabind::object)",
						returns = "(void)",
						valuetype = "void"
					},
					["remove_item_dependency"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint64,itemIdOther: uint64,callback: luabind::object)",
						returns = "(void)",
						valuetype = "void"
					},
					["remove_item_app_dependency"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint64,appId: uint64,callback: luabind::object)",
						returns = "(void)",
						valuetype = "void"
					},
					["subscribe_item"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint64,callback: luabind::object)",
						returns = "(void)",
						valuetype = "void"
					},
					["unsubscribe_item"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint64,callback: luabind::object)",
						returns = "(void)",
						valuetype = "void"
					},
					["get_subscribed_items"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["register_callback"] = {
						type = "function",
						description = [[]],
						args = "(callbackId: uint32,oCallback: luabind::object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Item"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetDescription"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetScore"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetUpdateLanguage"] = {
								type = "method",
								description = [[]],
								args = "(language: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetURL"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetCategoryFlags"] = {
								type = "method",
								description = [[]],
								args = "(categoryFlags: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTimeAddedToUserList"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetChildCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AreTagsTruncated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetId"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTimeCreated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["IsBanned"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVisibility"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFileSize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetPreviewFileSize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTimeUpdated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSteamIdOwner"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTitle"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["IsValid"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetType"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTags"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetDescription"] = {
								type = "method",
								description = [[]],
								args = "(desc: string)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetTags"] = {
								type = "method",
								description = [[]],
								args = "(tTags: luabind::object)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetCategoryFlags"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetAddonContent"] = {
								type = "method",
								description = [[]],
								args = "(addonDirectory: string)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetPreviewImage"] = {
								type = "method",
								description = [[]],
								args = "(imagePath: string)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetDownVoteCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["PublishChanges"] = {
								type = "method",
								description = [[]],
								args = "(callback: luabind::object,changeLog: string)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetStateFlags"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Download"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetDownloadInfo"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetInstallInfo"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetProgress"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetUpVoteCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetTitle"] = {
								type = "method",
								description = [[]],
								args = "(title: string)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVisibility"] = {
								type = "method",
								description = [[]],
								args = "(visibility: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["TYPE_COMMUNITY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_ART"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_STEAM_VIDEO"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_CONCEPT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_MICROTRANSACTION"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_COLLECTION"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_GAME"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_CONTROLLER_BINDING"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_INTEGRATED_GUIDE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_GAME_MANAGED_ITEM"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_MERCH"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_SCREENSHOT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_SOFTWARE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_STEAMWORKS_ACCESS_INVITE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_VIDEO"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_WEB_GUIDE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_SUBSCRIBED_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_DOWNLOAD_PENDING_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_DOWNLOADING_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_NONE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_INSTALLED_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_LEGACY_ITEM_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_NEEDS_UPDATE_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},

		}
	},
	["light"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_color_temperature"] = {
				type = "function",
				description = [[]],
				args = "(arg0: ulighting::NaturalLightType,arg1: uint32,arg2: uint32)",
				returns = "(void)",
				valuetype = "void"
			},
			["get_average_color_temperature"] = {
				type = "function",
				description = [[]],
				args = "(type: ulighting::NaturalLightType)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["color_temperature_to_color"] = {
				type = "function",
				description = [[]],
				args = "(temperature: uint32)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["wavelength_to_color"] = {
				type = "function",
				description = [[]],
				args = "(wavelength: uint32)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["lux_to_irradiance"] = {
				type = "function",
				description = [[]],
				args = "(lux: )",
				returns = "()",
				valuetype = ""
			},
			["get_luminous_efficacy"] = {
				type = "function",
				description = [[]],
				args = "(type: ulighting::LightSourceType)",
				returns = "()",
				valuetype = ""
			},
			["watts_to_lumens"] = {
				type = "function",
				description = [[]],
				args = "(watt: )",
				returns = "()",
				valuetype = ""
			},
			["irradiance_to_lux"] = {
				type = "function",
				description = [[]],
				args = "(irradiance: )",
				returns = "()",
				valuetype = ""
			},
			["lumens_to_watts"] = {
				type = "function",
				description = [[]],
				args = "(lumen: )",
				returns = "()",
				valuetype = ""
			},
			["convert_light_intensity"] = {
				type = "function",
				description = [[]],
				args = "(intensity: ,srcType: pragma::BaseEnvLightComponent::LightIntensityType,dstType: pragma::BaseEnvLightComponent::LightIntensityType)",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["math"] = {
		type = "lib",
		description = [[]],
		childs = {
			["approach"] = {
				type = "function",
				description = [[]],
				args = "(val: ,tgt: ,inc: )",
				returns = "()",
				valuetype = ""
			},
			["approach_angle"] = {
				type = "function",
				description = [[]],
				args = "(angA: ,angB: ,amount: )",
				returns = "()",
				valuetype = ""
			},
			["is_in_range"] = {
				type = "function",
				description = [[]],
				args = "(v: ,min: ,max: )",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_angle_difference"] = {
				type = "function",
				description = [[]],
				args = "(angA: ,angB: )",
				returns = "()",
				valuetype = ""
			},
			["is_angle_in_range"] = {
				type = "function",
				description = [[]],
				args = "(ang: ,min: ,max: )",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_next_power_of_2"] = {
				type = "function",
				description = [[]],
				args = "(v: uint64)",
				returns = "(uint64)",
				valuetype = "uint64"
			},
			["ease_out"] = {
				type = "function",
				description = [[]],
				args = "(t: ,type: umath::EaseType)",
				returns = "()",
				valuetype = ""
			},
			["normalize_angle"] = {
				type = "function",
				description = [[]],
				args = "(angle: ,base: )",
				returns = "()",
				valuetype = ""
			},
			["calc_ballistic_angle_of_reach"] = {
				type = "function",
				description = [[]],
				args = "(val: ,tgt: ,inc: )",
				returns = "()",
				valuetype = ""
			},
			["clamp"] = {
				type = "function",
				description = [[]],
				args = "(val: ,min: ,max: )",
				returns = "()",
				valuetype = ""
			},
			["clamp_angle"] = {
				type = "function",
				description = [[]],
				args = "(ang: ,min: ,max: )",
				returns = "()",
				valuetype = ""
			},
			["get_previous_power_of_2"] = {
				type = "function",
				description = [[]],
				args = "(v: uint64)",
				returns = "(uint64)",
				valuetype = "uint64"
			},
			["smooth_step"] = {
				type = "function",
				description = [[]],
				args = "(edge0: ,edge1: ,x: )",
				returns = "()",
				valuetype = ""
			},
			["half_float_to_float"] = {
				type = "function",
				description = [[]],
				args = "(v: int16)",
				returns = "()",
				valuetype = ""
			},
			["smoother_step"] = {
				type = "function",
				description = [[]],
				args = "(edge0: ,edge1: ,x: )",
				returns = "()",
				valuetype = ""
			},
			["calc_ballistic_time_of_flight"] = {
				type = "function",
				description = [[]],
				args = "(start: glm::vec,end: glm::vec,vel: glm::vec,gravity: )",
				returns = "()",
				valuetype = ""
			},
			["calc_ballistic_range"] = {
				type = "function",
				description = [[]],
				args = "(speed: ,gravity: ,initialHeight: )",
				returns = "()",
				valuetype = ""
			},
			["calc_ballistic_position"] = {
				type = "function",
				description = [[]],
				args = "(start: glm::vec,vel: glm::vec,gravity: ,t: )",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["calc_ballistic_velocity"] = {
				type = "function",
				description = [[]],
				args = "(start: glm::vec,end: glm::vec,angle: ,gravity: )",
				returns = "([glm::vec])",
				valuetype = "vec"
			},
			["get_frustum_plane_center"] = {
				type = "function",
				description = [[]],
				args = "(pos: glm::vec,forward: glm::vec,z: )",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["calc_average_rotation"] = {
				type = "function",
				description = [[]],
				args = "(t: table)",
				returns = "(glm::qua)",
				valuetype = "qua"
			},
			["round"] = {
				type = "function",
				description = [[]],
				args = "(f: )",
				returns = "(int32)",
				valuetype = "int32"
			},
			["map_value_to_fraction"] = {
				type = "function",
				description = [[]],
				args = "(v: ,c: ,i: )",
				returns = "()",
				valuetype = ""
			},
			["randomf"] = {
				type = "function",
				description = [[]],
				args = "(min: ,max: )",
				returns = "()",
				valuetype = ""
			},
			["calc_fov_from_focal_length"] = {
				type = "function",
				description = [[]],
				args = "(focalLength: ,sensorSize: )",
				returns = "()",
				valuetype = ""
			},
			["float_to_half_float"] = {
				type = "function",
				description = [[]],
				args = "(f: )",
				returns = "(int16)",
				valuetype = "int16"
			},
			["map_value_to_range"] = {
				type = "function",
				description = [[]],
				args = "(value: ,lower: ,upper: )",
				returns = "()",
				valuetype = ""
			},
			["sign"] = {
				type = "function",
				description = [[]],
				args = "(n: )",
				returns = "(int32)",
				valuetype = "int32"
			},
			["ease_in_out"] = {
				type = "function",
				description = [[]],
				args = "(t: ,type: umath::EaseType)",
				returns = "()",
				valuetype = ""
			},
			["perlin_noise"] = {
				type = "function",
				description = [[]],
				args = "(v: glm::vec)",
				returns = "()",
				valuetype = ""
			},
			["horizontal_fov_to_vertical_fov"] = {
				type = "function",
				description = [[]],
				args = "(fovDeg: ,widthOrAspectRatio: )",
				returns = "()",
				valuetype = ""
			},
			["lerp"] = {
				type = "function",
				description = [[]],
				args = "(a: ,b: ,f: )",
				returns = "()",
				valuetype = ""
			},
			["snap_to_grid"] = {
				type = "function",
				description = [[]],
				args = "(f: ,gridSize: uint32)",
				returns = "(int32)",
				valuetype = "int32"
			},
			["calc_hermite_spline"] = {
				type = "function",
				description = [[]],
				args = "(p0: glm::vec,p1: glm::vec,p2: glm::vec,p3: glm::vec,segmentCount: uint32,curvature: )",
				returns = "(tableglm::vec)",
				valuetype = "vec>"
			},
			["calc_hermite_spline_position"] = {
				type = "function",
				description = [[]],
				args = "(p0: glm::vec,p1: glm::vec,p2: glm::vec,p3: glm::vec,s: ,curvature: )",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["calc_vertical_fov"] = {
				type = "function",
				description = [[]],
				args = "(focalLengthInMM: ,width: ,height: )",
				returns = "()",
				valuetype = ""
			},
			["solve_ballistic_arc"] = {
				type = "function",
				description = [[]],
				args = "(projPos: glm::vec,projSpeed: ,tgt: glm::vec,gravity: )",
				returns = "(tableglm::vec)",
				valuetype = "vec>"
			},
			["solve_ballistic_arc_lateral"] = {
				type = "function",
				description = [[]],
				args = "(projPos: glm::vec,lateralSpeed: ,tgt: glm::vec,maxHeight: )",
				returns = "([multglm::vec|float])",
				valuetype = "vec,float>"
			},
			["normalize_uv_coordinates"] = {
				type = "function",
				description = [[]],
				args = "(uv: glm::vec)",
				returns = "(void)",
				valuetype = "void"
			},
			["calc_diagonal_fov"] = {
				type = "function",
				description = [[]],
				args = "(focalLengthInMM: ,width: ,height: )",
				returns = "()",
				valuetype = ""
			},
			["calc_dielectric_specular_reflection"] = {
				type = "function",
				description = [[]],
				args = "(ior: )",
				returns = "()",
				valuetype = ""
			},
			["ease_in"] = {
				type = "function",
				description = [[]],
				args = "(t: ,type: umath::EaseType)",
				returns = "()",
				valuetype = ""
			},
			["get_frustum_plane_boundaries"] = {
				type = "function",
				description = [[]],
				args = "(pos: glm::vec,forward: glm::vec,up: glm::vec,fovRad: ,aspectRatio: ,z: )",
				returns = "(multtableglm::vec|float|float)",
				valuetype = "vec>,float,float>"
			},
			["vertical_fov_to_horizontal_fov"] = {
				type = "function",
				description = [[]],
				args = "(fovDeg: ,widthOrAspectRatio: )",
				returns = "()",
				valuetype = ""
			},
			["get_frustum_plane_point"] = {
				type = "function",
				description = [[]],
				args = "(pos: glm::vec,forward: glm::vec,right: glm::vec,up: glm::vec,fovRad: ,aspectRatio: ,uv: glm::vec,z: )",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["calc_fov_from_lens"] = {
				type = "function",
				description = [[]],
				args = "(sensorSize: ,focalLength: ,aspectRatio: )",
				returns = "()",
				valuetype = ""
			},
			["Quaternion"] = {
				type = "function",
				description = [[]],
				args = "(forward: glm::vec,up: glm::vec)",
				returns = "(glm::qua)",
				valuetype = "qua"
			},
			["is_finite"] = {
				type = "function",
				description = [[]],
				args = "(val: )",
				returns = "()",
				valuetype = ""
			},
			["is_nan"] = {
				type = "function",
				description = [[]],
				args = "(val: )",
				returns = "()",
				valuetype = ""
			},
			["is_inf"] = {
				type = "function",
				description = [[]],
				args = "(val: )",
				returns = "()",
				valuetype = ""
			},
			["cot"] = {
				type = "function",
				description = [[]],
				args = "(x: )",
				returns = "()",
				valuetype = ""
			},
			["diagonal_fov_to_vertical_fov"] = {
				type = "function",
				description = [[]],
				args = "(diagonalFov: ,aspectRatio: )",
				returns = "()",
				valuetype = ""
			},
			["calc_focal_length_from_fov"] = {
				type = "function",
				description = [[]],
				args = "(hfov: ,sensorSize: )",
				returns = "()",
				valuetype = ""
			},
			["calc_aperture_size_from_fstop"] = {
				type = "function",
				description = [[]],
				args = "(fstop: ,focalLength: )",
				returns = "()",
				valuetype = ""
			},
			["set_flag"] = {
				type = "function",
				description = [[]],
				args = "(flags: int64,flag: int64,set: bool)",
				returns = "(int64)",
				valuetype = "int64"
			},
			["calc_horizontal_fov"] = {
				type = "function",
				description = [[]],
				args = "(focalLengthInMM: ,width: ,height: )",
				returns = "()",
				valuetype = ""
			},
			["get_frustum_plane_size"] = {
				type = "function",
				description = [[]],
				args = "(fovRad: ,aspectRatio: ,z: )",
				returns = "(multfloat|float)",
				valuetype = "mult<float,float>"
			},
			["NoiseModule"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(float: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Max"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["RidgedMulti"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(lacunarity: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(frequency: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(quality: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(octaveCount: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(seed: int32)",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["Spheres"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Cylinders"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Const"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Abs"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["ScalePoint"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Select"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Terrace"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Cache"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Blend"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["ScaleBias"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Invert"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["TranslatePoint"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["RotatePoint"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Multiply"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Curve"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Displace"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Exponent"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Power"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Billow"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(lacunarity: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(frequency: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetPersistence"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(quality: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(octaveCount: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetPersistence"] = {
								type = "method",
								description = [[]],
								args = "(persistence: )",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(seed: int32)",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["Min"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Perlin"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(lacunarity: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(frequency: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetPersistence"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(quality: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(octaveCount: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetPersistence"] = {
								type = "method",
								description = [[]],
								args = "(persistence: )",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(seed: int32)",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["Turbulance"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Voronoi"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(seed: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(frequency: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetDisplacement"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetDisplacement"] = {
								type = "method",
								description = [[]],
								args = "(displacement: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["Checkerboard"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Clamp"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},

				}
			},
			["Vector2i"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Transform"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTransformationMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector,arg2: Quaternion)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPosition"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["UpdateMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat2x3"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["QuaternionInternal"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Mul"] = {
						type = "method",
						description = [[]],
						args = "(b: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(q1: glm::qua)",
						returns = "()",
						valuetype = ""
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(qb: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetConjugate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(qb: glm::qua,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Slerp"] = {
						type = "method",
						description = [[]],
						args = "(qb: glm::qua,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOrientation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToAxisAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RotateX"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RotateY"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RotateZ"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ApproachDirection"] = {
						type = "method",
						description = [[]],
						args = "(up: glm::vec,targetDir: glm::vec,rotAmount: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClampRotation"] = {
						type = "method",
						description = [[]],
						args = "(bounds: math.EulerAngles)",
						returns = "(glm::qua)",
						valuetype = "qua"
					},
					["w"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector2"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["RotateAround"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec,ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vecB: glm::vec,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(x: ,y: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(n: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector4"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector,arg2: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(x: ,y: ,z: ,w: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vecB: glm::vec,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(n: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["w"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Mul"] = {
						type = "method",
						description = [[]],
						args = "(b: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["PlanarDistance"] = {
						type = "method",
						description = [[]],
						args = "(p1: glm::vec,n: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["GetAngle"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(n: glm::vec)",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["PlanarDistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: glm::vec,n: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "(vecB: glm::vec)",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(orientation: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["RotateAround"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec,ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vecB: glm::vec,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Equals"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Slerp"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2,arg2: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["SnapToGrid"] = {
						type = "method",
						description = [[]],
						args = "(gridSize: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetYaw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["OuterProduct"] = {
						type = "method",
						description = [[]],
						args = "(v1: glm::vec)",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ToScreenUv"] = {
						type = "method",
						description = [[]],
						args = "(vp: glm::mat)",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPerpendicular"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["ProjectToPlane"] = {
						type = "method",
						description = [[]],
						args = "(n: glm::vec,d: )",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "(glm::qua)",
						valuetype = "qua"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["PIDController"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetIntegralTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float,arg4: float,arg5: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDerivativeTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(max: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTerms"] = {
						type = "method",
						description = [[]],
						args = "(i: ,d: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetProportionalTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetIntegralTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetTerms"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetProportionalTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Calculate"] = {
						type = "method",
						description = [[]],
						args = "(setPoint: ,dt: )",
						returns = "()",
						valuetype = ""
					},
					["ClearRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMax"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDerivativeTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					}
				}
			},
			["Mat2"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Vector4i"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32,arg4: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["w"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vectori"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mat2x4"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["EulerAngles"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: Quaternion)",
						returns = "(void)",
						valuetype = "void"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["GetOrientation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Equals"] = {
						type = "method",
						description = [[]],
						args = "(b: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["p"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["NoiseMap"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(x: int32,y: int32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat3x2"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat3x4"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat4"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MulRow"] = {
						type = "method",
						description = [[]],
						args = "(rowIndex: uint32,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["MulCol"] = {
						type = "method",
						description = [[]],
						args = "(colIndex: uint32,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(axis: glm::vec,ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Decompose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SwapRows"] = {
						type = "method",
						description = [[]],
						args = "(rowSrc: uint32,rowDst: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SwapColumns"] = {
						type = "method",
						description = [[]],
						args = "(colSrc: uint32,colDst: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyProjectionDepthBiasOffset"] = {
						type = "method",
						description = [[]],
						args = "(nearZ: ,farZ: ,d: ,delta: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat4x2"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat4x3"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat3"] = {
				type = "class",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcEigenValues"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Plane"] = {
				type = "class",
				description = [[]],
				childs = {
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDistance"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCenterPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector,arg2: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["Transform"] = {
						type = "method",
						description = [[]],
						args = "(transform: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MoveToPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["console"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Var"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDefault"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInt"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHelpText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBool"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddChangeCallback"] = {
						type = "method",
						description = [[]],
						args = "(oFunction: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["nav"] = {
		type = "lib",
		description = [[]],
		childs = {
			["load"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([std::shared_ptr])",
				valuetype = "shared_ptr"
			},
			["generate"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(void)",
				valuetype = "void"
			},
			["Config"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PARTITION_TYPE_LAYERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARTITION_TYPE_MONOTONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARTITION_TYPE_WATERSHED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["sampleDetailDist"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["sampleDetailMaxError"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["walkableRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["walkableSlopeAngle"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["samplePartitionType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["characterHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxClimbHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxEdgeLength"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["cellSize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxSimplificationError"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minRegionSize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mergeRegionSize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["cellHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["vertsPerPoly"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetConfig"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nav.Config)",
						valuetype = "Config"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(fname: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["RayCast"] = {
						type = "method",
						description = [[]],
						args = "(start: glm::vec,end: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["bit"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["prosper"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_buffer"] = {
				type = "function",
				description = [[]],
				args = "(bufCreateInfo: prosper.BufferCreateInfo)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["util"] = {
				type = "lib",
				description = [[]],
				childs = {
					["get_square_vertex_uv_buffer"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_square_vertices"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_square_uv_format"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_square_vertex_buffer"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_square_uv_buffer"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_square_uv_coordinates"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_square_vertex_count"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_square_vertex_format"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["allocate_temporary_buffer"] = {
						type = "function",
						description = [[]],
						args = "(size: uint32)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_line_vertex_format"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_line_vertex_buffer"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_line_vertices"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["get_line_vertex_count"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					}
				}
			},
			["Sampler"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetAddressModeU"] = {
						type = "method",
						description = [[]],
						args = "(addressModeU: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCompareOperation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMinLod"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBorderColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMagFilter"] = {
						type = "method",
						description = [[]],
						args = "(magFilter: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMipmapMode"] = {
						type = "method",
						description = [[]],
						args = "(mipmapMode: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxLod"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinFilter"] = {
						type = "method",
						description = [[]],
						args = "(minFilter: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAddressModeV"] = {
						type = "method",
						description = [[]],
						args = "(addressModeV: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinLod"] = {
						type = "method",
						description = [[]],
						args = "(minLod: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMagFilter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMipmapMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxAnisotropy"] = {
						type = "method",
						description = [[]],
						args = "(maxAnisotropy: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCompareEnabled"] = {
						type = "method",
						description = [[]],
						args = "(compareEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCompareOperation"] = {
						type = "method",
						description = [[]],
						args = "(compareOp: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMipLodBias"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxLod"] = {
						type = "method",
						description = [[]],
						args = "(maxLod: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBorderColor"] = {
						type = "method",
						description = [[]],
						args = "(borderColor: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAddressModeU"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAddressModeW"] = {
						type = "method",
						description = [[]],
						args = "(addressModeW: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCompareEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxAnisotropy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::ISampler)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMinFilter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAddressModeV"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAddressModeW"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnisotropyEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Image"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::IImage)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAspectSubresourceLayout"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAlignment"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSampleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSrgb"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsNormalMap"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetSrgb"] = {
						type = "method",
						description = [[]],
						args = "(srgb: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetExtent2D"] = {
						type = "method",
						description = [[]],
						args = "(mipmap: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMipmapSize"] = {
						type = "method",
						description = [[]],
						args = "(mipmap: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLayerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMipmapCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUsage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSharingMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTiling"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMemory"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,imgBuf: util.ImageBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(cmd: prosper::ICommandBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToImageBuffer"] = {
						type = "method",
						description = [[]],
						args = "(includeLayers: bool,includeMipmaps: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNormalMap"] = {
						type = "method",
						description = [[]],
						args = "(normalMap: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMemoryBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCreateInfo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Convert"] = {
						type = "method",
						description = [[]],
						args = "(cmd: prosper::ICommandBuffer,format: prosper::Format)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BufferCopyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["srcOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["size"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["PipelineBarrierInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["srcStageMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstStageMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TextureCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FLAG_CREATE_IMAGE_VIEW_FOR_EACH_LAYER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_RESOLVABLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["imageView"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["sampler"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderPassInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(rp: prosper::IRenderPass)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetClearValues"] = {
						type = "method",
						description = [[]],
						args = "(tClearValues: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLayer"] = {
						type = "method",
						description = [[]],
						args = "(layerId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddClearValue"] = {
						type = "method",
						description = [[]],
						args = "(clearValue: prosper.ClearValue)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: class std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["ClearBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexWeightBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVertexWeightBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAlphaBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: pragma::SceneMesh)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlphaBuffer"] = {
						type = "method",
						description = [[]],
						args = "(hBuffer: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BufferImageCopyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetHeight"] = {
						type = "method",
						description = [[]],
						args = "(height: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWidth"] = {
						type = "method",
						description = [[]],
						args = "(width: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstImageLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bufferOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipLevel"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseArrayLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aspectMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderTarget"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.RenderTarget)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFramebuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderPass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Framebuffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::IFramebuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["RenderPass"] = {
				type = "class",
				description = [[]],
				childs = {
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::IRenderPass)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["SubresourceLayout"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["offset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["rowPitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["arrayPitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["size"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["depthPitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Event"] = {
				type = "class",
				description = [[]],
				childs = {
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::IEvent)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Fence"] = {
				type = "class",
				description = [[]],
				childs = {
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::IFence)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BufferCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FLAG_SPARSE_ALIASED_RESIDENCY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_SPARSE_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_CONCURRENT_SHARING_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_DONT_ALLOCATE_MEMORY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["usageFlags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["memoryFeatures"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["size"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["queueFamilyMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageViewCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["swizzleRed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleGreen"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseMipmap"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleBlue"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleAlpha"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["levelCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["format"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipmapLevels"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageSubresourceLayers"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["aspectMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipLevel"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseArrayLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FLAG_SPARSE_ALIASED_RESIDENCY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_SPARSE_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_DONT_ALLOCATE_MEMORY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_ALLOCATE_DISCRETE_MEMORY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NORMAL_MAP_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_CONCURRENT_SHARING_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_CUBEMAP_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_SRGB_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_FULL_MIPMAP_CHAIN_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["usageFlags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["memoryFeatures"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layers"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tiling"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["samples"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["postCreateLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["format"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["type"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["queueFamilyMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TimerQuery"] = {
				type = "class",
				description = [[]],
				childs = {
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.TimerQuery)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["RenderTargetCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["useLayerFramebuffers"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["CommandBufferRecorder"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::ISwapCommandBufferGroup)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPending"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ExecuteCommands"] = {
						type = "method",
						description = [[]],
						args = "(drawCmd: prosper::ICommandBuffer)",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["SamplerCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["maxLod"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["borderColor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["magFilter"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["addressModeV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipmapMode"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxAnisotropy"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipLodBias"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["addressModeW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minFilter"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["addressModeU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["compareEnable"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["compareOp"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minLod"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageView"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLayerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAspectMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBaseLayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetImageFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBaseMipmapLevel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSwizzleArray"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::IImageView)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMipmapCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ClearImageInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["subresourceRange"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SwapBuffer"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["RenderPassCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddSubPassDependency"] = {
						type = "method",
						description = [[]],
						args = "(subPassId: uint32,sourceSubPassId: uint32,destinationSubPassId: uint32,sourceStageMask: uint32,destinationStageMask: uint32,sourceAccessMask: uint32,destinationAccessMask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSubPassDepthStencilAttachmentEnabled"] = {
						type = "method",
						description = [[]],
						args = "(subPassId: uint32,bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAttachment"] = {
						type = "method",
						description = [[]],
						args = "(format: uint32,initialLayout: uint32,finalLayout: uint32,loadOp: uint32,storeOp: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddSubPass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddSubPassColorAttachment"] = {
						type = "method",
						description = [[]],
						args = "(subPassId: uint32,colorAttId: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BlitInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["dstSubresourceLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcSubresourceLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageCopyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["srcSubresource"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstSubresource"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcImageLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstImageLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageSubresourceRange"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32,arg3: uint32,arg4: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["layerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseArrayLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["levelCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseMipLevel"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Window"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsIconified"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsFloating"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetKeyState"] = {
						type = "method",
						description = [[]],
						args = "(key: GLFW::Key)",
						returns = "(GLFW::KeyState)",
						valuetype = "KeyState"
					},
					["ShouldClose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsDecorated"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ClearCursor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCursorInputMode"] = {
						type = "method",
						description = [[]],
						args = "(cursorMode: GLFW::CursorMode)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMouseButtonState"] = {
						type = "method",
						description = [[]],
						args = "(mouseButton: GLFW::MouseButton)",
						returns = "(GLFW::KeyState)",
						valuetype = "KeyState"
					},
					["GetCursorInputMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(GLFW::CursorMode)",
						valuetype = "CursorMode"
					},
					["SetCloseCallback"] = {
						type = "method",
						description = [[]],
						args = "(oOnClose: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["Close"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetCursor"] = {
						type = "method",
						description = [[]],
						args = "(cursor: GLFW::Cursor)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsVisible"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SwapBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStickyMouseButtonsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStickyMouseButtonsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetCursorPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["GetFramebufferSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["Restore"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWindowTitle"] = {
						type = "method",
						description = [[]],
						args = "(title: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShouldClose"] = {
						type = "method",
						description = [[]],
						args = "(shouldClose: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetClipboardString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["SetClipboardString"] = {
						type = "method",
						description = [[]],
						args = "(str: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCursorPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStickyKeysEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStickyKeysEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetSize"] = {
						type = "method",
						description = [[]],
						args = "(size: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsResizable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsFocused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFrameSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["Iconify"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Show"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Hide"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearCursorPosOverride"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCursorPosOverride"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["MakeContextCurrent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["WindowCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["srgbCapable"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["alphaBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["stencilBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["doublebuffer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["refreshRate"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["samples"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["greenBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["redBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["blueBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["title"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["depthBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["focused"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["resizable"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["visible"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["decorated"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["autoIconify"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["floating"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["stereo"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ClearValue"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetDepthStencil"] = {
						type = "method",
						description = [[]],
						args = "(depth: ,stencil: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(clearColor: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TimestampQuery"] = {
				type = "class",
				description = [[]],
				childs = {
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.TimestampQuery)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DescriptorSet"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetBindingCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBindingTexture"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,texture: prosper::Texture)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBindingArrayTexture"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,texture: prosper::Texture,arrayIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBindingUniformBuffer"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,buffer: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBindingUniformBufferDynamic"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,buffer: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBindingStorageBuffer"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,buffer: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::IDescriptorSetGroup)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Buffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUsageFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPermanentlyMapped"] = {
						type = "method",
						description = [[]],
						args = "(b: bool,mapFlags: prosper::IBuffer::MapFlags)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMemory"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32,ds: util.DataStream)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStartOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MapMemory"] = {
						type = "method",
						description = [[]],
						args = "(mapFlags: prosper::IBuffer::MapFlags)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBaseIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMemory"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["UnmapMemory"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCreateInfo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["CommandBuffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordCopyBufferToImage"] = {
						type = "method",
						description = [[]],
						args = "(bufSrc: prosper::IBuffer,imgDst: prosper::IImage)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordCopyBuffer"] = {
						type = "method",
						description = [[]],
						args = "(bufSrc: prosper::IBuffer,bufDst: prosper::IBuffer,copyInfo: prosper::util::BufferCopy)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordClearImage"] = {
						type = "method",
						description = [[]],
						args = "(img: prosper::IImage,depth: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordCopyImage"] = {
						type = "method",
						description = [[]],
						args = "(imgSrc: prosper::IImage,imgDst: prosper::IImage,copyInfo: prosper::util::CopyInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordClearAttachment"] = {
						type = "method",
						description = [[]],
						args = "(img: prosper::IImage,clearDepth: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBlitImage"] = {
						type = "method",
						description = [[]],
						args = "(imgSrc: prosper::IImage,imgDst: prosper::IImage,blitInfo: prosper.BlitInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordUpdateBuffer"] = {
						type = "method",
						description = [[]],
						args = "(buf: prosper::IBuffer,offset: uint32,ds: util.DataStream)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordSetStencilWriteMask"] = {
						type = "method",
						description = [[]],
						args = "(faceMask: uint32,stencilWriteMask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordResolveImage"] = {
						type = "method",
						description = [[]],
						args = "(imgSrc: prosper::IImage,imgDst: prosper::IImage)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBlitTexture"] = {
						type = "method",
						description = [[]],
						args = "(texSrc: prosper::Texture,imgDst: prosper::IImage)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordDraw"] = {
						type = "method",
						description = [[]],
						args = "(vertexCount: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordGenerateMipmaps"] = {
						type = "method",
						description = [[]],
						args = "(img: prosper::IImage,currentLayout: uint32,srcAccessMask: uint32,srcStage: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordPipelineBarrier"] = {
						type = "method",
						description = [[]],
						args = "(barrierInfo: prosper.PipelineBarrierInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordImageBarrier"] = {
						type = "method",
						description = [[]],
						args = "(img: prosper::IImage,srcStageMask: uint32,dstStageMask: uint32,oldLayout: uint32,newLayout: uint32,srcAccessMask: uint32,dstAccessMask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBufferBarrier"] = {
						type = "method",
						description = [[]],
						args = "(buf: prosper::IBuffer,srcStageMask: uint32,dstStageMask: uint32,srcAccessMask: uint32,dstAccessMask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordSetViewport"] = {
						type = "method",
						description = [[]],
						args = "(width: uint32,height: uint32,x: uint32,y: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordSetScissor"] = {
						type = "method",
						description = [[]],
						args = "(width: uint32,height: uint32,x: uint32,y: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBeginRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(rpInfo: prosper.RenderPassInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordSetDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(minDepthBounds: ,maxDepthBounds: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordEndRenderPass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["StopRecording"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordCopyImageToBuffer"] = {
						type = "method",
						description = [[]],
						args = "(imgSrc: prosper::IImage,srcImageLayout: uint32,bufDst: prosper::IBuffer,copyInfo: prosper.BufferImageCopyInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordDrawIndexedIndirect"] = {
						type = "method",
						description = [[]],
						args = "(buffer: prosper::IBuffer,offset: uint32,drawCount: uint32,stride: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordDrawIndirect"] = {
						type = "method",
						description = [[]],
						args = "(buffer: prosper::IBuffer,offset: uint32,drawCount: uint32,stride: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordFillBuffer"] = {
						type = "method",
						description = [[]],
						args = "(buffer: prosper::IBuffer,offset: uint32,size: uint32,data: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordSetBlendConstants"] = {
						type = "method",
						description = [[]],
						args = "(blendConstants: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordSetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(depthBiasConstantFactor: ,depthBiasClamp: ,slopeScaledDepthBias: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordSetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(lineWidth: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordSetStencilCompareMask"] = {
						type = "method",
						description = [[]],
						args = "(faceMask: uint32,stencilCompareMask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordSetStencilReference"] = {
						type = "method",
						description = [[]],
						args = "(faceMask: uint32,stencilReference: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordDrawGradient"] = {
						type = "method",
						description = [[]],
						args = "(rt: prosper.RenderTarget,dir: glm::vec,lnodes: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["StartRecording"] = {
						type = "method",
						description = [[]],
						args = "(oneTimeSubmit: bool,simultaneousUseAllowed: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["Flush"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::ICommandBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(graphics: prosper::ShaderGraphics,vertexBuffer: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindVertexBuffers"] = {
						type = "method",
						description = [[]],
						args = "(graphics: prosper::ShaderGraphics,vertexBuffers: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(indexBuffer: prosper::IBuffer,indexType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordDrawIndexed"] = {
						type = "method",
						description = [[]],
						args = "(indexCount: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Texture"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetImageView"] = {
						type = "method",
						description = [[]],
						args = "(imgView: prosper::IImageView)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetImage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSampler"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetImageView"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper::Texture)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["os"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["tf2"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["locale"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_language"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["change_language"] = {
				type = "function",
				description = [[]],
				args = "(lan: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["set_text"] = {
				type = "function",
				description = [[]],
				args = "(id: std::basic_string,text: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["load"] = {
				type = "function",
				description = [[]],
				args = "(fileName: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			}
		}
	},
	["fudm"] = {
		type = "lib",
		description = [[]],
		childs = {
			["impl"] = {
				type = "lib",
				description = [[]],
				childs = {
					["class_to_type_id"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},
					["name_to_type_id"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},
					["registered_types"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},

				}
			},

		}
	},
	["file"] = {
		type = "lib",
		description = [[]],
		childs = {
			["find"] = {
				type = "function",
				description = [[]],
				args = "(arg1: std::basic_string,arg2: object,arg3: object)",
				returns = "(void)",
				valuetype = "void"
			},
			["compare_path"] = {
				type = "function",
				description = [[]],
				args = "(path0: std::basic_string,path1: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["delete"] = {
				type = "function",
				description = [[]],
				args = "(ppath: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["create_directory"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["strip_illegal_filename_characters"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["create_path"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["exists"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["open_external_asset_file"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["find_external_game_asset_files"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string,outFiles: object,outDirs: object)",
				returns = "(void)",
				valuetype = "void"
			},
			["to_relative_path"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_size"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(uint64)",
				valuetype = "uint64"
			},
			["is_directory"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["find_lua_files"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["get_attributes"] = {
				type = "function",
				description = [[]],
				args = "(arg0: string)",
				returns = "(uint64)",
				valuetype = "uint64"
			},
			["get_flags"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(uint64)",
				valuetype = "uint64"
			},
			["find_absolute_path"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["get_canonicalized_path"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_file_path"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_file_extension"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["copy"] = {
				type = "function",
				description = [[]],
				args = "(srcFile: std::basic_string,dstFile: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_file_name"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["remove_file_extension"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string,t: table)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["open"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string,openMode: FileOpenMode)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["read"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["write"] = {
				type = "function",
				description = [[]],
				args = "(strPath: std::basic_string,content: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["File"] = {
				type = "class",
				description = [[]],
				childs = {
					["ReadChar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteString"] = {
						type = "method",
						description = [[]],
						args = "(str: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadBool"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(arg2: )",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt64"] = {
						type = "method",
						description = [[]],
						args = "(d: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt8"] = {
						type = "method",
						description = [[]],
						args = "(arg2: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat2x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["WriteUInt8"] = {
						type = "method",
						description = [[]],
						args = "(arg2: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt64"] = {
						type = "method",
						description = [[]],
						args = "(d: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat3x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["ReadUInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector2"] = {
						type = "method",
						description = [[]],
						args = "(v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt32"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt32"] = {
						type = "method",
						description = [[]],
						args = "(arg2: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Read"] = {
						type = "method",
						description = [[]],
						args = "(ds: util.DataStream,size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat2"] = {
						type = "method",
						description = [[]],
						args = "(col: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt16"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int16)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadLongDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt16"] = {
						type = "method",
						description = [[]],
						args = "(arg2: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(col: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteChar"] = {
						type = "method",
						description = [[]],
						args = "(d: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["WriteFloat"] = {
						type = "method",
						description = [[]],
						args = "(arg2: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteDouble"] = {
						type = "method",
						description = [[]],
						args = "(arg2: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat2x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["Seek"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector"] = {
						type = "method",
						description = [[]],
						args = "(v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(col: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector4"] = {
						type = "method",
						description = [[]],
						args = "(v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(col: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["WriteMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(col: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat3"] = {
						type = "method",
						description = [[]],
						args = "(col: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(col: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(col: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat4"] = {
						type = "method",
						description = [[]],
						args = "(col: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat3x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["ReadMat3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["ReadMat4x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["Eof"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat4x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["ReadMat4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["ReadQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Close"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["IgnoreComments"] = {
						type = "method",
						description = [[]],
						args = "(start: std::basic_string,end: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["Write"] = {
						type = "method",
						description = [[]],
						args = "(ds: util.DataStream,size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Tell"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteBool"] = {
						type = "method",
						description = [[]],
						args = "(arg2: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["udm"] = {
		type = "lib",
		description = [[]],
		childs = {
			["StructDescription"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetTypes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetMemberCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Reference"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.PropertyWrapper)",
						valuetype = "PropertyWrapper"
					}
				}
			},
			["Srgba"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["HdrColor"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Data"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["GetAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["ResolveReferences"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LoadProperty"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRootElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm::Element)",
						valuetype = "Element"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(f: file.File)",
						returns = "(void)",
						valuetype = "void"
					},
					["SaveAscii"] = {
						type = "method",
						description = [[]],
						args = "(f: file.File,flags: udm::AsciiSaveFlags)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Element"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetChildCount"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["AddArray"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,size: uint32,type: udm::Type,arrayType: udm::ArrayType)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFromPath"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(object)",
						valuetype = "object"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,ds: util.DataStream)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm::Type)",
						valuetype = "Type"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,type: udm::Type,t: table,arrayType: udm::Type)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(propOther: udm.PropertyWrapper,mergeFlags: udm::MergeFlags)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(type: udm::Type)",
						returns = "(object)",
						valuetype = "object"
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(object)",
						valuetype = "object"
					},
					["Add"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string,type: udm::Type)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddAssetData"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["ToAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["GetArrayValuesFromBlob"] = {
						type = "method",
						description = [[]],
						args = "(type: udm::Type)",
						returns = "(object)",
						valuetype = "object"
					},
					["AddBlobFromArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string,type: udm::Type,t: table)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlobData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Property"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "(propName: std::basic_string)",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["GetChildCount"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["AddArray"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,size: uint32,type: udm::Type,arrayType: udm::ArrayType)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFromPath"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(object)",
						valuetype = "object"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,ds: util.DataStream)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm::Type)",
						valuetype = "Type"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,type: udm::Type,t: table,arrayType: udm::Type)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(propOther: udm.PropertyWrapper,mergeFlags: udm::MergeFlags)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(type: udm::Type)",
						returns = "(object)",
						valuetype = "object"
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(object)",
						valuetype = "object"
					},
					["Add"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string,type: udm::Type)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddAssetData"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["ToAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["GetArrayValuesFromBlob"] = {
						type = "method",
						description = [[]],
						args = "(type: udm::Type)",
						returns = "(object)",
						valuetype = "object"
					},
					["AddBlobFromArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string,type: udm::Type,t: table)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlobData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Array"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["AssetData"] = {
				type = "class",
				inherits = "udm.LinkedPropertyWrapper",
				description = [[]],
				childs = {
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["SetAssetVersion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAssetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["GetAssetVersion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetData"] = {
						type = "method",
						description = [[]],
						args = "(prop: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAssetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["LinkedPropertyWrapper"] = {
				type = "class",
				inherits = "udm.PropertyWrapper",
				description = [[]],
				childs = {
					["GetPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["ClaimOwnership"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::shared_ptr)",
						valuetype = "shared_ptr"
					},
					["GetAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					}
				}
			},
			["PropertyWrapper"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetChildCount"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["AddArray"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,size: uint32,type: udm::Type,arrayType: udm::ArrayType)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(object)",
						valuetype = "object"
					},
					["GetFromPath"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,ds: util.DataStream)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,type: udm::Type,t: table,arrayType: udm::Type)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm::Type)",
						valuetype = "Type"
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(propOther: udm.PropertyWrapper,mergeFlags: udm::MergeFlags)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(object)",
						valuetype = "object"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(type: udm::Type)",
						returns = "(object)",
						valuetype = "object"
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["It"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(LuaUdmArrayIterator)",
						valuetype = "LuaUdmArrayIterator"
					},
					["Add"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string,type: udm::Type)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddAssetData"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["ToAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["GetArrayValuesFromBlob"] = {
						type = "method",
						description = [[]],
						args = "(type: udm::Type)",
						returns = "(object)",
						valuetype = "object"
					},
					["AddBlobFromArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string,type: udm::Type,t: table)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlobData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Struct"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: udm.StructDescription)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.StructDescription)",
						valuetype = "StructDescription"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					}
				}
			},

		}
	},
	["sweep"] = {
		type = "lib",
		description = [[]],
		childs = {
			["aabb_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(ext: glm::vec,origin: glm::vec,dir: glm::vec,n: glm::vec,d: ,outResult: bool,outT: )",
				returns = "(void)",
				valuetype = "void"
			},
			["aabb_with_aabb"] = {
				type = "function",
				description = [[]],
				args = "(originA: glm::vec,endA: glm::vec,extentsA: glm::vec,originB: glm::vec,endB: glm::vec,extentsB: glm::vec,outResult: bool,outTEntry: ,outTExit: ,outNormal: glm::vec)",
				returns = "(void)",
				valuetype = "void"
			}
		}
	},
	["asset"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_binary_udm_extension"] = {
				type = "function",
				description = [[]],
				args = "(type: pragma::asset::Type)",
				returns = "([std::basic_string])",
				valuetype = "basic_string"
			},
			["matches_format"] = {
				type = "function",
				description = [[]],
				args = "(format0: std::basic_string,format1: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_ascii_udm_extension"] = {
				type = "function",
				description = [[]],
				args = "(type: pragma::asset::Type)",
				returns = "([std::basic_string])",
				valuetype = "basic_string"
			},
			["determine_format_from_data"] = {
				type = "function",
				description = [[]],
				args = "(f: file.File,type: pragma::asset::Type)",
				returns = "([std::basic_string])",
				valuetype = "basic_string"
			},
			["determine_format_from_filename"] = {
				type = "function",
				description = [[]],
				args = "(fileName: std::basic_string,type: pragma::asset::Type)",
				returns = "([std::basic_string])",
				valuetype = "basic_string"
			},
			["absolute_path_to_relative_path"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string,type: pragma::asset::Type)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["determine_type_from_extension"] = {
				type = "function",
				description = [[]],
				args = "(ext: std::basic_string)",
				returns = "([pragma::asset::Type])",
				valuetype = "Type"
			},
			["relative_path_to_absolute_path"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string,type: pragma::asset::Type)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_udm_format_extension"] = {
				type = "function",
				description = [[]],
				args = "(type: pragma::asset::Type,binary: bool)",
				returns = "([std::basic_string])",
				valuetype = "basic_string"
			},
			["get_asset_root_directory"] = {
				type = "function",
				description = [[]],
				args = "(type: pragma::asset::Type)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_legacy_extension"] = {
				type = "function",
				description = [[]],
				args = "(type: pragma::asset::Type)",
				returns = "([std::basic_string])",
				valuetype = "basic_string"
			},
			["find_file"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string,type: pragma::asset::Type)",
				returns = "([std::basic_string])",
				valuetype = "basic_string"
			},
			["is_loaded"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string,type: pragma::asset::Type)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["exists"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string,type: pragma::asset::Type)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["delete"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string,type: pragma::asset::Type)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["clear_unused_models"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["clear_flagged_models"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["matches"] = {
				type = "function",
				description = [[]],
				args = "(name0: std::basic_string,name1: std::basic_string,type: pragma::asset::Type)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["flag_model_for_cache_removal"] = {
				type = "function",
				description = [[]],
				args = "(mdl: game.Model)",
				returns = "(void)",
				valuetype = "void"
			},
			["clear_unused_materials"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["lock_asset_watchers"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(void)",
				valuetype = "void"
			},
			["unlock_asset_watchers"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(void)",
				valuetype = "void"
			},
			["get_supported_import_file_extensions"] = {
				type = "function",
				description = [[]],
				args = "(type: pragma::asset::Type)",
				returns = "(tablestd::basic_string)",
				valuetype = "basic_string>"
			},
			["get_supported_export_file_extensions"] = {
				type = "function",
				description = [[]],
				args = "(type: pragma::asset::Type)",
				returns = "(tablestd::basic_string)",
				valuetype = "basic_string>"
			},
			["get_normalized_path"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string,type: pragma::asset::Type)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_supported_extensions"] = {
				type = "function",
				description = [[]],
				args = "(type: pragma::asset::Type)",
				returns = "(tablestd::basic_string)",
				valuetype = "basic_string>"
			},
			["clear_unused_textures"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["MapExportInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddCamera"] = {
						type = "method",
						description = [[]],
						args = "(cam: CCameraComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddLightSource"] = {
						type = "method",
						description = [[]],
						args = "(light: CLightComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["includeMapLightSources"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TextureImportInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["normalMap"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srgb"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["package"] = {
		type = "lib",
		description = [[]],
		childs = {
			["preload"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["loaders"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["input"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["engine"] = {
		type = "lib",
		description = [[]],
		childs = {
			["unbind_key"] = {
				type = "function",
				description = [[]],
				args = "(key: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["set_record_console_output"] = {
				type = "function",
				description = [[]],
				args = "(record: bool)",
				returns = "(void)",
				valuetype = "void"
			},
			["get_tick_count"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint64)",
				valuetype = "uint64"
			},
			["load_library"] = {
				type = "function",
				description = [[]],
				args = "(path: std::basic_string)",
				returns = "(variantbool|std::basic_string)",
				valuetype = "basic_string>"
			},
			["library_exists"] = {
				type = "function",
				description = [[]],
				args = "(library: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_info"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tablevoid)",
				valuetype = "table<void>"
			},
			["poll_console_output"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([multstd::basic_string|Con::MessageFlags[|util.Color]])",
				valuetype = "Color>"
			},
			["shutdown"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(void)",
				valuetype = "void"
			},
			["get_working_directory"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["create_font"] = {
				type = "function",
				description = [[]],
				args = "(identifier: std::basic_string,font: std::basic_string,size: uint32)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["get_font"] = {
				type = "function",
				description = [[]],
				args = "(identifier: std::basic_string)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["set_fixed_frame_delta_time_interpretation"] = {
				type = "function",
				description = [[]],
				args = "(fps: uint16)",
				returns = "(void)",
				valuetype = "void"
			},
			["bind_key"] = {
				type = "function",
				description = [[]],
				args = "(key: std::basic_string,function: object)",
				returns = "(void)",
				valuetype = "void"
			},
			["clear_fixed_frame_delta_time_interpretation"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(void)",
				valuetype = "void"
			},
			["get_window_resolution"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["set_tick_delta_time_tied_to_frame_rate"] = {
				type = "function",
				description = [[]],
				args = "(tieToFrameRate: bool)",
				returns = "(void)",
				valuetype = "void"
			},
			["get_render_resolution"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["get_staging_render_target"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["get_current_frame_index"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["get_text_size"] = {
				type = "function",
				description = [[]],
				args = "(text: std::basic_string,font: engine.FontInfo)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["FontInfo"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["boundingvolume"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_rotated_aabb"] = {
				type = "function",
				description = [[]],
				args = "(min: glm::vec,max: glm::vec,rot: glm::mat)",
				returns = "(multglm::vec|glm::vec)",
				valuetype = "vec>"
			}
		}
	},
	["tool"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["time"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_timer"] = {
				type = "function",
				description = [[]],
				args = "(delay: ,repetitions: int32,fc: object)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["cur_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["real_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["create_simple_timer"] = {
				type = "function",
				description = [[]],
				args = "(delay: ,fc: object)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["delta_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["time_since_epoch"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint64)",
				valuetype = "uint64"
			},
			["convert_duration"] = {
				type = "function",
				description = [[]],
				args = "(duration: int64,srcType: util::DurationType,dstType: util::DurationType)",
				returns = "(int64)",
				valuetype = "int64"
			},
			["frame_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["server_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "()",
				valuetype = ""
			},
			["Timer"] = {
				type = "class",
				description = [[]],
				childs = {
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Pause"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsRunning"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCall"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Call"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRepetitions"] = {
						type = "method",
						description = [[]],
						args = "(reps: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Start"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRepetitionsLeft"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTimeLeft"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInterval"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetInterval"] = {
						type = "method",
						description = [[]],
						args = "(time: )",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["intersect"] = {
		type = "lib",
		description = [[]],
		childs = {
			["sphere_in_plane_mesh"] = {
				type = "function",
				description = [[]],
				args = "(vec: glm::vec,r: ,planeTable: table)",
				returns = "(int32)",
				valuetype = "int32"
			},
			["sphere_with_cone"] = {
				type = "function",
				description = [[]],
				args = "(sphereOrigin: glm::vec,radius: ,coneOrigin: glm::vec,coneDir: glm::vec,coneAngle: )",
				returns = "(bool)",
				valuetype = "bool"
			},
			["aabb_in_plane_mesh"] = {
				type = "function",
				description = [[]],
				args = "(min: glm::vec,max: glm::vec,planeTable: table)",
				returns = "(int32)",
				valuetype = "int32"
			},
			["obb_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(min: glm::vec,max: glm::vec,origin: glm::vec,rot: glm::qua,n: glm::vec,d: )",
				returns = "(bool)",
				valuetype = "bool"
			},
			["line_with_triangle"] = {
				type = "function",
				description = [[]],
				args = "(arg1: glm::vec,arg2: glm::vec,arg3: glm::vec,arg4: glm::vec,arg5: glm::vec,arg6: object,arg7: object)",
				returns = "(void)",
				valuetype = "void"
			},
			["aabb_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(min: glm::vec,max: glm::vec,n: glm::vec,d: )",
				returns = "(bool)",
				valuetype = "bool"
			},
			["line_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(origin: glm::vec,dir: glm::vec,n: glm::vec,d: )",
				returns = "(object)",
				valuetype = "object"
			},
			["aabb_with_triangle"] = {
				type = "function",
				description = [[]],
				args = "(min: glm::vec,max: glm::vec,a: glm::vec,b: glm::vec,c: glm::vec)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["sphere_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(sphereOrigin: glm::vec,sphereRadius: ,n: glm::vec,d: )",
				returns = "(bool)",
				valuetype = "bool"
			},
			["line_with_mesh"] = {
				type = "function",
				description = [[]],
				args = "(arg1: glm::vec,arg2: glm::vec,arg3: game.Model,arg4: table,arg5: object,arg6: object)",
				returns = "(void)",
				valuetype = "void"
			},
			["point_in_plane_mesh"] = {
				type = "function",
				description = [[]],
				args = "(vec: glm::vec,planeTable: table)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["line_with_sphere"] = {
				type = "function",
				description = [[]],
				args = "(lineOrigin: glm::vec,lineDir: glm::vec,sphereOrigin: glm::vec,sphereRadius: )",
				returns = "(void)",
				valuetype = "void"
			},
			["aabb_with_aabb"] = {
				type = "function",
				description = [[]],
				args = "(minA: glm::vec,maxA: glm::vec,minB: glm::vec,maxB: glm::vec)",
				returns = "(umath::intersection::Intersect)",
				valuetype = "Intersect"
			},
			["sphere_with_sphere"] = {
				type = "function",
				description = [[]],
				args = "(originA: glm::vec,rA: ,originB: glm::vec,rB: )",
				returns = "(bool)",
				valuetype = "bool"
			},
			["aabb_with_sphere"] = {
				type = "function",
				description = [[]],
				args = "(min: glm::vec,max: glm::vec,origin: glm::vec,r: )",
				returns = "(bool)",
				valuetype = "bool"
			},
			["line_with_aabb"] = {
				type = "function",
				description = [[]],
				args = "(start: glm::vec,dir: glm::vec,min: glm::vec,max: glm::vec,outMin: object,outMax: object)",
				returns = "(void)",
				valuetype = "void"
			},
			["line_with_obb"] = {
				type = "function",
				description = [[]],
				args = "(rayStart: glm::vec,rayDir: glm::vec,min: glm::vec,max: glm::vec)",
				returns = "(object)",
				valuetype = "object"
			},
			["point_in_aabb"] = {
				type = "function",
				description = [[]],
				args = "(vec: glm::vec,min: glm::vec,max: glm::vec)",
				returns = "(bool)",
				valuetype = "bool"
			}
		}
	},
	["dmx"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Data"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetElements"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRootAttribute"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Attribute"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(attrOther: dmx.Attribute)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveArrayValue"] = {
						type = "method",
						description = [[]],
						args = "(val: dmx.Attribute)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddArrayValue"] = {
						type = "method",
						description = [[]],
						args = "(val: dmx.Attribute)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValueAsString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TYPE_TIME_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ANGLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BINARY_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_TIME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BINARY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ANGLE_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BOOL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BOOL_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_MATRIX_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_COLOR_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ELEMENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ELEMENT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FLOAT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INVALID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_MATRIX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_OBJECTID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_QUATERNION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_OBJECTID_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_QUATERNION_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_STRING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_STRING_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_UINT64"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_UINT8"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR2_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR3_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR4_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Element"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetAttribute"] = {
						type = "method",
						description = [[]],
						args = "(id: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttr"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttributeValue"] = {
						type = "method",
						description = [[]],
						args = "(id: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttrV"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGUID"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttributes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(elOther: Element)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["sound"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Source"] = {
				type = "class",
				description = [[]],
				childs = {
					["Pause"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPlaying"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRangeOffsets"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDirection"] = {
						type = "method",
						description = [[]],
						args = "(dir: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRoomRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOuterConeGains"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGainAuto"] = {
						type = "method",
						description = [[]],
						args = "(directHF: bool,send: bool,sendHF: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPriority"] = {
						type = "method",
						description = [[]],
						args = "(char: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetReferenceDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStereoAngles"] = {
						type = "method",
						description = [[]],
						args = "(leftAng: ,rightAng: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLooping"] = {
						type = "method",
						description = [[]],
						args = "(loop: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOuterConeGains"] = {
						type = "method",
						description = [[]],
						args = "(gain: ,gainHF: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoomRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(rolloff: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPriority"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(pitch: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDirectFilter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMinGain"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFadeOutDuration"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOuterConeAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOuterConeGain"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOuterConeGain"] = {
						type = "method",
						description = [[]],
						args = "(gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOuterConeGainHF"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOuterConeGainHF"] = {
						type = "method",
						description = [[]],
						args = "(gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxGain"] = {
						type = "method",
						description = [[]],
						args = "(gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxDistance"] = {
						type = "method",
						description = [[]],
						args = "(dist: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetConeAngles"] = {
						type = "method",
						description = [[]],
						args = "(inner: ,outer: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDirectGainHFAuto"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddType"] = {
						type = "method",
						description = [[]],
						args = "(type: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["CallOnStateChanged"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGainAuto"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRolloffFactors"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FadeIn"] = {
						type = "method",
						description = [[]],
						args = "(time: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["FadeOut"] = {
						type = "method",
						description = [[]],
						args = "(time: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDistanceRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGainRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSendGainAuto"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxAudibleDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFadeInDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFadeOutDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSendGainHFAuto"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDopplerFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLooping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLeftStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLeftStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRightStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetConeAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAirAbsorptionFactor"] = {
						type = "method",
						description = [[]],
						args = "(airAbsorption: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAirAbsorptionFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDirectFilter"] = {
						type = "method",
						description = [[]],
						args = "(gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddEffect"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSource"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSource"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGainRange"] = {
						type = "method",
						description = [[]],
						args = "(minGain: ,maxGain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDistanceRange"] = {
						type = "method",
						description = [[]],
						args = "(refDist: ,maxDist: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStereoAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEffectGain"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRolloffFactors"] = {
						type = "method",
						description = [[]],
						args = "(factor: ,roomFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEffectParameters"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveEffect"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRightStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDopplerFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOrientation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOrientation"] = {
						type = "method",
						description = [[]],
						args = "(at: glm::vec,up: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFadeInDuration"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Play"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(start: ,end: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsRelative"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Rewind"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(type: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGain"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOuterConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInnerConeAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRelative"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxGain"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGain"] = {
						type = "method",
						description = [[]],
						args = "(gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(rolloff: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinGain"] = {
						type = "method",
						description = [[]],
						args = "(gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetInnerConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(ang: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "(sec: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetReferenceDistance"] = {
						type = "method",
						description = [[]],
						args = "(dist: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIntensity"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsStopped"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPhonemeData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Effect"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetProperties"] = {
						type = "method",
						description = [[]],
						args = "(props: al::EfxEqualizer)",
						returns = "(void)",
						valuetype = "void"
					},
					["ChorusProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["feedback"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["depth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["delay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phase"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["CompressorProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["onOff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["FrequencyShifterProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["rightDirection"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["frequency"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["leftDirection"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["EqualizerProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["lowGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lowCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid2Center"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid1Gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid2Width"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid1Center"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["highCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid1Width"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid2Gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["highGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["VocalMorpherProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["phonemeA"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeACoarseTuning"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeB"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeBCoarseTuning"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["AutoWahProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["attackTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["releaseTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["resonance"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["peakGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["DistortionProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["eqBandwidth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["edge"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lowpassCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["eqCenter"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["ReverbProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["density"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["modulationDepth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["diffusion"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayHFRatio"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["reflectionsGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gainLF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayLFRatio"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["reflectionsDelay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["reflectionsPan"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lateReverbDelay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lateReverbGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lateReverbPan"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["echoTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["echoDepth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["modulationTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["airAbsorptionGainHF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["hfReference"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lfReference"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["roomRolloffFactor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayHFLimit"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gainHF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["PitchShifterProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["fineTune"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["coarseTune"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["EchoProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["lrDelay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["feedback"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["delay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["spread"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["damping"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["RingModulatorProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["frequency"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["highpassCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["FlangerProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["feedback"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["depth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["delay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phase"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},

		}
	},
	["debug"] = {
		type = "lib",
		description = [[]],
		childs = {
			["memory_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(memoryType: pragma::ai::Memory::MemoryType)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["draw_line"] = {
				type = "function",
				description = [[]],
				args = "(start: glm::vec,end: glm::vec,renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["npc_state_to_string"] = {
				type = "function",
				description = [[]],
				args = "(npcState: NPCSTATE)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["behavior_selector_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(selectorType: pragma::ai::SelectorType)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["behavior_task_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(type: pragma::ai::BehaviorNode::Type)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["task_to_string"] = {
				type = "function",
				description = [[]],
				args = "(task: pragma::ai::Task)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["disposition_to_string"] = {
				type = "function",
				description = [[]],
				args = "(disposition: DISPOSITION)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["behavior_task_decorator_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(decoratorType: pragma::ai::TaskDecorator::DecoratorType)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["behavior_task_result_to_string"] = {
				type = "function",
				description = [[]],
				args = "(result: regex.Result)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["stackdump"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_point"] = {
				type = "function",
				description = [[]],
				args = "(renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_box"] = {
				type = "function",
				description = [[]],
				args = "(min: glm::vec,max: glm::vec,renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_sphere"] = {
				type = "function",
				description = [[]],
				args = "(radius: ,renderInfo: DebugRenderInfo,recursionLevel: uint32)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_cone"] = {
				type = "function",
				description = [[]],
				args = "(dist: ,renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_truncated_cone"] = {
				type = "function",
				description = [[]],
				args = "(startRadius: ,dist: ,endRadius: ,renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_cylinder"] = {
				type = "function",
				description = [[]],
				args = "(dist: ,radius: ,renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_pose"] = {
				type = "function",
				description = [[]],
				args = "(renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_text"] = {
				type = "function",
				description = [[]],
				args = "(text: std::basic_string,size: ,renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_path"] = {
				type = "function",
				description = [[]],
				args = "(points: table,renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_spline"] = {
				type = "function",
				description = [[]],
				args = "(points: table,segmentCount: uint32,renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["draw_plane"] = {
				type = "function",
				description = [[]],
				args = "(renderInfo: DebugRenderInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["move_state_to_string"] = {
				type = "function",
				description = [[]],
				args = "(v: pragma::BaseAIComponent::MoveResult)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["beep"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(void)",
				valuetype = "void"
			},
			["RendererObject"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVisible"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["SetPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsVisible"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["angle"] = {
		type = "lib",
		description = [[]],
		childs = {
			["random"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(math.EulerAngles)",
				valuetype = "EulerAngles"
			},
			["create_from_string"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string)",
				returns = "(math.EulerAngles)",
				valuetype = "EulerAngles"
			}
		}
	},
	["ai"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_schedule"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["register_faction"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string)",
				returns = "(std::shared_ptr)",
				valuetype = "shared_ptr"
			},
			["find_faction_by_name"] = {
				type = "function",
				description = [[]],
				args = "(name: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["get_factions"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(object)",
				valuetype = "object"
			},
			["register_task"] = {
				type = "function",
				description = [[]],
				args = "(taskClass: object)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["TaskDecorator"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetDecoratorType"] = {
						type = "method",
						description = [[]],
						args = "(decoratorType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_DECORATOR_TYPE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_LIMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Squad"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMembers"] = {
						type = "method",
						description = [[]],
						args = "(squad: AISquad)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Memory"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFragmentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFragments"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TYPE_SMELL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SOUND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VISUAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskMoveRandom"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMoveDistance"] = {
						type = "method",
						description = [[]],
						args = "(dist: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMoveActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_DISTANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_MOVE_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["MoveInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["activity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["faceTarget"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["turnSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["moveOnPath"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["destinationTolerance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["moveSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Schedule"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterType"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddInterruptFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["DebugPrint"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetInterruptFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddTask"] = {
						type = "method",
						description = [[]],
						args = "(node: pragma::ai::BehaviorNode)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInterruptFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRootTask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasParameter"] = {
						type = "method",
						description = [[]],
						args = "(parameterId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,i: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,f: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,s: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["Cancel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TaskRandom"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetChance"] = {
						type = "method",
						description = [[]],
						args = "(chance: )",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_CHANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayLayeredActivity"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnimationSlot"] = {
						type = "method",
						description = [[]],
						args = "(animationSlot: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_ANIMATION_SLOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlaySound"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(pitch: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoundName"] = {
						type = "method",
						description = [[]],
						args = "(sndName: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetGain"] = {
						type = "method",
						description = [[]],
						args = "(gain: )",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_GAIN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_PITCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_SOUND_NAME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskMoveToTarget"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMoveTarget"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMoveDistance"] = {
						type = "method",
						description = [[]],
						args = "(dist: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMoveActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_DISTANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TARGET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_MOVE_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskDebugPrint"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMessage"] = {
						type = "method",
						description = [[]],
						args = "(msg: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_MESSAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskDebugDrawText"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMessage"] = {
						type = "method",
						description = [[]],
						args = "(msg: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_MESSAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["MemoryFragment"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetLastTimeSensed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLastCheckTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLastTimeHeared"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInView"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLastKnownPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLastKnownVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLastTimeSeen"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BehaviorTask"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterType"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSelectorType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTask"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTasks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CreateDecoratedTask"] = {
						type = "method",
						description = [[]],
						args = "(decoratorType: uint32,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,s: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScheduleParameter"] = {
						type = "method",
						description = [[]],
						args = "(taskParamId: uint8,scheduleParamId: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["LinkParameter"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8,taskOther: Lua::ai::TaskWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["CreateTask"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasParameter"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,i: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,f: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(sched: std::shared_ptr,paramIdx: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["RESULT_PENDING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RESULT_FAILED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RESULT_INITIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RESULT_SUCCEEDED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTOR_TYPE_RANDOM_SHUFFLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTOR_TYPE_SEQUENTIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_ALWAYS_FAIL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_ALWAYS_SUCCEED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_LIMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_INHERIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_INVERT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_REPEAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_UNTIL_FAIL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_UNTIL_SUCCESS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SELECTOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SEQUENCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_BOOL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_ENTITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_EULER_ANGLES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_STRING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_INT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_QUATERNION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_VECTOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayAnimation"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(animation: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFaceTarget"] = {
						type = "method",
						description = [[]],
						args = "(target: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFacePrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_FACE_TARGET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayActivity"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFacePrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFaceTarget"] = {
						type = "method",
						description = [[]],
						args = "(target: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_FACE_TARGET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayLayeredAnimation"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(animation: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnimationSlot"] = {
						type = "method",
						description = [[]],
						args = "(animationSlot: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_ANIMATION_SLOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Faction"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddClass"] = {
						type = "method",
						description = [[]],
						args = "(className: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlliedFaction"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetClasses"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasClass"] = {
						type = "method",
						description = [[]],
						args = "(className: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDisposition"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction,disposition: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEnemyFaction"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFearsomeFaction"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetNeutralFaction"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDisposition"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDefaultDisposition"] = {
						type = "method",
						description = [[]],
						args = "(disposition: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDefaultDisposition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TaskWait"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetWaitTime"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxWaitTime"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinWaitTime"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_MAX_WAIT_TIME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_MIN_WAIT_TIME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskLookAtTarget"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetLookDuration"] = {
						type = "method",
						description = [[]],
						args = "(duration: )",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_LOOK_DURATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskEvent"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetEventId"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEventArgument"] = {
						type = "method",
						description = [[]],
						args = "(argIdx: uint32,arg: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["PARAMETER_EVENT_ARGS_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_EVENT_ID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseBehaviorTask"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Think"] = {
						type = "method",
						description = [[]],
						args = "(SAIComponentHandleWrapper,uint32)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["OnTaskComplete"] = {
						type = "method",
						description = [[]],
						args = "(taskId: uint32,result: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnSetScheduleParameter"] = {
						type = "method",
						description = [[]],
						args = "(t: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["Start"] = {
						type = "method",
						description = [[]],
						args = "(SAIComponentHandleWrapper)",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},

		}
	},
	["animation"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Pose"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdx: uint32,transform: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(other: pragma::animation::AnimatedPose,f: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneTranslationTable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableuint32)",
						valuetype = "table<uint32>"
					},
					["Globalize"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: game.Model.Skeleton)",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Localize"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: game.Model.Skeleton)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTransformCount"] = {
						type = "method",
						description = [[]],
						args = "(count: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBoneIndex"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,boneIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdx: uint32)",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					}
				}
			},
			["Manager"] = {
				type = "class",
				description = [[]],
				childs = {
					["StopAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentAnimationId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([std::shared_ptr])",
						valuetype = "shared_ptr"
					},
					["GetPreviousSlice"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(pragma::animation::AnimationSlice)",
						valuetype = "AnimationSlice"
					},
					["GetCurrentAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([std::shared_ptr])",
						valuetype = "shared_ptr"
					},
					["GetPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::shared_ptr)",
						valuetype = "shared_ptr"
					}
				}
			},
			["Channel"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInterpolation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(pragma::animation::AnimationChannelInterpolation)",
						valuetype = "AnimationChannelInterpolation"
					},
					["SetValueType"] = {
						type = "method",
						description = [[]],
						args = "(type: udm::Type)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetInterpolation"] = {
						type = "method",
						description = [[]],
						args = "(interp: pragma::animation::AnimationChannelInterpolation)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTargetPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Path)",
						valuetype = "Path"
					},
					["GetValueArray"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["SetTargetPath"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTimesArray"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(prop: udm.LinkedPropertyWrapper)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(prop: udm.LinkedPropertyWrapper)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm::Type)",
						valuetype = "Type"
					}
				}
			},
			["Slice"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChannelValueCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetChannelProperty"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "([std::shared_ptr])",
						valuetype = "shared_ptr"
					}
				}
			},
			["Player"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetCurrentSlice"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(pragma::animation::AnimationSlice)",
						valuetype = "AnimationSlice"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLooping"] = {
						type = "method",
						description = [[]],
						args = "(looping: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: animation.Animation2)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["IsLooping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(playbackRate: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Advance"] = {
						type = "method",
						description = [[]],
						args = "(dt: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRemainingDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentTimeFraction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetCurrentTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetCurrentTime"] = {
						type = "method",
						description = [[]],
						args = "(time: ,force: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Animation2"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddChannel"] = {
						type = "method",
						description = [[]],
						args = "(path: std::basic_string,valueType: udm::Type)",
						returns = "([std::shared_ptr])",
						valuetype = "shared_ptr"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChannels"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablestd::shared_ptr)",
						valuetype = "shared_ptr>"
					},
					["FindChannel"] = {
						type = "method",
						description = [[]],
						args = "(path: util.Path)",
						returns = "([std::shared_ptr])",
						valuetype = "shared_ptr"
					},
					["GetChannelCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetAnimationSpeedFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetAnimationSpeedFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDuration"] = {
						type = "method",
						description = [[]],
						args = "(duration: )",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["doc"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Enum"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGameStateFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TYPE_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_REGULAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["EnumSet"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUnderlyingType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEnums"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DerivedFrom"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Module"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BaseCollectionObject"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Group"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Overload"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetParameters"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Function"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetExampleCode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRelated"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOverloads"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGameStateFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FLAG_BIT_DEBUG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_DEPRECATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_VANILLA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FUNCTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_HOOK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_METHOD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Collection"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFunctions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDerivedFrom"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEnumSets"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMembers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRelated"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FLAG_BIT_BASE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_CLASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_LIBRARY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Member"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(pragma::doc::Variant)",
						valuetype = "Variant"
					},
					["GetDefault"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGameStateFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MODE_READ"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MODE_WRITE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["resource"] = {
		type = "lib",
		description = [[]],
		childs = {
			["add_lua_file"] = {
				type = "function",
				description = [[]],
				args = "(f: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_list"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(object)",
				valuetype = "object"
			},
			["add_file"] = {
				type = "function",
				description = [[]],
				args = "(res: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			}
		}
	},
	["regex"] = {
		type = "lib",
		description = [[]],
		childs = {
			["replace"] = {
				type = "function",
				description = [[]],
				args = "(input: std::basic_string,e: std::basic_string,format: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["Result"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMatchCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFormat"] = {
						type = "method",
						description = [[]],
						args = "(format: std::basic_string,flags: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasMatch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["jit"] = {
		type = "lib",
		description = [[]],
		childs = {
			["opt"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["string"] = {
		type = "lib",
		description = [[]],
		childs = {
			["hash"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["join"] = {
				type = "function",
				description = [[]],
				args = "(values: table)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["compare"] = {
				type = "function",
				description = [[]],
				args = "(a: std::basic_string,b: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["fill_zeroes"] = {
				type = "function",
				description = [[]],
				args = "(i: std::basic_string,numDigits: int32)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["split"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string,delimiter: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["replace"] = {
				type = "function",
				description = [[]],
				args = "(subject: std::basic_string,from: std::basic_string,to: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["remove_quotes"] = {
				type = "function",
				description = [[]],
				args = "(s: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["is_number"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["remove_whitespace"] = {
				type = "function",
				description = [[]],
				args = "(s: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["is_integer"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["find_similar_elements"] = {
				type = "function",
				description = [[]],
				args = "(baseElement: std::basic_string,inElements: table,limit: uint32,outSimilarElements: object,outSimilarities: object)",
				returns = "(void)",
				valuetype = "void"
			},
			["find_longest_common_substring"] = {
				type = "function",
				description = [[]],
				args = "(s0: std::basic_string,s1: std::basic_string,outStartIdx: uint64,outLen: uint64,outEndIdx: uint64)",
				returns = "(void)",
				valuetype = "void"
			},
			["calc_levenshtein_distance"] = {
				type = "function",
				description = [[]],
				args = "(s0: std::basic_string,s1: std::basic_string)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["calc_levenshtein_similarity"] = {
				type = "function",
				description = [[]],
				args = "(s0: std::basic_string,s1: std::basic_string)",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["net"] = {
		type = "lib",
		description = [[]],
		childs = {
			["ClientRecipientFilter"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetRecipients"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["RecipientFilter"] = {
				type = "class",
				description = [[]],
				childs = {
					["HasRecipient"] = {
						type = "method",
						description = [[]],
						args = "(hPl: SPlayerComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFilterType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFilterType"] = {
						type = "method",
						description = [[]],
						args = "(filterType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRecipients"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddRecipient"] = {
						type = "method",
						description = [[]],
						args = "(hPl: SPlayerComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveRecipient"] = {
						type = "method",
						description = [[]],
						args = "(hPl: SPlayerComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["TYPE_EXCLUDE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INCLUDE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Packet"] = {
				type = "class",
				description = [[]],
				childs = {
					["ReadChar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteString"] = {
						type = "method",
						description = [[]],
						args = "(str: std::basic_string,bNullterminated: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadBool"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt64"] = {
						type = "method",
						description = [[]],
						args = "(t: int64)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVertex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt8"] = {
						type = "method",
						description = [[]],
						args = "(t: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt8"] = {
						type = "method",
						description = [[]],
						args = "(t: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat2x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt64"] = {
						type = "method",
						description = [[]],
						args = "(t: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVectori"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat3x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector2"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector2i"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt32"] = {
						type = "method",
						description = [[]],
						args = "(t: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt32"] = {
						type = "method",
						description = [[]],
						args = "(t: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat2"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt16"] = {
						type = "method",
						description = [[]],
						args = "(t: int16)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadLongDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt16"] = {
						type = "method",
						description = [[]],
						args = "(t: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteChar"] = {
						type = "method",
						description = [[]],
						args = "(t: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteFloat"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteDouble"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat2x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVectori"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector4i"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Seek"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadSoundSource"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector4"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteAngles"] = {
						type = "method",
						description = [[]],
						args = "(t: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat4"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector2i"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector4i"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat3x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVertex"] = {
						type = "method",
						description = [[]],
						args = "(t: game.Model.Vertex)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat4x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat4x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTimeSinceTransmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUniqueEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WritePlayer"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteSoundSource"] = {
						type = "method",
						description = [[]],
						args = "(snd: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat3"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Tell"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadBinaryString"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToBinaryString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadString"] = {
						type = "method",
						description = [[]],
						args = "(len: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadStringUntil"] = {
						type = "method",
						description = [[]],
						args = "(pattern: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteBinary"] = {
						type = "method",
						description = [[]],
						args = "(dsOther: NetPacket)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadBinary"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteBool"] = {
						type = "method",
						description = [[]],
						args = "(t: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUniqueEntity"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["pcl"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["mesh"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["geometry"] = {
		type = "lib",
		description = [[]],
		childs = {
			["closest_point_on_aabb_to_point"] = {
				type = "function",
				description = [[]],
				args = "(min: glm::vec,max: glm::vec,p: glm::vec)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["closest_point_on_plane_to_point"] = {
				type = "function",
				description = [[]],
				args = "(n: glm::vec,d: ,p: glm::vec)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["closest_point_on_line_to_point"] = {
				type = "function",
				description = [[]],
				args = "(start: glm::vec,end: glm::vec,p: glm::vec)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["triangulate"] = {
				type = "function",
				description = [[]],
				args = "(tContour: table)",
				returns = "(object)",
				valuetype = "object"
			},
			["get_side_of_point_to_plane"] = {
				type = "function",
				description = [[]],
				args = "(n: glm::vec,d: ,p: glm::vec)",
				returns = "(umath::geometry::PlaneSide)",
				valuetype = "PlaneSide"
			},
			["closest_points_between_lines"] = {
				type = "function",
				description = [[]],
				args = "(pA: glm::vec,qA: glm::vec,pB: glm::vec,qB: glm::vec,outCA: glm::vec,outCB: glm::vec,outD: )",
				returns = "(void)",
				valuetype = "void"
			},
			["closest_point_on_triangle_to_point"] = {
				type = "function",
				description = [[]],
				args = "(a: glm::vec,b: glm::vec,c: glm::vec,p: glm::vec)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["smallest_enclosing_sphere"] = {
				type = "function",
				description = [[]],
				args = "(tVerts: table,outCenter: glm::vec,outRadius: )",
				returns = "(void)",
				valuetype = "void"
			},
			["get_triangle_winding_order"] = {
				type = "function",
				description = [[]],
				args = "(v0: glm::vec,v1: glm::vec,v2: glm::vec)",
				returns = "(umath::geometry::WindingOrder)",
				valuetype = "WindingOrder"
			},
			["closest_point_on_sphere_to_line"] = {
				type = "function",
				description = [[]],
				args = "(origin: glm::vec,radius: ,start: glm::vec,end: glm::vec)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["calc_rotation_between_planes"] = {
				type = "function",
				description = [[]],
				args = "(n0: glm::vec,n1: glm::vec)",
				returns = "(glm::qua)",
				valuetype = "qua"
			},
			["generate_truncated_cone_mesh"] = {
				type = "function",
				description = [[]],
				args = "(arg1: glm::vec,arg2: ,arg3: glm::vec,arg4: ,arg5: ,arg6: object,arg7: object,arg8: object)",
				returns = "(void)",
				valuetype = "void"
			},
			["calc_face_normal"] = {
				type = "function",
				description = [[]],
				args = "(v0: glm::vec,v1: glm::vec,v2: glm::vec)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["calc_volume_of_triangle"] = {
				type = "function",
				description = [[]],
				args = "(v0: glm::vec,v1: glm::vec,v2: glm::vec)",
				returns = "()",
				valuetype = ""
			},
			["calc_volume_of_polyhedron"] = {
				type = "function",
				description = [[]],
				args = "(tVerts: table,tTriangles: table)",
				returns = "()",
				valuetype = ""
			},
			["calc_point_on_triangle"] = {
				type = "function",
				description = [[]],
				args = "(v0: glm::vec,v1: glm::vec,v2: glm::vec,a: ,b: )",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["calc_center_of_mass"] = {
				type = "function",
				description = [[]],
				args = "(tVerts: table,tTriangles: table,outCom: glm::vec,outVolume: )",
				returns = "(void)",
				valuetype = "void"
			},
			["calc_triangle_area"] = {
				type = "function",
				description = [[]],
				args = "(a: glm::vec,b: glm::vec,c: glm::vec)",
				returns = "()",
				valuetype = ""
			},
			["calc_barycentric_coordinates"] = {
				type = "function",
				description = [[]],
				args = "(p0: glm::vec,p1: glm::vec,p2: glm::vec,hitPoint: glm::vec)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["get_side_of_point_to_line"] = {
				type = "function",
				description = [[]],
				args = "(a: glm::vec,b: glm::vec,c: glm::vec)",
				returns = "(umath::geometry::LineSide)",
				valuetype = "LineSide"
			},
			["get_outline_vertices"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			}
		}
	},
	["noise"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["import"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["ik"] = {
		type = "lib",
		description = [[]],
		childs = {
			["IkSolver"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddBallSocketConstraint"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,limit: )",
						returns = "(ik.IkBallSocketConstraint)",
						valuetype = "IkBallSocketConstraint"
					},
					["AddCustomConstraint"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,f: object)",
						returns = "(ik.IkConstraint)",
						valuetype = "IkConstraint"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(n: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGlobalTransform"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["Solve"] = {
						type = "method",
						description = [[]],
						args = "(pose: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocalTransform"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,pose: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLocalTransform"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["AddHingeConstraint"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,axis: glm::vec)",
						returns = "(ik.IkHingeConstraint)",
						valuetype = "IkHingeConstraint"
					}
				}
			},
			["CCDIkSolver"] = {
				type = "class",
				inherits = "ik.IkSolver",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["IkConstraint"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetJointIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["IkBallSocketConstraint"] = {
				type = "class",
				inherits = "ik.IkConstraint",
				description = [[]],
				childs = {
					["GetLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["IkHingeConstraint"] = {
				type = "class",
				inherits = "ik.IkConstraint",
				description = [[]],
				childs = {
					["ClearLimits"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLimits"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLimits"] = {
						type = "method",
						description = [[]],
						args = "(limits: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["FABRIkSolver"] = {
				type = "class",
				inherits = "ik.IkSolver",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["io"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["log"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["vector"] = {
		type = "lib",
		description = [[]],
		childs = {
			["random"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["to_min_max"] = {
				type = "function",
				description = [[]],
				args = "(inOutA: glm::vec,inOutB: glm::vec,c: glm::vec)",
				returns = "(void)",
				valuetype = "void"
			},
			["create_from_string"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["get_min_max"] = {
				type = "function",
				description = [[]],
				args = "(t: table,outMin: glm::vec,outMax: glm::vec)",
				returns = "(void)",
				valuetype = "void"
			},
			["random2D"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["calc_average"] = {
				type = "function",
				description = [[]],
				args = "(points: table)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["calc_best_fitting_plane"] = {
				type = "function",
				description = [[]],
				args = "(points: table,ang: ,outNormal: glm::vec,outDistance: )",
				returns = "(void)",
				valuetype = "void"
			},
			["calc_linear_velocity_from_angular"] = {
				type = "function",
				description = [[]],
				args = "(refPos: glm::vec,angVel: glm::vec,tgtPos: glm::vec)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToScreenUv"] = {
						type = "method",
						description = [[]],
						args = "(vp: glm::mat)",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2,arg2: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Mul"] = {
						type = "method",
						description = [[]],
						args = "(b: phys.ScaledTransform)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["PlanarDistance"] = {
						type = "method",
						description = [[]],
						args = "(p1: glm::vec,n: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["GetAngle"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(n: glm::vec)",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["PlanarDistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: glm::vec,n: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "(vecB: glm::vec)",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "()",
						valuetype = ""
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(orientation: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["RotateAround"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec,ang: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vecB: glm::vec,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Equals"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Slerp"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetYaw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SnapToGrid"] = {
						type = "method",
						description = [[]],
						args = "(gridSize: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ProjectToPlane"] = {
						type = "method",
						description = [[]],
						args = "(n: glm::vec,d: )",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["GetPerpendicular"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["OuterProduct"] = {
						type = "method",
						description = [[]],
						args = "(v1: glm::vec)",
						returns = "(glm::mat)",
						valuetype = "mat"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(b: glm::vec)",
						returns = "(glm::qua)",
						valuetype = "qua"
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["matrix"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_from_axis_angle"] = {
				type = "function",
				description = [[]],
				args = "(v: glm::vec,ang: )",
				returns = "(glm::mat)",
				valuetype = "mat"
			},
			["create_from_axes"] = {
				type = "function",
				description = [[]],
				args = "(forward: glm::vec,right: glm::vec,up: glm::vec)",
				returns = "(glm::mat)",
				valuetype = "mat"
			},
			["create_orthogonal_matrix"] = {
				type = "function",
				description = [[]],
				args = "(left: ,right: ,bottom: ,top: ,zNear: ,zFar: )",
				returns = "(glm::mat)",
				valuetype = "mat"
			},
			["create_perspective_matrix"] = {
				type = "function",
				description = [[]],
				args = "(fov: ,aspectRatio: ,zNear: ,zFar: )",
				returns = "(glm::mat)",
				valuetype = "mat"
			},
			["calc_covariance_matrix"] = {
				type = "function",
				description = [[]],
				args = "(points: table)",
				returns = "(glm::mat)",
				valuetype = "mat"
			},
			["create_look_at_matrix"] = {
				type = "function",
				description = [[]],
				args = "(arg0: glm::vec,arg1: glm::vec,arg2: glm::vec)",
				returns = "(glm::mat)",
				valuetype = "mat"
			},
			["calc_projection_depth_bias_offset"] = {
				type = "function",
				description = [[]],
				args = "(p: ,nearZ: ,farZ: ,d: ,delta: )",
				returns = "()",
				valuetype = ""
			}
		}
	},
	["table"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["util"] = {
		type = "lib",
		description = [[]],
		childs = {
			["splash_damage"] = {
				type = "function",
				description = [[]],
				args = "(splashDamageInfo: util.SplashDamageInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["is_table"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_date_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_faded_time_factor"] = {
				type = "function",
				description = [[]],
				args = "(cur: ,dur: ,fadeIn: )",
				returns = "()",
				valuetype = ""
			},
			["is_valid"] = {
				type = "function",
				description = [[]],
				args = "(o: object)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_scale_factor"] = {
				type = "function",
				description = [[]],
				args = "(val: ,min: )",
				returns = "()",
				valuetype = ""
			},
			["cubemap_to_equirectangular_texture"] = {
				type = "function",
				description = [[]],
				args = "(cubemap: prosper::Texture)",
				returns = "(object)",
				valuetype = "object"
			},
			["open_path_in_explorer"] = {
				type = "function",
				description = [[]],
				args = "(spath: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["get_pretty_bytes"] = {
				type = "function",
				description = [[]],
				args = "(bytes: uint32)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_pretty_time"] = {
				type = "function",
				description = [[]],
				args = "(t: )",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["units_to_metres"] = {
				type = "function",
				description = [[]],
				args = "(units: )",
				returns = "()",
				valuetype = ""
			},
			["world_to_local"] = {
				type = "function",
				description = [[]],
				args = "(vLocal: glm::vec,rLocal: glm::qua,v: glm::vec,r: glm::qua)",
				returns = "(void)",
				valuetype = "void"
			},
			["read_scene_file"] = {
				type = "function",
				description = [[]],
				args = "(fileName: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["metres_to_units"] = {
				type = "function",
				description = [[]],
				args = "(metres: )",
				returns = "()",
				valuetype = ""
			},
			["variable_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(varType: util::VarType)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["open_url_in_browser"] = {
				type = "function",
				description = [[]],
				args = "(url: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["get_addon_path"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_string_hash"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["generate_uuid_v4"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["register_class"] = {
				type = "function",
				description = [[]],
				args = "(pclassName: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["load_image"] = {
				type = "function",
				description = [[]],
				args = "(fileName: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["local_to_world"] = {
				type = "function",
				description = [[]],
				args = "(vLocal: glm::vec,rLocal: glm::qua,v: glm::vec,r: glm::qua)",
				returns = "(void)",
				valuetype = "void"
			},
			["fire_bullets"] = {
				type = "function",
				description = [[]],
				args = "(bulletInfo: game.BulletInfo)",
				returns = "(object)",
				valuetype = "object"
			},
			["get_pretty_duration"] = {
				type = "function",
				description = [[]],
				args = "(ms: uint32)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["remove"] = {
				type = "function",
				description = [[]],
				args = "(luabind::detail::nil_type)",
				returns = "(void)",
				valuetype = "void"
			},
			["fade_property"] = {
				type = "function",
				description = [[]],
				args = "(vProp: LGenericFloatPropertyWrapper,vDst: ,duration: )",
				returns = "(object)",
				valuetype = "object"
			},
			["round_string"] = {
				type = "function",
				description = [[]],
				args = "(value: )",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["get_type_name"] = {
				type = "function",
				description = [[]],
				args = "(o: object)",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["is_same_object"] = {
				type = "function",
				description = [[]],
				args = "(o0: object,o1: object)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["calc_screen_space_distance_to_world_space_position"] = {
				type = "function",
				description = [[]],
				args = "(point: glm::vec,vp: glm::mat,nearZ: ,farZ: )",
				returns = "()",
				valuetype = ""
			},
			["clamp_resolution_to_aspect_ratio"] = {
				type = "function",
				description = [[]],
				args = "(w: uint32,h: uint32,aspectRatio: )",
				returns = "(void)",
				valuetype = "void"
			},
			["create_muzzle_flash"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["get_class_value"] = {
				type = "function",
				description = [[]],
				args = "(oClass: object,key: std::basic_string)",
				returns = "(object)",
				valuetype = "object"
			},
			["is_valid_entity"] = {
				type = "function",
				description = [[]],
				args = "(o: object)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["capture_raytraced_screenshot"] = {
				type = "function",
				description = [[]],
				args = "(width: uint32,height: uint32)",
				returns = "(util.ParallelJob)",
				valuetype = "ParallelJob"
			},
			["get_image_format_file_extension"] = {
				type = "function",
				description = [[]],
				args = "(arg0: uimg::ImageFormat)",
				returns = "(string)",
				valuetype = "string"
			},
			["pack_zip_archive"] = {
				type = "function",
				description = [[]],
				args = "(pzipFileName: std::basic_string,t: table)",
				returns = "(void)",
				valuetype = "void"
			},
			["world_space_point_to_screen_space_uv"] = {
				type = "function",
				description = [[]],
				args = "(point: glm::vec,vp: glm::mat,nearZ: ,farZ: )",
				returns = "(void)",
				valuetype = "void"
			},
			["world_space_direction_to_screen_space"] = {
				type = "function",
				description = [[]],
				args = "(dir: glm::vec,vp: glm::mat)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["depth_to_distance"] = {
				type = "function",
				description = [[]],
				args = "(depth: ,nearZ: ,farZ: )",
				returns = "()",
				valuetype = ""
			},
			["shake_screen"] = {
				type = "function",
				description = [[]],
				args = "(amplitude: ,frequency: ,duration: ,fadeIn: ,fadeOut: )",
				returns = "(void)",
				valuetype = "void"
			},
			["create_giblet"] = {
				type = "function",
				description = [[]],
				args = "(gibletInfo: game.GibletCreateInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["create_explosion"] = {
				type = "function",
				description = [[]],
				args = "(splashDamageInfo: util.SplashDamageInfo)",
				returns = "(void)",
				valuetype = "void"
			},
			["calc_world_direction_from_2d_coordinates"] = {
				type = "function",
				description = [[]],
				args = "(forward: glm::vec,right: glm::vec,up: glm::vec,fov: ,nearZ: ,farZ: ,aspectRatio: ,uv: glm::vec)",
				returns = "(glm::vec)",
				valuetype = "vec"
			},
			["create_particle_tracer"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["save_image"] = {
				type = "function",
				description = [[]],
				args = "(img: prosper::IImage,fileName: std::basic_string,imgWriteInfo: util.TextureInfo)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_clipboard_string"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(std::basic_string)",
				valuetype = "basic_string"
			},
			["set_clipboard_string"] = {
				type = "function",
				description = [[]],
				args = "(str: std::basic_string)",
				returns = "(void)",
				valuetype = "void"
			},
			["Vector2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["FloatProperty"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericFloatPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericFloatPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericFloatPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LGenericIntPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericFloatPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericFloatPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericFloatPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericFloatPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Vector2iVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat2Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat2)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: TLMatrixPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Vector3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DirectoryChangeListener"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["Poll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["LISTENER_FLAG_WATCH_DIRECTORY_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_ABSOLUTE_PATH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_BIT_WATCH_SUB_DIRECTORIES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_START_DISABLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ParallelJobString"] = {
				type = "class",
				inherits = "util.ParallelJob",
				description = [[]],
				childs = {
					["GetResult"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["VectoriProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LStringPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector3iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector3iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector3iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector3iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Vector4iProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32,arg4: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LStringPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector4iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector4iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector4iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector4iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["StringProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LEulerAnglesPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Vector3iVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat2x3Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat2x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: TLMatrixPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["LongDoubleVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat4x3Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: TLMatrixPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat3x2Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat3x2)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: TLMatrixPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Vector4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["VectorProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LStringPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector3PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector3PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector3PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector3PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Version"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Version)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Version)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Version)",
						returns = "(void)",
						valuetype = "void"
					},
					["major"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["revision"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector4Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float,arg4: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LStringPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector4PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector4PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector4PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector4PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ColorVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["IntVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ShortVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: int16)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: int16)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: int16)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: int16)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Vector2iProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LStringPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector2iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector2iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector2iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector2iPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["QuaternionProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float,arg4: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LStringPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DataBlock"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsVector"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsVector4"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FindBlock"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,blockIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsString"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsColor"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetInt"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string,def: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBool"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string,def: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFloat"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string,def: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string,def: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVector2"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string,def: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVector"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string,def: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVector4"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string,def: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChildBlocks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(type: std::basic_string,key: std::basic_string,val: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(other: ds::Block)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetKeys"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsEmpty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddBlock"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsInt"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFloat"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBool"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "(val: std::basic_string,def: util.Color)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["FloatVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["EntityProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.Entity)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LEntityPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["CharVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BoolVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ColorProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector4)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LColorPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LVector4PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LColorPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LColorPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LColorPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BaseProperty"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["Mat4x3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["QuaternionVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["LongLongVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: int64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: int64)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: int64)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: int64)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat3x4Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat3x4)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: TLMatrixPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ImageBuffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChannelSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyGammaCorrection"] = {
						type = "method",
						description = [[]],
						args = "(gamma: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChannelCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPixelSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPixelCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPixelValueLDR"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,channel: uint32,value: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasAlphaChannel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(dst: util.ImageBuffer,xSrc: uint32,ySrc: uint32,xDst: uint32,yDst: uint32,w: uint32,h: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLDRFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsHDRFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPixelValue"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,channel: uint32,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFloatFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPixelValue"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,channel: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(color: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Convert"] = {
						type = "method",
						description = [[]],
						args = "(format: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToLDR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToHDR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearAlpha"] = {
						type = "method",
						description = [[]],
						args = "(a: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPixelIndex"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPixelOffset"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["FlipHorizontally"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FlipVertically"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Flip"] = {
						type = "method",
						description = [[]],
						args = "(flipH: bool,flipV: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SwapChannels"] = {
						type = "method",
						description = [[]],
						args = "(channel0: animation.Channel,channel1: animation.Channel)",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyToneMapping"] = {
						type = "method",
						description = [[]],
						args = "(toneMapping: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplyExposure"] = {
						type = "method",
						description = [[]],
						args = "(exposure: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPixelValueHDR"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,channel: uint32,value: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcLuminance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(w: uint32,h: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["FORMAT_RGBA16"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA_HDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA32"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA8"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA_LDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_RED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_GREEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_A"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_R"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_BLUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_B"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_G"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_ACES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_UNCHARTED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_GRAN_TURISMO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_GAMMA_CORRECTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_HEJIL_RICHARD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_REINHARD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB16"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB_HDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB32"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB8"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB_LDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ParallelJobImage"] = {
				type = "class",
				inherits = "util.ParallelJob",
				description = [[]],
				childs = {
					["GetResult"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Path"] = {
				type = "class",
				description = [[]],
				childs = {
					["MakeRelative"] = {
						type = "method",
						description = [[]],
						args = "(other: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToComponents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFileName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFront"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MoveUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetComponentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PopFront"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Canonicalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFile"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFileExtension"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveFileExtension"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsEmpty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PopBack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["CallbackHandler"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.CallbackHandler)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CallCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,o1: object,o2: object,o3: object,o4: object,o5: object,o6: object,o7: object,o8: object)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["IntProperty"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericIntPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericIntPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericIntPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LGenericFloatPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericIntPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericIntPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericIntPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: LGenericIntPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BoolProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LGenericIntPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["EulerAnglesVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["EulerAnglesProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LEulerAnglesPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LStringPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LEulerAnglesPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LEulerAnglesPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LEulerAnglesPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat2x3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Vector2Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: LStringPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector2PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector2PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector2PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: LVector2PropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat3Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat3)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: TLMatrixPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat4Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4)",
						returns = "(void)",
						valuetype = "void"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: TLMatrixPropertyWrapper)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DataStream"] = {
				type = "class",
				description = [[]],
				childs = {
					["ReadChar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteString"] = {
						type = "method",
						description = [[]],
						args = "(str: std::basic_string,bNullterminated: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadBool"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt64"] = {
						type = "method",
						description = [[]],
						args = "(t: int64)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVertex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt8"] = {
						type = "method",
						description = [[]],
						args = "(t: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt8"] = {
						type = "method",
						description = [[]],
						args = "(t: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat2x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt64"] = {
						type = "method",
						description = [[]],
						args = "(t: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVectori"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat3x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector2"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector2i"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt32"] = {
						type = "method",
						description = [[]],
						args = "(t: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt32"] = {
						type = "method",
						description = [[]],
						args = "(t: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat2"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteInt16"] = {
						type = "method",
						description = [[]],
						args = "(t: int16)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadLongDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteUInt16"] = {
						type = "method",
						description = [[]],
						args = "(t: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadUInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteChar"] = {
						type = "method",
						description = [[]],
						args = "(t: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteFloat"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteDouble"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat2x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVectori"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector4i"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadVector4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector4"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteAngles"] = {
						type = "method",
						description = [[]],
						args = "(t: math.EulerAngles)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat4"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector2i"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVector4i"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat3x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteVertex"] = {
						type = "method",
						description = [[]],
						args = "(t: game.Model.Vertex)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat4x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat4x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadMat4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteMat3"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Seek"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Tell"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadBinaryString"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToBinaryString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadString"] = {
						type = "method",
						description = [[]],
						args = "(len: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadStringUntil"] = {
						type = "method",
						description = [[]],
						args = "(pattern: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteBinary"] = {
						type = "method",
						description = [[]],
						args = "(dsOther: util.DataStream)",
						returns = "(void)",
						valuetype = "void"
					},
					["ReadBinary"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["WriteBool"] = {
						type = "method",
						description = [[]],
						args = "(t: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ParallelJob"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsThreadActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Cancel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Start"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStatus"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetResultMessage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetProgress"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Poll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Wait"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsComplete"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPending"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsCancelled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSuccessful"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["JOB_STATUS_PENDING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_INVALID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_CANCELLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_FAILED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_INITIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_SUCCESSFUL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Color"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(r: uint8,g: uint8,b: uint8,a: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetContrastColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(other: util.Color,factor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToVector4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToVector"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToHexColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToHexColorRGB"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ToHSVColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetComplementaryColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcPerceivedLuminance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["HSVColor"] = {
				type = "class",
				description = [[]],
				childs = {
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(hsv1: util::HSV,t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util::HSV)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToRGBColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["h"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["s"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["v"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Callback"] = {
				type = "class",
				description = [[]],
				childs = {
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Call"] = {
						type = "method",
						description = [[]],
						args = "(arg0: object,arg1: object,arg2: object,arg3: object,arg4: object,arg5: object,arg6: object,arg7: object,arg8: object,arg9: object,arg10: object,arg11: object,arg12: object,arg13: object,arg14: object,arg15: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ResultCode"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMessage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsError"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["StringVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["SplashDamageInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetCone"] = {
						type = "method",
						description = [[]],
						args = "(coneDirection: glm::vec,coneAngle: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["damageInfo"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["origin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["radius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector4iVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat2x4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DoubleVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: )",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat4x2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat3x4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat3x2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Mat2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64,value: glm::mat)",
						returns = "(void)",
						valuetype = "void"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint64)",
						returns = "(void)",
						valuetype = "void"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(size: uint64)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TextureInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetNormalMap"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["INPUT_FORMAT_R32_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_KEEP_INPUT_IMAGE_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_R16G16B16A16_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_R8G8B8A8_UINT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_R32G32B32A32_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP_SHARP_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP_SMOOTH_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP_1BIT_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_CONVERT_TO_NORMAL_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_GENERATE_MIPMAPS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_SRGB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WRAP_MODE_CLAMP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WRAP_MODE_REPEAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WRAP_MODE_MIRROR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MIPMAP_FILTER_KAISER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MIPMAP_FILTER_BOX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_HDR_COLOR_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC1A"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC3N"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC3_RGBM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC5"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC6"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC7"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_CTX1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT1A"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT1N"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT5"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT5N"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_GRADIENT_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_KEEP_INPUT_IMAGE_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_NORMAL_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_RGB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_RGBA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGBA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_R"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGB_A1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGBM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CONTAINER_FORMAT_DDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CONTAINER_FORMAT_KTX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["wrapMode"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["inputFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["outputFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipMapFilter"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["containerFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Texture"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetVkTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["class_info_data"] = {
		type = "class",
		description = [[]],
		childs = {
			["methods"] = {
				type = "value",
				description = [[]],
				valuetype = ""
			},
			["attributes"] = {
				type = "value",
				description = [[]],
				valuetype = ""
			},
			["name"] = {
				type = "value",
				description = [[]],
				valuetype = ""
			}
		}
	},
	["function_info"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_function_name"] = {
				type = "function",
				description = [[]],
				args = "(fn: luabind::argument)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_function_overloads"] = {
				type = "function",
				description = [[]],
				args = "(fn: luabind::argument)",
				returns = "(luabind::object)",
				valuetype = "object"
			}
		}
	},
	["pfm"] = {
		type = "lib",
		description = [[]],
		childs = {
			["impl"] = {
				type = "lib",
				description = [[]],
				childs = {
					["projects"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},

				}
			},
			["math"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["Version"] = {
				type = "class",
				description = [[]],
				childs = {
					["ToString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::basic_string)",
						valuetype = "basic_string"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(void)",
						valuetype = "void"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Version)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Version)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Version)",
						returns = "(void)",
						valuetype = "void"
					},
					["major"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["revision"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["sfm"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["shader"] = {
		type = "lib",
		description = [[]],
		childs = {
			["ShaderEntity"] = {
				type = "class",
				inherits = "shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindEntity"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: EntityHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindVertexAnimationOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoundEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordDrawMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: game.Model.Mesh.Sub)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindInstanceDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(descSet: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["BindVertexAnimationOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["GUITextured"] = {
				type = "class",
				inherits = "shader.Graphics shader.Shader",
				description = [[]],
				childs = {

				}
			},
			["BaseGraphics"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["GameWorld"] = {
				type = "class",
				inherits = "shader.ShaderEntity shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["SetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(depthBias: glm::vec)",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["Info"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BasePipelineCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AttachDescriptorSetInfo"] = {
						type = "method",
						description = [[]],
						args = "(descSetInfo: pragma::LuaDescriptorSetInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["AttachPushConstantRange"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32,size: uint32,shaderStages: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["SceneLit3D"] = {
				type = "class",
				inherits = "shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindLights"] = {
						type = "method",
						description = [[]],
						args = "(dsLights: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindScene"] = {
						type = "method",
						description = [[]],
						args = "(scene: CSceneComponentHandleWrapper,renderer: pragma::CRasterizationRendererComponent,bView: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ComputePipelineCreateInfo"] = {
				type = "class",
				inherits = "shader.BasePipelineCreateInfo",
				description = [[]],
				childs = {
					["AddSpecializationConstant"] = {
						type = "method",
						description = [[]],
						args = "(constantId: uint32,ds: util.DataStream)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Scene3D"] = {
				type = "class",
				inherits = "shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindSceneCamera"] = {
						type = "method",
						description = [[]],
						args = "(scene: CSceneComponentHandleWrapper,renderer: pragma::CRasterizationRendererComponent,bView: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindRenderSettings"] = {
						type = "method",
						description = [[]],
						args = "(descSet: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["RENDER_PASS_BLOOM_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_COLOR_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_DEPTH_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseParticle2D"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PUSH_CONSTANTS_SIZE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PUSH_CONSTANTS_USER_DATA_OFFSET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TexturedLit3D"] = {
				type = "class",
				inherits = "shader.GameWorld shader.ShaderEntity shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mat: Material)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindClipPlane"] = {
						type = "method",
						description = [[]],
						args = "(clipPlane: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["PUSH_CONSTANTS_SIZE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PUSH_CONSTANTS_USER_DATA_OFFSET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseModule"] = {
				type = "class",
				description = [[]],
				childs = {
					["InitializePipeline"] = {
						type = "method",
						description = [[]],
						args = "(arg1: shader.BasePipelineCreateInfo,arg2: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnInitialized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnPipelinesInitialized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShaderSource"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32,fpath: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnPipelineInitialized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPipelineCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineCount: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCurrentCommandBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BasePbr"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.TexturedLit3D shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["BindMaterialParameters"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["InitializeGfxPipelineVertexAttributes"] = {
						type = "method",
						description = [[]],
						args = "(pipelineIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializeGfxPipelinePushConstantRanges"] = {
						type = "method",
						description = [[]],
						args = "(pipelineIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnBindMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializeGfxPipelineDescriptorSets"] = {
						type = "method",
						description = [[]],
						args = "(pipelineIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnBindEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["OnBindScene"] = {
						type = "method",
						description = [[]],
						args = "(bView: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnBeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(clipPlane: glm::vec,pipelineIdx: uint32,recordFlags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnEndDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ComposeRMA"] = {
				type = "class",
				inherits = "shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["ComposeRMA"] = {
						type = "method",
						description = [[]],
						args = "(roughnessMap: prosper::Texture,metalnessMap: prosper::Texture,aoMap: prosper::Texture,flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_USE_SPECULAR_WORKFLOW_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["VertexBinding"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["stride"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["inputRate"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Graphics"] = {
				type = "class",
				inherits = "shader.Shader",
				description = [[]],
				childs = {
					["RecordBeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: prosper::ICommandBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordEndDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(indexBuffer: prosper::IBuffer,indexType: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderPass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(buffer: prosper::IBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordDrawIndexed"] = {
						type = "method",
						description = [[]],
						args = "(indexCount: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindVertexBuffers"] = {
						type = "method",
						description = [[]],
						args = "(buffers: object)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BaseGraphicsModule"] = {
				type = "class",
				inherits = "shader.BaseModule",
				description = [[]],
				childs = {

				}
			},
			["VertexAttribute"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["location"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["format"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["offset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseCompute"] = {
				type = "class",
				inherits = "shader.BaseComputeModule shader.Compute shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BaseGUITextured"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.GUITextured shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BasePostProcessing"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["BaseImageProcessing"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DESCRIPTOR_SET_TEXTURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DESCRIPTOR_SET_TEXTURE_BINDING_TEXTURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseTexturedLit3D"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.TexturedLit3D shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["BindMaterialParameters"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["InitializeGfxPipelineVertexAttributes"] = {
						type = "method",
						description = [[]],
						args = "(pipelineIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializeGfxPipelinePushConstantRanges"] = {
						type = "method",
						description = [[]],
						args = "(pipelineIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnBindMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InitializeGfxPipelineDescriptorSets"] = {
						type = "method",
						description = [[]],
						args = "(pipelineIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnBindEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["OnBindScene"] = {
						type = "method",
						description = [[]],
						args = "(bView: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnBeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(clipPlane: glm::vec,pipelineIdx: uint32,recordFlags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnEndDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DescriptorSetBinding"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["bindingIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["descriptorArraySize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["type"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shaderStages"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Shader"] = {
				type = "class",
				description = [[]],
				childs = {
					["CreateDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(setIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPipelineInfo"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32,pipelineIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsGraphicsShader"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetGlslSourceCode"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32,pipelineIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsComputeShader"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindDescriptorSets"] = {
						type = "method",
						description = [[]],
						args = "(descSets: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSourceFilePath"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIdentifier"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPipelineBindPoint"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSourceFilePaths"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBindDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(ds: prosper::IDescriptorSetGroup)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordPushConstants"] = {
						type = "method",
						description = [[]],
						args = "(ds: util.DataStream)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEntrypointName"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Glow"] = {
				type = "class",
				inherits = "shader.TexturedLit3D shader.ShaderEntity shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {

				}
			},
			["BaseComputeModule"] = {
				type = "class",
				inherits = "shader.BaseModule",
				description = [[]],
				childs = {

				}
			},
			["DescriptorSetInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: luabind::object)",
						returns = "(void)",
						valuetype = "void"
					},
					["setIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Compute"] = {
				type = "class",
				inherits = "shader.Shader",
				description = [[]],
				childs = {
					["RecordDispatch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordBeginCompute"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: prosper::ICommandBuffer)",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordEndCompute"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RecordCompute"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["GraphicsPipelineCreateInfo"] = {
				type = "class",
				inherits = "shader.BasePipelineCreateInfo",
				description = [[]],
				childs = {
					["SetDepthBiasEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexAttributeCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDepthBoundsState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStencilTestEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthBiasConstantFactor"] = {
						type = "method",
						description = [[]],
						args = "(depthBiasConstantFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthBiasProperties"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool,depthBiasConstantFactor: ,depthBiasClamp: ,depthBiasSlopeFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCommonAlphaBlendProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStencilTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(updateFrontFaceState: bool,stencilFailOp: uint32,stencilPassOp: uint32,stencilDepthFailOp: uint32,stencilCompareOp: uint32,stencilCompareMask: uint32,stencilWriteMask: uint32,stencilReference: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthBiasClamp"] = {
						type = "method",
						description = [[]],
						args = "(depthBiasClamp: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthBiasSlopeFactor"] = {
						type = "method",
						description = [[]],
						args = "(depthBiasSlopeFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRasterizationProperties"] = {
						type = "method",
						description = [[]],
						args = "(polygonMode: uint32,cullMode: uint32,frontFace: uint32,lineWidth: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDepthClamp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthBoundsTestEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDepthBiasState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthBoundsTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool,minDepthBounds: ,maxDepthBounds: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(minDepthBounds: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFrontFace"] = {
						type = "method",
						description = [[]],
						args = "(frontFace: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDepthBiasSlopeFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(maxDepthBounds: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthClampEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCullMode"] = {
						type = "method",
						description = [[]],
						args = "(cullMode: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool,compareOp: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetColorBlendAttachmentProperties"] = {
						type = "method",
						description = [[]],
						args = "(attId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthTestEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLogicOpState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDepthWritesEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDepthTestState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLogicOpEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSampleMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDynamicStates"] = {
						type = "method",
						description = [[]],
						args = "(states: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDynamicViewportsCount"] = {
						type = "method",
						description = [[]],
						args = "(numDynamicViewports: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDynamicScissorBoxesCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDynamicStateEnabled"] = {
						type = "method",
						description = [[]],
						args = "(state: uint32,bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDepthBiasConstantFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLogicOpProperties"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool,logicOp: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMultisamplingProperties"] = {
						type = "method",
						description = [[]],
						args = "(sampleCount: uint32,sampleShading: ,sampleMask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPrimitiveRestartEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSampleCount"] = {
						type = "method",
						description = [[]],
						args = "(sampleCount: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRasterizerDiscardEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSampleMask"] = {
						type = "method",
						description = [[]],
						args = "(sampleMask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinSampleShading"] = {
						type = "method",
						description = [[]],
						args = "(minSampleShading: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMinDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBlendingProperties"] = {
						type = "method",
						description = [[]],
						args = "(blendingProperties: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetColorBlendAttachmentProperties"] = {
						type = "method",
						description = [[]],
						args = "(attId: uint32,blendingEnabled: bool,blendOpColor: uint32,blendOpAlpha: uint32,srcColorBlendFactor: uint32,dstColorBlendFactor: uint32,srcAlphaBlendFactor: uint32,dstAlphaBlendFactor: uint32,channelWriteMask: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSampleShadingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSampleMaskEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDynamicScissorBoxesCount"] = {
						type = "method",
						description = [[]],
						args = "(numDynamicScissorBoxes: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPrimitiveTopology"] = {
						type = "method",
						description = [[]],
						args = "(primitiveTopology: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPolygonMode"] = {
						type = "method",
						description = [[]],
						args = "(polygonMode: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewportCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(lineWidth: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScissorBoxProperties"] = {
						type = "method",
						description = [[]],
						args = "(iScissorBox: uint32,x: int32,y: int32,w: uint32,h: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetViewportProperties"] = {
						type = "method",
						description = [[]],
						args = "(iViewport: uint32,originX: ,originY: ,w: ,h: ,minDepth: ,maxDepth: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AreDepthWritesEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlendingProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDepthBiasClamp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMultisamplingProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDynamicStates"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDynamicViewportsCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScissorCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSampleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAlphaToOneEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMinSampleShading"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScissorBoxesCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewportsCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPrimitiveTopology"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPushConstantRanges"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRasterizationProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPolygonMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCullMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrontFace"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSampleShadingState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScissorBoxProperties"] = {
						type = "method",
						description = [[]],
						args = "(iScissor: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddSpecializationConstant"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32,constantId: uint32,ds: util.DataStream)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStencilTestProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubpassId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexAttributeProperties"] = {
						type = "method",
						description = [[]],
						args = "(iVerexInputAttribute: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetViewportProperties"] = {
						type = "method",
						description = [[]],
						args = "(iViewport: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAlphaToCoverageEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDepthClampEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPrimitiveRestartEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsRasterizerDiscardEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSampleMaskEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AttachVertexAttribute"] = {
						type = "method",
						description = [[]],
						args = "(binding: pragma::LuaVertexBinding,attributes: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlphaToCoverageEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlphaToOneEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["gui"] = {
		type = "lib",
		description = [[]],
		childs = {
			["ProgressBar"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetProgress"] = {
						type = "method",
						description = [[]],
						args = "(progress: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOptions"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddOption"] = {
						type = "method",
						description = [[]],
						args = "(option: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPostFix"] = {
						type = "method",
						description = [[]],
						args = "(postfix: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(min: ,max: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetProgress"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(v: )",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Table"] = {
				type = "class",
				inherits = "gui.Container gui.Element",
				description = [[]],
				childs = {
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRowHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRowHeight"] = {
						type = "method",
						description = [[]],
						args = "(height: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSelectableMode"] = {
						type = "method",
						description = [[]],
						args = "(mode: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddRow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSelectableMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetColumnWidth"] = {
						type = "method",
						description = [[]],
						args = "(colId: uint32,width: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSortable"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddHeaderRow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSortable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScrollable"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsScrollable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRow"] = {
						type = "method",
						description = [[]],
						args = "(rowId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSelectedRows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveRow"] = {
						type = "method",
						description = [[]],
						args = "(rowIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["MoveRow"] = {
						type = "method",
						description = [[]],
						args = "(rowA: WITableRowHandle,rowB: WITableRowHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SelectRow"] = {
						type = "method",
						description = [[]],
						args = "(row: WITableRowHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRowCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFirstSelectedRow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SELECTABLE_MODE_MULTI"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTABLE_MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTABLE_MODE_SINGLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["Cell"] = {
						type = "class",
						inherits = "gui.Container gui.Element",
						description = [[]],
						childs = {
							["SetColSpan"] = {
								type = "method",
								description = [[]],
								args = "(colSpan: int32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetColSpan"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFirstElement"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},
					["Row"] = {
						type = "class",
						inherits = "gui.Container gui.Element",
						description = [[]],
						childs = {
							["GetValue"] = {
								type = "method",
								description = [[]],
								args = "(column: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["IsSelected"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["InsertElement"] = {
								type = "method",
								description = [[]],
								args = "(column: uint32,hElement: WIHandle)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetCellCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetCell"] = {
								type = "method",
								description = [[]],
								args = "(cellId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetRowIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetCellWidth"] = {
								type = "method",
								description = [[]],
								args = "(column: uint32,width: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Select"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Deselect"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetValue"] = {
								type = "method",
								description = [[]],
								args = "(column: uint32,value: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},

				}
			},
			["impl"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["Element"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsVisible"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVisible"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChild"] = {
						type = "method",
						description = [[]],
						args = "(className: std::basic_string,idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMouseInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScrollInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetZPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CenterToParentX"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsUpdateScheduled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasFocus"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlpha"] = {
						type = "method",
						description = [[]],
						args = "(alpha: )",
						returns = "(void)",
						valuetype = "void"
					},
					["FadeOut"] = {
						type = "method",
						description = [[]],
						args = "(tFadeOut: ,remove: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRootElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["SetZPos"] = {
						type = "method",
						description = [[]],
						args = "(zpos: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetKeyboardInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScrollInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFirstChild"] = {
						type = "method",
						description = [[]],
						args = "(className: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsPosInBounds"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRootWindow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["RequestFocus"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPosProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDescendant"] = {
						type = "method",
						description = [[]],
						args = "(hOther: WIHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["KillFocus"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetKeyboardInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["TrapFocus"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFocusTrapped"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetX"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsHidden"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAlpha"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCursorPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsParentVisible"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAutoSizeToContents"] = {
						type = "method",
						description = [[]],
						args = "(x: bool,y: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMouseInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Draw"] = {
						type = "method",
						description = [[]],
						args = "(drawInfo: gui.Button.DrawInfo)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCursorMovementCheckEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCursorMovementCheckEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAbsolutePos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAbsolutePos"] = {
						type = "method",
						description = [[]],
						args = "(x: ,y: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFocusProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVisibilityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFadingIn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["DisableThinking"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Think"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMouseInBoundsProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InjectMouseClick"] = {
						type = "method",
						description = [[]],
						args = "(mousePos: glm::vec,button: int32)",
						returns = "(util::EventReply)",
						valuetype = "EventReply"
					},
					["SetColorRGB"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSize"] = {
						type = "method",
						description = [[]],
						args = "(x: ,y: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Wrap"] = {
						type = "method",
						description = [[]],
						args = "(hWrapper: WIHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["CenterToParent"] = {
						type = "method",
						description = [[]],
						args = "(applyAnchor: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsCursorInBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetWidth"] = {
						type = "method",
						description = [[]],
						args = "(w: )",
						returns = "(void)",
						valuetype = "void"
					},
					["InjectMouseInput"] = {
						type = "method",
						description = [[]],
						args = "(mousePos: glm::vec,button: int32,action: int32)",
						returns = "(util::EventReply)",
						valuetype = "EventReply"
					},
					["GetY"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetX"] = {
						type = "method",
						description = [[]],
						args = "(x: )",
						returns = "(void)",
						valuetype = "void"
					},
					["FindChildByName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetY"] = {
						type = "method",
						description = [[]],
						args = "(y: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(x: ,y: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SizeToContents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FadeIn"] = {
						type = "method",
						description = [[]],
						args = "(tFadeIn: ,alphaTarget: )",
						returns = "(void)",
						valuetype = "void"
					},
					["InjectCharInput"] = {
						type = "method",
						description = [[]],
						args = "(c: std::basic_string)",
						returns = "(util::EventReply)",
						valuetype = "EventReply"
					},
					["IsClippingEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CenterToParentY"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFading"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStyleClasses"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["InjectMouseMoveInput"] = {
						type = "method",
						description = [[]],
						args = "(mousePos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["InjectKeyboardInput"] = {
						type = "method",
						description = [[]],
						args = "(key: int32,action: int32)",
						returns = "(util::EventReply)",
						valuetype = "EventReply"
					},
					["SetSkin"] = {
						type = "method",
						description = [[]],
						args = "(skin: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["InjectScrollInput"] = {
						type = "method",
						description = [[]],
						args = "(mousePos: glm::vec,offset: glm::vec)",
						returns = "(util::EventReply)",
						valuetype = "EventReply"
					},
					["IsAncestor"] = {
						type = "method",
						description = [[]],
						args = "(hOther: WIHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["FindChildrenByName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAutoAlignToParent"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAutoAlignToParentX"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAutoAlignToParentY"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ScheduleUpdate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ResetSkin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(className: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCursor"] = {
						type = "method",
						description = [[]],
						args = "(cursor: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCursor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveElementOnRemoval"] = {
						type = "method",
						description = [[]],
						args = "(hOther: WIHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTooltip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScaleProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTooltip"] = {
						type = "method",
						description = [[]],
						args = "(tooltip: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasTooltip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLeft"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBottom"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEndPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetClippingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlwaysUpdate"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(x: ,y: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBounds"] = {
						type = "method",
						description = [[]],
						args = "(start: glm::vec,end: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBackgroundElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttachmentPosProperty"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBackgroundElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnchorRight"] = {
						type = "method",
						description = [[]],
						args = "(f: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ApplySkin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InjectKeyPress"] = {
						type = "method",
						description = [[]],
						args = "(key: int32)",
						returns = "(util::EventReply)",
						valuetype = "EventReply"
					},
					["SetLeft"] = {
						type = "method",
						description = [[]],
						args = "(pos: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["HasAnchor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRight"] = {
						type = "method",
						description = [[]],
						args = "(pos: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTop"] = {
						type = "method",
						description = [[]],
						args = "(pos: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnchor"] = {
						type = "method",
						description = [[]],
						args = "(left: ,top: ,right: ,bottom: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBottom"] = {
						type = "method",
						description = [[]],
						args = "(pos: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["EnableThinking"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetThinkingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAttachmentPos"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,position: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAttachmentPos"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAbsoluteAttachmentPos"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDescendantOf"] = {
						type = "method",
						description = [[]],
						args = "(hOther: WIHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnchorLeft"] = {
						type = "method",
						description = [[]],
						args = "(f: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnchorTop"] = {
						type = "method",
						description = [[]],
						args = "(f: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnchorBottom"] = {
						type = "method",
						description = [[]],
						args = "(f: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAnchor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRemoveOnParentRemoval"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCenterX"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCenterY"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHalfHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHalfWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHalfSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCenterPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveStyleClass"] = {
						type = "method",
						description = [[]],
						args = "(className: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearStyleClasses"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FindChildIndex"] = {
						type = "method",
						description = [[]],
						args = "(hChild: WIHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearAnchor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["CallCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,o1: object,o2: object,o3: object,o4: object,o5: object,o6: object,o7: object,o8: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParent"] = {
						type = "method",
						description = [[]],
						args = "(hParent: WIHandle,index: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHeight"] = {
						type = "method",
						description = [[]],
						args = "(h: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsFadingOut"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsAncestorOf"] = {
						type = "method",
						description = [[]],
						args = "(hOther: WIHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddStyleClass"] = {
						type = "method",
						description = [[]],
						args = "(styleClass: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetClass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: WIHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveSafely"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddAttachment"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string,position: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["FindDescendantByName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["FindDescendantsByName"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Button"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(text: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["DrawInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetPostTransform"] = {
								type = "method",
								description = [[]],
								args = "(t: glm::mat)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetColor"] = {
								type = "method",
								description = [[]],
								args = "(color: util.Color)",
								returns = "(void)",
								valuetype = "void"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "(arg1: class std::shared_ptr)",
								returns = "(void)",
								valuetype = "void"
							},
							["commandBuffer"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["size"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["offset"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["transform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["useScissor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["TexturedShape"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetVertexUVCoord"] = {
						type = "method",
						description = [[]],
						args = "(vertID: uint32,uv: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["InvertVertexUVCoordinates"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(AlphaMode)",
						valuetype = "AlphaMode"
					},
					["SetShader"] = {
						type = "method",
						description = [[]],
						args = "(shader: wgui::ShaderTextured)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetChannelSwizzle"] = {
						type = "method",
						description = [[]],
						args = "(src: uint32,dst: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAlphaCutoff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetTexture"] = {
						type = "method",
						description = [[]],
						args = "(tex: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(alphaMode: AlphaMode)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAlphaCutoff"] = {
						type = "method",
						description = [[]],
						args = "(cutoff: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChannelSwizzle"] = {
						type = "method",
						description = [[]],
						args = "(channel: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mat: Material)",
						returns = "(void)",
						valuetype = "void"
					},
					["SizeToTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CHANNEL_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_BLUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_RED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_GREEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SilkIcon"] = {
				type = "class",
				inherits = "gui.Icon gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetIcon"] = {
						type = "method",
						description = [[]],
						args = "(icon: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Frame"] = {
				type = "class",
				inherits = "gui.Transformable gui.Element",
				description = [[]],
				childs = {
					["SetCloseButtonEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTitle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTitle"] = {
						type = "method",
						description = [[]],
						args = "(title: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TextEntry"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(text: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTextElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsNumeric"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsEditable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEditable"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxLength"] = {
						type = "method",
						description = [[]],
						args = "(len: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSelectable"] = {
						type = "method",
						description = [[]],
						args = "(bSelectable: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsMultiLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMultiLine"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsSelectable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCaretElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Checkbox"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["Toggle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsChecked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetChecked"] = {
						type = "method",
						description = [[]],
						args = "(bChecked: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["RoundedRect"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["GetRoundness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundTopRight"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTopRightRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundness"] = {
						type = "method",
						description = [[]],
						args = "(roundness: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "(cornerSize: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTopLeftRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundBottomLeft"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundTopLeft"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundBottomRight"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBottomLeftRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBottomRightRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["OutlinedRect"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetOutlineWidth"] = {
						type = "method",
						description = [[]],
						args = "(w: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOutlineWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DebugDepthTexture"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "(contrastFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTexture"] = {
						type = "method",
						description = [[]],
						args = "(tex: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Base"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["OnInitialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CharCallback"] = {
						type = "method",
						description = [[]],
						args = "(t: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnRemove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnThink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnInitialThink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MouseCallback"] = {
						type = "method",
						description = [[]],
						args = "(int: int32,int: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["KeyboardCallback"] = {
						type = "method",
						description = [[]],
						args = "(int: int32,int: int32,int: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ScrollCallback"] = {
						type = "method",
						description = [[]],
						args = "(double: )",
						returns = "(void)",
						valuetype = "void"
					},
					["OnUpdate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnVisibilityChanged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnSizeChanged"] = {
						type = "method",
						description = [[]],
						args = "(int: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnColorChanged"] = {
						type = "method",
						description = [[]],
						args = "(float: ,float: ,float: )",
						returns = "(void)",
						valuetype = "void"
					},
					["OnAlphaChanged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnCursorEntered"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnCursorExited"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnFocusGained"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OnDraw"] = {
						type = "method",
						description = [[]],
						args = "(matDraw: glm::mat,scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["OnFocusKilled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Container"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetPaddingBottom"] = {
						type = "method",
						description = [[]],
						args = "(bottom: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPaddingLeft"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPaddingBottom"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPaddingTop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPaddingRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetPadding"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPaddingLeft"] = {
						type = "method",
						description = [[]],
						args = "(left: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPaddingRight"] = {
						type = "method",
						description = [[]],
						args = "(right: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPaddingTop"] = {
						type = "method",
						description = [[]],
						args = "(top: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetPadding"] = {
						type = "method",
						description = [[]],
						args = "(padding: int32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DebugSSAO"] = {
				type = "class",
				inherits = "gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetUseBlurredSSAOImage"] = {
						type = "method",
						description = [[]],
						args = "(useBlurredImage: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Text"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetLine"] = {
						type = "method",
						description = [[]],
						args = "(lineIndex: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["PopFrontLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["PopBackLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveText"] = {
						type = "method",
						description = [[]],
						args = "(lineIndex: uint32,offset: uint32,len: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveLine"] = {
						type = "method",
						description = [[]],
						args = "(lineIndex: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["InsertText"] = {
						type = "method",
						description = [[]],
						args = "(lineIndex: uint32,text: std::basic_string,lineIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AppendText"] = {
						type = "method",
						description = [[]],
						args = "(text: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["MoveText"] = {
						type = "method",
						description = [[]],
						args = "(lineIdx: uint32,startOffset: uint32,len: uint32,targetLineIdx: uint32,targetCharOffset: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTagsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(tagsEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["AppendLine"] = {
						type = "method",
						description = [[]],
						args = "(line: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["Substr"] = {
						type = "method",
						description = [[]],
						args = "(startOffset: uint32,len: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShadowXOffset"] = {
						type = "method",
						description = [[]],
						args = "(x: )",
						returns = "(void)",
						valuetype = "void"
					},
					["EnableShadow"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShadowBlurSize"] = {
						type = "method",
						description = [[]],
						args = "(blurSize: )",
						returns = "(void)",
						valuetype = "void"
					},
					["AreTagsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTagArgument"] = {
						type = "method",
						description = [[]],
						args = "(label: std::basic_string,argIdx: uint32,o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShadowColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTextLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLineCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAutoBreakMode"] = {
						type = "method",
						description = [[]],
						args = "(autoBreakMode: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShadowBlurSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShadowAlpha"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShadowAlpha"] = {
						type = "method",
						description = [[]],
						args = "(alpha: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShadowYOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShadowXOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFont"] = {
						type = "method",
						description = [[]],
						args = "(font: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShadowOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShadowColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShadowYOffset"] = {
						type = "method",
						description = [[]],
						args = "(y: )",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShadowOffset"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsShadowEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(text: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["AUTO_BREAK_ANY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AUTO_BREAK_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AUTO_BREAK_WHITESPACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Console"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(text: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxLogLineCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxLogLineCount"] = {
						type = "method",
						description = [[]],
						args = "(maxLogLineCount: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AppendText"] = {
						type = "method",
						description = [[]],
						args = "(text: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTextLogElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCommandLineEntryElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrame"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ScrollContainer"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetAutoStickToBottom"] = {
						type = "method",
						description = [[]],
						args = "(stick: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScrollAmount"] = {
						type = "method",
						description = [[]],
						args = "(amX: int32,amY: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ShouldAutoStickToBottom"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsContentsWidthFixed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetContentsWidthFixed"] = {
						type = "method",
						description = [[]],
						args = "(fixed: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVerticalScrollBar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScrollAmountY"] = {
						type = "method",
						description = [[]],
						args = "(am: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScrollAmountX"] = {
						type = "method",
						description = [[]],
						args = "(am: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetHorizontalScrollBar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetContentsHeightFixed"] = {
						type = "method",
						description = [[]],
						args = "(fixed: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsContentsHeightFixed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["TreeList"] = {
				type = "class",
				inherits = "gui.Table gui.Element",
				description = [[]],
				childs = {
					["GetRootItem"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CollapseAll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ExpandAll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddItem"] = {
						type = "method",
						description = [[]],
						args = "(text: std::basic_string,oPopulate: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Element"] = {
						type = "class",
						inherits = "gui.Table.Row gui.Element",
						description = [[]],
						childs = {
							["AddItem"] = {
								type = "method",
								description = [[]],
								args = "(text: std::basic_string,oPopulate: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["Expand"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetItems"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Collapse"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},

				}
			},
			["DebugShadowMap"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "(contrastFactor: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetShadowMapSize"] = {
						type = "method",
						description = [[]],
						args = "(w: uint32,h: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLightSource"] = {
						type = "method",
						description = [[]],
						args = "(hLight: CLightComponentHandleWrapper)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Transformable"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetDraggable"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBeingDragged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMinHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetResizeRatioLocked"] = {
						type = "method",
						description = [[]],
						args = "(bResizeRatioLocked: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMinSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxWidth"] = {
						type = "method",
						description = [[]],
						args = "(width: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxHeight"] = {
						type = "method",
						description = [[]],
						args = "(height: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDragArea"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetDragBounds"] = {
						type = "method",
						description = [[]],
						args = "(min: glm::vec,max: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetResizable"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxSize"] = {
						type = "method",
						description = [[]],
						args = "(size: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBeingResized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDragBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsResizeRatioLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddSnapTarget"] = {
						type = "method",
						description = [[]],
						args = "(hSnapTarget: WISnapAreaHandle)",
						returns = "(void)",
						valuetype = "void"
					},
					["Close"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsResizable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMinWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinSize"] = {
						type = "method",
						description = [[]],
						args = "(size: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinHeight"] = {
						type = "method",
						description = [[]],
						args = "(height: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinWidth"] = {
						type = "method",
						description = [[]],
						args = "(width: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsDraggable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Line"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetStartPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStartPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEndPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetStartColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStartPosProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEndColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetStartColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEndColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEndPosProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(w: int32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["ScrollBar"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetScrollAmount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddScrollOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetScrollOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsHorizontal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScrollOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetScrollAmount"] = {
						type = "method",
						description = [[]],
						args = "(am: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetUp"] = {
						type = "method",
						description = [[]],
						args = "(numElementsListed: int32,numElementsTotal: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsVertical"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetHorizontal"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Icon"] = {
				type = "class",
				inherits = "gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetClipping"] = {
						type = "method",
						description = [[]],
						args = "(xStart: uint32,yStart: uint32,width: uint32,height: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Arrow"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetDirection"] = {
						type = "method",
						description = [[]],
						args = "(dir: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["DIRECTION_RIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DIRECTION_DOWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DIRECTION_LEFT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DIRECTION_UP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Shape"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["ClearVertices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["InvertVertexPositions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVertexPos"] = {
						type = "method",
						description = [[]],
						args = "(vertID: uint32,v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddVertex"] = {
						type = "method",
						description = [[]],
						args = "(v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["SnapArea"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetTriggerArea"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["Slider"] = {
				type = "class",
				inherits = "gui.ProgressBar gui.Element",
				description = [[]],
				childs = {
					["IsBeingDragged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["CommandLineEntry"] = {
				type = "class",
				inherits = "gui.TextEntry gui.Element",
				description = [[]],
				childs = {
					["SetAutoCompleteEntryLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAutoCompleteEntryLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["RoundedTexturedRect"] = {
				type = "class",
				inherits = "gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["GetRoundness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundTopRight"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTopRightRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundness"] = {
						type = "method",
						description = [[]],
						args = "(roundness: char)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "(cornerSize: )",
						returns = "(void)",
						valuetype = "void"
					},
					["IsTopLeftRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundBottomLeft"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundTopLeft"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetRoundBottomRight"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBottomLeftRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsBottomRightRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["DropDownMenu"] = {
				type = "class",
				inherits = "gui.TextEntry gui.Element",
				description = [[]],
				childs = {
					["AddOption"] = {
						type = "method",
						description = [[]],
						args = "(option: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOptionText"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,text: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SelectOption"] = {
						type = "method",
						description = [[]],
						args = "(option: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearOptions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SelectOptionByText"] = {
						type = "method",
						description = [[]],
						args = "(text: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOptionText"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOptionValue"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOptionValue"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,val: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOptionCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OpenMenu"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["HasOption"] = {
						type = "method",
						description = [[]],
						args = "(value: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["CloseMenu"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ScrollToOption"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,center: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["ToggleMenu"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOptionElement"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["IsMenuOpen"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSelectedOption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearSelectedOption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FindOptionSelectedByCursor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetListItemCount"] = {
						type = "method",
						description = [[]],
						args = "(n: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["GridPanel"] = {
				type = "class",
				inherits = "gui.Table gui.Element",
				description = [[]],
				childs = {
					["GetColumnCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddItem"] = {
						type = "method",
						description = [[]],
						args = "(hEl: WIHandle,row: uint32,col: uint32)",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["NumericTextEntry"] = {
				type = "class",
				inherits = "gui.TextEntry gui.Element",
				description = [[]],
				childs = {
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(min: int32,max: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMaxValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMinValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMinValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMaxValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},

		}
	},
	["vrp"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["Model"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Mesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetTriangleVertexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSubMeshes"] = {
						type = "method",
						description = [[]],
						args = "(tSubMeshes: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTriangleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(translation: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddSubMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: game.Model.Mesh.Sub)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCenter"] = {
						type = "method",
						description = [[]],
						args = "(center: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearSubMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveSubMesh"] = {
						type = "method",
						description = [[]],
						args = "(i: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubMeshCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSubMesh"] = {
						type = "method",
						description = [[]],
						args = "(index: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetReferenceId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Centralize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(rotation: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: ModelMesh)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Sub"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetUVSetNames"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["AddTriangle"] = {
								type = "method",
								description = [[]],
								args = "(a: uint32,b: uint32,c: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertices"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTriangles"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ClipAgainstPlane"] = {
								type = "method",
								description = [[]],
								args = "(n: glm::vec,d: )",
								returns = "(void)",
								valuetype = "void"
							},
							["Transform"] = {
								type = "method",
								description = [[]],
								args = "(pose: phys.ScaledTransform)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertexAlpha"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,alpha: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetSkinTextureIndex"] = {
								type = "method",
								description = [[]],
								args = "(texture: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Update"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(rotation: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AddPoint"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["AddVertex"] = {
								type = "method",
								description = [[]],
								args = "(v: game.Model.Vertex)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertexNormal"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,normal: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertexUV"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,uv: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearExtendedVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearVertices"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearTriangles"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "(n: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["ReserveVertices"] = {
								type = "method",
								description = [[]],
								args = "(numVerts: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertexPosition"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,pos: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexPosition"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexNormal"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetPose"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetPose"] = {
								type = "method",
								description = [[]],
								args = "(pose: phys.ScaledTransform)",
								returns = "(void)",
								valuetype = "void"
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(1: game.Model.Mesh.Sub)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSkinTextureIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["FlipTriangleWindingOrder"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetIndexCount"] = {
								type = "method",
								description = [[]],
								args = "(n: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTriangleVertexCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ReserveTriangles"] = {
								type = "method",
								description = [[]],
								args = "(numTris: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTriangleCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AddUVSet"] = {
								type = "method",
								description = [[]],
								args = "(uvSetName: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetUVs"] = {
								type = "method",
								description = [[]],
								args = "(uvSetName: std::basic_string)",
								returns = "(object)",
								valuetype = "object"
							},
							["GetNormals"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertexWeight"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,weight: game.Model.VertexWeight)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetReferenceId"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBounds"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetAlphaBuffer"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertex"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexUV"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexAlpha"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexBuffer"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexWeight"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Optimize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GenerateNormals"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ReserveVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "(numVerts: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["NormalizeUVCoordinates"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ApplyUVMapping"] = {
								type = "method",
								description = [[]],
								args = "(nu: glm::vec,nv: glm::vec,w: uint32,h: uint32,ou: ,ov: ,su: ,sv: )",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertexTangent"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,t: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetGeometryType"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetGeometryType"] = {
								type = "method",
								description = [[]],
								args = "(geometryType: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetIndexBuffer"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["AddLine"] = {
								type = "method",
								description = [[]],
								args = "(idx0: uint32,idx1: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearAlphas"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearUVSets"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["HasUVSet"] = {
								type = "method",
								description = [[]],
								args = "(uvSetName: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearVertexData"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetTangents"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBiTangents"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetVertexWeightBuffer"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetSceneMesh"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetCenter"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetVertex"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,v: game.Model.Vertex)",
								returns = "(void)",
								valuetype = "void"
							},
							["Scale"] = {
								type = "method",
								description = [[]],
								args = "(scale: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(std::shared_ptr)",
								valuetype = "shared_ptr"
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(translation: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GEOMETRY_TYPE_LINES"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["GEOMETRY_TYPE_POINTS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["GEOMETRY_TYPE_TRIANGLES"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["MeshGroup"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: ModelMesh)",
						returns = "(void)",
						valuetype = "void"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: ModelMeshGroup)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMeshCount"] = {
						type = "method",
						description = [[]],
						args = "(index: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetMeshes"] = {
						type = "method",
						description = [[]],
						args = "(tMeshes: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMesh"] = {
						type = "method",
						description = [[]],
						args = "(index: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					}
				}
			},
			["VertexAnimation"] = {
				type = "class",
				description = [[]],
				childs = {
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetMeshAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["MeshAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(rot: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMesh"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFrames"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Frame"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(vertIdx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(vertIdx: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetFlags"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(vertIdx: uint32,n: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(vertIdx: uint32,pos: glm::vec)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetFlags"] = {
										type = "method",
										description = [[]],
										args = "(flags: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertices"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["GetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(void)",
										valuetype = "void"
									},
									["SetDeltaValue"] = {
										type = "method",
										description = [[]],
										args = "(vertId: uint32,value: )",
										returns = "(void)",
										valuetype = "void"
									},
									["GetDeltaValue"] = {
										type = "method",
										description = [[]],
										args = "(vertId: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["Rotate"] = {
										type = "method",
										description = [[]],
										args = "(rot: glm::qua)",
										returns = "(void)",
										valuetype = "void"
									},
									["SetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "(numVerts: uint32)",
										returns = "(void)",
										valuetype = "void"
									},
									["FLAG_BIT_HAS_DELTA_VALUES"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["FLAG_NONE"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									}
								}
							},

						}
					},

				}
			},
			["VertexWeight"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.Model.VertexWeight)",
						valuetype = "VertexWeight"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: game.Model.VertexWeight)",
						returns = "(void)",
						valuetype = "void"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["boneIds"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["weights"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Flex"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetOperations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: game.Model.VertexAnimation)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrameIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["OP_TWO_WAY0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_TWO_WAY1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DME_LOWER_EYELID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DME_UPPER_EYELID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_ADD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_CONST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DOMINATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DIV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_CLOSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_COMBO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_EXP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_COMMA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_MIN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_FETCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_FETCH2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_MAX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_MUL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_NEG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_OPEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_N_WAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_SUB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["Operation"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["value"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["type"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["index"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["FlexAnimation"] = {
				type = "class",
				description = [[]],
				childs = {
					["LookupLocalFlexControllerIndex"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(object)",
						valuetype = "object"
					},
					["GetFlexControllerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SaveLegacy"] = {
						type = "method",
						description = [[]],
						args = "(f: file.File)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddFrame"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(std::shared_ptr)",
						valuetype = "shared_ptr"
					},
					["ClearFrames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(assetData: udm.AssetData)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveFrame"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrameCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetFrames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetFrame"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32)",
						returns = "(std::shared_ptr)",
						valuetype = "shared_ptr"
					},
					["SetFlexControllerValue"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,id: uint32,val: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFps"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "()",
						valuetype = ""
					},
					["SetFps"] = {
						type = "method",
						description = [[]],
						args = "(fps: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlexControllerIds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["SetFlexControllerIds"] = {
						type = "method",
						description = [[]],
						args = "(tIds: table)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddFlexControllerId"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Frame"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetFlexControllerValue"] = {
								type = "method",
								description = [[]],
								args = "(id: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFlexControllerValueCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(uint32)",
								valuetype = "uint32"
							},
							["SetFlexControllerValue"] = {
								type = "method",
								description = [[]],
								args = "(id: uint32,val: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFlexControllerValues"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(object)",
								valuetype = "object"
							},
							["SetFlexControllerValues"] = {
								type = "method",
								description = [[]],
								args = "(t: table)",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},

				}
			},
			["Animation"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetBoneWeight"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32,t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["Reverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActivityName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetBoneId"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetActivity"] = {
						type = "method",
						description = [[]],
						args = "(act: uint16)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetActivityWeight"] = {
						type = "method",
						description = [[]],
						args = "(weight: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFPS"] = {
						type = "method",
						description = [[]],
						args = "(fps: uint8)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActivityWeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFPS"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddEvent"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,eventId: uint32,args: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEvents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetEventCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: game.Model.Skeleton,rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFadeOutTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBlendController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFadeOutTime"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveEvent"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,idx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddBoneId"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetActivity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["CalcRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: game.Model.Skeleton,t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(scale: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddFrame"] = {
						type = "method",
						description = [[]],
						args = "(frame: Frame)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneWeight"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneList"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearFrames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEventArgs"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,idx: uint32,oArgs: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(assetData: udm.AssetData)",
						returns = "(void)",
						valuetype = "void"
					},
					["SaveLegacy"] = {
						type = "method",
						description = [[]],
						args = "(f: file.File)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEventData"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,idx: uint32,type: uint32,oArgs: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetEventType"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,idx: uint32,type: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFadeInTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneWeights"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrame"] = {
						type = "method",
						description = [[]],
						args = "(ID: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetFadeInTime"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(void)",
						valuetype = "void"
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBoneList"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetFrameCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FLAG_MOVEZ"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_AUTOPLAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_GESTURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_LOOP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_MOVEX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NOREPEAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["Frame"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetFlexControllerWeights"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMoveTranslationZ"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneScale"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetMoveTranslation"] = {
								type = "method",
								description = [[]],
								args = "(x: ,z: )",
								returns = "(void)",
								valuetype = "void"
							},
							["SetFlexControllerWeights"] = {
								type = "method",
								description = [[]],
								args = "(object: object)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetMoveTranslationZ"] = {
								type = "method",
								description = [[]],
								args = "(z: )",
								returns = "(void)",
								valuetype = "void"
							},
							["CalcRenderBounds"] = {
								type = "method",
								description = [[]],
								args = "(anim: pragma::animation::Animation,mdl: std::shared_ptr)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetBoneScale"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32,scale: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(anim: pragma::animation::Animation,skeleton: game.Model.Skeleton,t: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetBoneTransform"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32,pos: glm::vec,rot: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetMoveTranslationX"] = {
								type = "method",
								description = [[]],
								args = "(x: )",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneRotation"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Scale"] = {
								type = "method",
								description = [[]],
								args = "(scale: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMoveTranslation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetBonePose"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32,pose: umath::Transform)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBonePose"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetFlexControllerIds"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetBoneCount"] = {
								type = "method",
								description = [[]],
								args = "(boneCount: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetLocalBoneTransform"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: game.Model.Skeleton,boneId: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["Globalize"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: game.Model.Skeleton)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneMatrix"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetBoneTransform"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetBonePosition"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32,pos: glm::vec)",
								returns = "(void)",
								valuetype = "void"
							},
							["SetBoneRotation"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32,rot: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["Localize"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: game.Model.Skeleton)",
								returns = "(void)",
								valuetype = "void"
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(anim: pragma::animation::Animation,skeleton: game.Model.Skeleton,rot: glm::qua)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetMoveTranslationX"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},

				}
			},
			["Skeleton"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetBone"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearBones"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetRootBones"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBones"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddBone"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(name: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["MakeRootBone"] = {
						type = "method",
						description = [[]],
						args = "(bone: game.Model.Skeleton.Bone)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneHierarchy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["IsRootBone"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(skeletonOther: game.Model.Skeleton)",
						returns = "(void)",
						valuetype = "void"
					},
					["Bone"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetID"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["ClearParent"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["GetChildren"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["IsAncestorOf"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(bool)",
								valuetype = "bool"
							},
							["IsDescendantOf"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(bool)",
								valuetype = "bool"
							},
							["GetParent"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetParent"] = {
								type = "method",
								description = [[]],
								args = "(parent: game.Model.Skeleton.Bone)",
								returns = "(void)",
								valuetype = "void"
							},
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(void)",
								valuetype = "void"
							},
							["SetName"] = {
								type = "method",
								description = [[]],
								args = "(name: std::basic_string)",
								returns = "(void)",
								valuetype = "void"
							}
						}
					},

				}
			},
			["Vertex"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.Model.Vertex)",
						valuetype = "Vertex"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBiTangent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(glm::vec)",
						valuetype = "vec"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: game.Model.Vertex)",
						returns = "(void)",
						valuetype = "void"
					},
					["uv"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normal"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tangent"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["CollisionMesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsSoftBody"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(t: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetAABB"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetConvex"] = {
						type = "method",
						description = [[]],
						args = "(bConvex: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetBoneParentId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IntersectAABB"] = {
						type = "method",
						description = [[]],
						args = "(min: glm::vec,max: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSurfaceMaterialId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSurfaceMaterialIds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["IsConvex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftBodyMesh"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: std::shared_ptr)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAABB"] = {
						type = "method",
						description = [[]],
						args = "(min: glm::vec,max: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetBoneParentId"] = {
						type = "method",
						description = [[]],
						args = "(boneId: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Centralize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetTriangles"] = {
						type = "method",
						description = [[]],
						args = "(tTriangles: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(origin: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSurfaceMaterialId"] = {
						type = "method",
						description = [[]],
						args = "(surfaceMaterialId: int32)",
						returns = "(void)",
						valuetype = "void"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddTriangle"] = {
						type = "method",
						description = [[]],
						args = "(idx0: uint32,idx1: uint32,idx2: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVertices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetTriangles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftBodyTriangles"] = {
						type = "method",
						description = [[]],
						args = "(o: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClipAgainstPlane"] = {
						type = "method",
						description = [[]],
						args = "(n: glm::vec,d: ,clippedMeshA: game.Model.CollisionMesh,clippedMeshB: game.Model.CollisionMesh)",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearSoftBodyAnchors"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetVolume"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearVertices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["AddSoftBodyAnchor"] = {
						type = "method",
						description = [[]],
						args = "(vertIdx: uint32,boneIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVolume"] = {
						type = "method",
						description = [[]],
						args = "(volume: )",
						returns = "(void)",
						valuetype = "void"
					},
					["ClearTriangles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetVertices"] = {
						type = "method",
						description = [[]],
						args = "(tVertices: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetSoftBody"] = {
						type = "method",
						description = [[]],
						args = "(bSoftBody: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftBodyMesh"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftBodyInfo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftBodyTriangles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveSoftBodyAnchor"] = {
						type = "method",
						description = [[]],
						args = "(anchorIdx: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetSoftBodyAnchors"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(rot: glm::qua)",
						returns = "(void)",
						valuetype = "void"
					},
					["AddVertex"] = {
						type = "method",
						description = [[]],
						args = "(v: glm::vec)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["FSOFTBODY_ANCHOR_DISABLE_COLLISIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FSOFTBODY_ANCHOR_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FSOFTBODY_ANCHOR_RIGID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Eyeball"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetUpperLidFlexIndices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetUpperLidFlexAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetLowerLidFlexIndices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetLowerLidFlexAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["GetLowerLidFlexIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetUpperLidFlexIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["origin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["radius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["boneIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["zOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["forward"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["up"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["irisMaterialIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxDilationFactor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["irisUvRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["irisScale"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["name"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ExportInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetAnimationList"] = {
						type = "method",
						description = [[]],
						args = "(oTable: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["IMAGE_FORMAT_JPG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_BMP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_DDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_HDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_KTX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_PNG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_TGA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEVICE_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEVICE_GPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["embedAnimations"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normalizeTextureNames"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["saveAsBinary"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["verbose"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["fullExport"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["generateAo"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["enableExtendedDDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aoResolution"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["scale"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mergeMeshesByMaterial"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["imageFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aoDevice"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aoSamples"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["exportAnimations"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["exportSkinnedMeshData"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["exportMorphTargets"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["exportImages"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Joint"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetChildBoneId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetParentBoneId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["GetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)",
						valuetype = "void"
					},
					["SetParentCollisionMeshId"] = {
						type = "method",
						description = [[]],
						args = "(meshId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetCollisionMeshId"] = {
						type = "method",
						description = [[]],
						args = "(meshId: uint32)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "(keyValues: object)",
						returns = "(void)",
						valuetype = "void"
					},
					["RemoveKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["GetArgs"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(object)",
						valuetype = "object"
					},
					["SetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(key: std::basic_string,val: std::basic_string)",
						returns = "(void)",
						valuetype = "void"
					},
					["SetArgs"] = {
						type = "method",
						description = [[]],
						args = "(t: table)",
						returns = "(void)",
						valuetype = "void"
					},
					["TYPE_BALLSOCKET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FIXED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_CONETWIST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_DOF"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_HINGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SLIDER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["collide"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["sweep"] = {
		type = "lib",
		description = [[]],
		childs = {
			["aabb_with_aabb"] = {
				type = "function",
				description = [[]],
				args = "(originA: vector.Vector,endA: vector.Vector,extentsA: vector.Vector,originB: vector.Vector,endB: vector.Vector,extentsB: vector.Vector,outResult: bool,outTEntry: float,outTExit: float,outNormal: vector.Vector)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["aabb_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(ext: vector.Vector,origin: vector.Vector,dir: vector.Vector,n: vector.Vector,d: float,outResult: bool,outT: float)",
				returns = "(nil)",
				valuetype = "nil"
			}
		}
	},
	["udm"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Srgba"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["HdrColor"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Reference"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.PropertyWrapper)",
						valuetype = "PropertyWrapper"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["PropertyWrapper"] = {
				type = "class",
				description = [[]],
				childs = {
					["It"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class LuaUdmArrayIterator)",
						valuetype = "class LuaUdmArrayIterator"
					},
					["GetBlobData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Add"] = {
						type = "method",
						description = [[]],
						args = "(path: string,type: enum udm::Type)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddAssetData"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["ToAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["GetArrayValuesFromBlob"] = {
						type = "method",
						description = [[]],
						args = "(type: enum udm::Type)",
						returns = "(any)",
						valuetype = "any"
					},
					["AddBlobFromArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(path: string,type: enum udm::Type,t: )",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(any)",
						valuetype = "any"
					},
					["SetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: string,type: enum udm::Type,t: ,arrayType: enum udm::Type)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetChildCount"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum udm::Type)",
						valuetype = "Type"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(type: enum udm::Type)",
						returns = "(any)",
						valuetype = "any"
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFromPath"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddArray"] = {
						type = "method",
						description = [[]],
						args = "(name: string,size: uint32,type: enum udm::Type,arrayType: enum udm::ArrayType)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(key: string,ds: util.DataStream)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(propOther: udm.PropertyWrapper,mergeFlags: enum udm::MergeFlags)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string,o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(any)",
						valuetype = "any"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Array"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Struct"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: udm.StructDescription)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.StructDescription)",
						valuetype = "StructDescription"
					}
				}
			},
			["Property"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAssetData"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["ToAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["GetArrayValuesFromBlob"] = {
						type = "method",
						description = [[]],
						args = "(type: enum udm::Type)",
						returns = "(any)",
						valuetype = "any"
					},
					["AddBlobFromArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(path: string,type: enum udm::Type,t: )",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: string,type: enum udm::Type,t: ,arrayType: enum udm::Type)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string,o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBlobData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChildCount"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "(propName: string)",
						returns = "(string)",
						valuetype = "string"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum udm::Type)",
						valuetype = "Type"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(type: enum udm::Type)",
						returns = "(any)",
						valuetype = "any"
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFromPath"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddArray"] = {
						type = "method",
						description = [[]],
						args = "(name: string,size: uint32,type: enum udm::Type,arrayType: enum udm::ArrayType)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(key: string,ds: util.DataStream)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(propOther: udm.PropertyWrapper,mergeFlags: enum udm::MergeFlags)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(any)",
						valuetype = "any"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(any)",
						valuetype = "any"
					},
					["Add"] = {
						type = "method",
						description = [[]],
						args = "(path: string,type: enum udm::Type)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					}
				}
			},
			["LinkedPropertyWrapper"] = {
				type = "class",
				inherits = "udm.PropertyWrapper",
				description = [[]],
				childs = {
					["ClaimOwnership"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.Property)",
						valuetype = "Property"
					},
					["GetPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					}
				}
			},
			["AssetData"] = {
				type = "class",
				inherits = "udm.LinkedPropertyWrapper",
				description = [[]],
				childs = {
					["GetAssetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetAssetVersion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetData"] = {
						type = "method",
						description = [[]],
						args = "(prop: udm.Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAssetType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAssetVersion"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					}
				}
			},
			["StructDescription"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetTypes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["GetMemberCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					}
				}
			},
			["Data"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(f: file.File)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SaveAscii"] = {
						type = "method",
						description = [[]],
						args = "(f: file.File,flags: enum udm::AsciiSaveFlags)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["LoadProperty"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRootElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.Element)",
						valuetype = "Element"
					},
					["ResolveReferences"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Element"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAssetData"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["ToAssetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.AssetData)",
						valuetype = "AssetData"
					},
					["GetArrayValuesFromBlob"] = {
						type = "method",
						description = [[]],
						args = "(type: enum udm::Type)",
						returns = "(any)",
						valuetype = "any"
					},
					["AddBlobFromArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(path: string,type: enum udm::Type,t: )",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: string,type: enum udm::Type,t: ,arrayType: enum udm::Type)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string,o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBlobData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChildCount"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["ToAscii"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum udm::Type)",
						valuetype = "Type"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(type: enum udm::Type)",
						returns = "(any)",
						valuetype = "any"
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFromPath"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["AddArray"] = {
						type = "method",
						description = [[]],
						args = "(name: string,size: uint32,type: enum udm::Type,arrayType: enum udm::ArrayType)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(key: string,ds: util.DataStream)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(propOther: udm.PropertyWrapper,mergeFlags: enum udm::MergeFlags)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetArrayValues"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(any)",
						valuetype = "any"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(any)",
						valuetype = "any"
					},
					["Add"] = {
						type = "method",
						description = [[]],
						args = "(path: string,type: enum udm::Type)",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					}
				}
			},

		}
	},
	["file"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_directory"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["strip_illegal_filename_characters"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["create_path"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["exists"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["open_external_asset_file"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(file.File)",
				valuetype = "File"
			},
			["is_directory"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["compare_path"] = {
				type = "function",
				description = [[]],
				args = "(path0: string,path1: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["delete"] = {
				type = "function",
				description = [[]],
				args = "(ppath: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["find_external_game_asset_files"] = {
				type = "function",
				description = [[]],
				args = "(path: string,outFiles: any,outDirs: any)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["to_relative_path"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_size"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["find_lua_files"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["get_attributes"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["get_flags"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["find_absolute_path"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["get_canonicalized_path"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_file_path"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_file_extension"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["copy"] = {
				type = "function",
				description = [[]],
				args = "(srcFile: string,dstFile: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_file_name"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["remove_file_extension"] = {
				type = "function",
				description = [[]],
				args = "(path: string,t: )",
				returns = "(string)",
				valuetype = "string"
			},
			["read"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["write"] = {
				type = "function",
				description = [[]],
				args = "(strPath: string,content: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["open"] = {
				type = "function",
				description = [[]],
				args = "(path: string,openMode: enum FileOpenMode)",
				returns = "(file.File)",
				valuetype = "File"
			},
			["find"] = {
				type = "function",
				description = [[]],
				args = "(arg1: string,arg2: any,arg3: any)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["File"] = {
				type = "class",
				description = [[]],
				childs = {
					["Close"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(col: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteChar"] = {
						type = "method",
						description = [[]],
						args = "(d: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["GetPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat4x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4x2)",
						valuetype = "Mat4x2"
					},
					["Eof"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Read"] = {
						type = "method",
						description = [[]],
						args = "(ds: util.DataStream,size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt32"] = {
						type = "method",
						description = [[]],
						args = "(arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IgnoreComments"] = {
						type = "method",
						description = [[]],
						args = "(start: string,end: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Write"] = {
						type = "method",
						description = [[]],
						args = "(ds: util.DataStream,size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteFloat"] = {
						type = "method",
						description = [[]],
						args = "(arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Seek"] = {
						type = "method",
						description = [[]],
						args = "(pos: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteDouble"] = {
						type = "method",
						description = [[]],
						args = "(arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat2x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat2x4)",
						valuetype = "Mat2x4"
					},
					["ReadDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt64"] = {
						type = "method",
						description = [[]],
						args = "(d: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadLongDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt16"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector"] = {
						type = "method",
						description = [[]],
						args = "(v: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(col: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector2"] = {
						type = "method",
						description = [[]],
						args = "(v: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt32"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector4"] = {
						type = "method",
						description = [[]],
						args = "(v: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat2"] = {
						type = "method",
						description = [[]],
						args = "(col: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(col: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat2)",
						valuetype = "Mat2"
					},
					["Tell"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat3"] = {
						type = "method",
						description = [[]],
						args = "(col: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(col: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(col: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat4"] = {
						type = "method",
						description = [[]],
						args = "(col: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat2x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat2x3)",
						valuetype = "Mat2x3"
					},
					["ReadBool"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteString"] = {
						type = "method",
						description = [[]],
						args = "(str: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadChar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat3x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat3x2)",
						valuetype = "Mat3x2"
					},
					["ReadMat3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat3)",
						valuetype = "Mat3"
					},
					["ReadMat3x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat3x4)",
						valuetype = "Mat3x4"
					},
					["WriteUInt64"] = {
						type = "method",
						description = [[]],
						args = "(d: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat4x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4x3)",
						valuetype = "Mat4x3"
					},
					["ReadMat4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["ReadQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt16"] = {
						type = "method",
						description = [[]],
						args = "(arg2: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(col: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteBool"] = {
						type = "method",
						description = [[]],
						args = "(arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt8"] = {
						type = "method",
						description = [[]],
						args = "(arg2: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt8"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},

		}
	},
	["_G"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Quaternion"] = {
				type = "function",
				description = [[]],
				args = "(forward: vector.Vector,up: vector.Vector)",
				returns = "(math.QuaternionInternal)",
				valuetype = "QuaternionInternal"
			},
			["e"] = {
				type = "function",
				description = [[]],
				args = "(o: any)",
				returns = "(any)",
				valuetype = "any"
			},
			["class_names"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(any)",
				valuetype = "any"
			},
			["ec"] = {
				type = "function",
				description = [[]],
				args = "(o: any,o2: any)",
				returns = "(any)",
				valuetype = "any"
			},
			["include"] = {
				type = "function",
				description = [[]],
				args = "(f: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["exec"] = {
				type = "function",
				description = [[]],
				args = "(f: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["class_info"] = {
				type = "function",
				description = [[]],
				args = "(arg0: any)",
				returns = "(class_info_data)",
				valuetype = "class_info_data"
			},
			["get_script_path"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(string)",
				valuetype = "string"
			}
		}
	},
	["ents"] = {
		type = "lib",
		description = [[]],
		childs = {
			["find_by_unique_index"] = {
				type = "function",
				description = [[]],
				args = "(uuid: string)",
				returns = "([ents.BaseEntityBase])",
				valuetype = "BaseEntityBase"
			},
			["iterator"] = {
				type = "function",
				description = [[]],
				args = "(arg1: enum EntityIterator::FilterFlags,arg2: tableents.IteratorFilter)",
				returns = "(class LuaEntityIterator)",
				valuetype = "class LuaEntityIterator"
			},
			["get_closest"] = {
				type = "function",
				description = [[]],
				args = "(origin: vector.Vector)",
				returns = "([ents.BaseEntityBase[,float])",
				valuetype = "BaseEntityBase"
			},
			["get_all"] = {
				type = "function",
				description = [[]],
				args = "(filters: tableents.IteratorFilter)",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["create"] = {
				type = "function",
				description = [[]],
				args = "(classname: string)",
				returns = "(ents.BaseEntityBase)",
				valuetype = "BaseEntityBase"
			},
			["get_weapons"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["get_npcs"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["find_in_sphere"] = {
				type = "function",
				description = [[]],
				args = "(origin: vector.Vector,radius: float)",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["find_by_name"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["find_by_class"] = {
				type = "function",
				description = [[]],
				args = "(className: string)",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["get_vehicles"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tableents.BaseVehicleComponent)",
				valuetype = "BaseVehicleComponent>"
			},
			["find_in_cone"] = {
				type = "function",
				description = [[]],
				args = "(origin: vector.Vector,dir: vector.Vector,radius: float,angle: float)",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["create_trigger"] = {
				type = "function",
				description = [[]],
				args = "(origin: vector.Vector,radius: float)",
				returns = "(ents.BaseEntityBase)",
				valuetype = "BaseEntityBase"
			},
			["create_prop"] = {
				type = "function",
				description = [[]],
				args = "(mdl: string)",
				returns = "(ents.BaseEntityBase)",
				valuetype = "BaseEntityBase"
			},
			["register"] = {
				type = "function",
				description = [[]],
				args = "(arg1: string,arg2: table(variantstring|uint32))",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_farthest"] = {
				type = "function",
				description = [[]],
				args = "(origin: vector.Vector)",
				returns = "([ents.BaseEntityBase[,float])",
				valuetype = "BaseEntityBase"
			},
			["get_random"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(ents.BaseEntityBase)",
				valuetype = "BaseEntityBase"
			},
			["register_component_net_event"] = {
				type = "function",
				description = [[]],
				args = "(componentId: uint32,name: string)",
				returns = "([uint32])",
				valuetype = "uint32"
			},
			["register_component_event"] = {
				type = "function",
				description = [[]],
				args = "(componentId: uint32,name: string)",
				returns = "([uint32])",
				valuetype = "uint32"
			},
			["get_sorted_by_distance"] = {
				type = "function",
				description = [[]],
				args = "(origin: vector.Vector)",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["find_in_aabb"] = {
				type = "function",
				description = [[]],
				args = "(min: vector.Vector,max: vector.Vector)",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["get_component_name"] = {
				type = "function",
				description = [[]],
				args = "(componentId: uint32)",
				returns = "([string])",
				valuetype = "string"
			},
			["get_component_id"] = {
				type = "function",
				description = [[]],
				args = "(componentName: string)",
				returns = "([uint32])",
				valuetype = "uint32"
			},
			["get_null"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(class util::TWeakSharedHandle<class BaseEntity>)",
				valuetype = "TWeakSharedHandle<class BaseEntity>"
			},
			["get_spawned"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["get_players"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["find_by_component"] = {
				type = "function",
				description = [[]],
				args = "(componentName: string)",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["get_world"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([ents.BaseEntityBase])",
				valuetype = "BaseEntityBase"
			},
			["get_by_index"] = {
				type = "function",
				description = [[]],
				args = "(idx: uint32)",
				returns = "([ents.BaseEntityBase])",
				valuetype = "BaseEntityBase"
			},
			["get_by_local_index"] = {
				type = "function",
				description = [[]],
				args = "(idx: uint32)",
				returns = "([ents.BaseEntityBase])",
				valuetype = "BaseEntityBase"
			},
			["find_by_filter"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(tableents.BaseEntityBase)",
				valuetype = "BaseEntityBase>"
			},
			["RenderTargetComponent"] = {
				type = "class",
				inherits = "ents.BasePointRenderTargetComponent",
				description = [[]],
				childs = {

				}
			},
			["CharacterComponent"] = {
				type = "class",
				inherits = "ents.BaseCharacterComponent",
				description = [[]],
				childs = {
					["GetViewRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["SetGodMode"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GiveWeapon"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["SetJumpPower"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReloadWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DropWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hWep: ents.WeaponComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DeployWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hWep: ents.WeaponComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalOrientationRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["DropActiveWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveWeapons"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStepOffset"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveWeapon"] = {
						type = "method",
						description = [[]],
						args = "(hWep: ents.WeaponComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Kill"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DamageInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SelectNextWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SelectPreviousWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HolsterWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetViewRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetNoTarget"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "(slopeLimit: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNoTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetFaction"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ai.Faction)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGodMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetJumpPower"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetFaction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ai.Faction)",
						valuetype = "Faction"
					},
					["PrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WorldToLocalOrientation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.EulerAngles)",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["SecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TertiaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Attack4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalOrientationViewRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["SetOrientation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveAmmo"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalOrientationAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["GetLocalOrientationViewAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["GetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["LocalOrientationToWorld"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.EulerAngles)",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["GetJumpPowerProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["SetFrozen"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAmmoCount"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["SetAmmoCount"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShootPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["AddAmmo"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetUpDirectionProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Vector3Property)",
						valuetype = "Vector3Property"
					},
					["Ragdolize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSlopeLimitProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["GetStepOffsetProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["Jump"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetTurnSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetViewUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetViewForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["NormalizeViewRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["GetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["IsDead"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetViewAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["IsAlive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFrozenProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::BoolProperty)",
						valuetype = "BoolProperty"
					},
					["IsFrozen"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetMoveController"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOrientationAxes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOrientationAxesRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["GetStepOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetViewRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetTurnSpeed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetViewAngles"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHitboxPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.Object)",
						valuetype = "Object"
					},
					["GetWeapons"] = {
						type = "method",
						description = [[]],
						args = "(className: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWeaponCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetActiveWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["HasWeapon"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetAimRayData"] = {
						type = "method",
						description = [[]],
						args = "(maxDist: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FootStep"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::BaseCharacterComponent::FootType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsMoving"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetNeckControllers"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNeckYawController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetNeckPitchController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetMoveController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32,int32)",
						valuetype = "int32"
					},
					["GetMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetRelativeVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["EVENT_CALC_MOVEMENT_ACCELERATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CALC_MOVEMENT_DIRECTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CALC_MOVEMENT_SPEED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_JUMP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEPLOY_WEAPON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CALC_AIR_MOVEMENT_MODIFIER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_FOOT_STEP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_VIEW_ROTATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_IS_MOVING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_CHARACTER_ORIENTATION_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEATH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_KILLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RESPAWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SET_ACTIVE_WEAPON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PLAY_FOOTSTEP_SOUND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOOT_LEFT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOOT_RIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["WaterComponent"] = {
				type = "class",
				inherits = "ents.BaseFuncWaterComponent",
				description = [[]],
				childs = {
					["GetReflectionScene"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.SceneComponent)",
						valuetype = "SceneComponent"
					},
					["GetWaterSceneTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["GetWaterSceneDepthTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["ProjectToSurface"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["CreateSplash"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: float,arg3: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcLineSurfaceIntersection"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: vector.Vector,arg3: float,arg4: float,arg5: float,arg6: bool)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetWaterPlane"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStiffness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetStiffness"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPropagation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetPropagation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWaterVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetWaterVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDensity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["EVENT_ON_WATER_SURFACE_SIMULATOR_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FlammableComponent"] = {
				type = "class",
				inherits = "ents.BaseFlammableComponent",
				description = [[]],
				childs = {
					["Ignite"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIgnitableProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::BoolProperty)",
						valuetype = "BoolProperty"
					},
					["IsOnFire"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsIgnitable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Extinguish"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetIgnitable"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOnFireProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::BoolProperty)",
						valuetype = "BoolProperty"
					},
					["EVENT_ON_EXTINGUISHED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_IGNITED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["tf2"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["DamageableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["TakeDamage"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DamageInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_TAKE_DAMAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["LogicComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["EVENT_ON_TICK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IteratorFilterSphere"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["IOComponent"] = {
				type = "class",
				inherits = "ents.BaseIOComponent",
				description = [[]],
				childs = {
					["StoreOutput"] = {
						type = "method",
						description = [[]],
						args = "(name: string,info: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Input"] = {
						type = "method",
						description = [[]],
						args = "(input: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FireOutput"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: ents.BaseEntityBase,arg3: enum pragma::BaseIOComponent::IoFlags)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IO_FLAG_BIT_FORCE_DELAYED_FIRE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IO_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["PointConstraintBallSocketComponent"] = {
				type = "class",
				inherits = "ents.BasePointConstraintBallSocketComponent",
				description = [[]],
				childs = {

				}
			},
			["LogicRelayComponent"] = {
				type = "class",
				inherits = "ents.BaseLogicRelayComponent",
				description = [[]],
				childs = {

				}
			},
			["DebugCylinderComponent"] = {
				type = "class",
				inherits = "ents.BaseDebugCylinderComponent",
				description = [[]],
				childs = {

				}
			},
			["FuncPortalComponent"] = {
				type = "class",
				inherits = "ents.BaseFuncPortalComponent",
				description = [[]],
				childs = {

				}
			},
			["OwnableComponent"] = {
				type = "class",
				inherits = "ents.BaseOwnableComponent",
				description = [[]],
				childs = {
					["SetOwner"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOwner"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["EVENT_ON_OWNER_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DebugConeComponent"] = {
				type = "class",
				inherits = "ents.BaseDebugConeComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSoundDspComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterBox"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["SpriteComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSpriteComponent",
				description = [[]],
				childs = {
					["StopAndRemoveEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["TriggerTeleportComponent"] = {
				type = "class",
				inherits = "ents.BaseTriggerTeleportComponent",
				description = [[]],
				childs = {

				}
			},
			["AnimatedComponent"] = {
				type = "class",
				inherits = "ents.BaseAnimatedComponent",
				description = [[]],
				childs = {
					["GetRootPoseBoneId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["SetLocalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,pose: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneRenderMatrices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablemath.Mat4)",
						valuetype = "Mat4>"
					},
					["GetBoneRenderMatrix"] = {
						type = "method",
						description = [[]],
						args = "(boneIndex: uint32)",
						returns = "([math.Mat4])",
						valuetype = "Mat4"
					},
					["GetAnimationObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(Model.Animation)",
						valuetype = "Animation"
					},
					["SetSkeletonUpdateCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLayeredAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: enum pragma::FPlayAnim)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetGlobalBonePos"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,pos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([phys.ScaledTransform])",
						valuetype = "ScaledTransform"
					},
					["GetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetBoneRenderMatrix"] = {
						type = "method",
						description = [[]],
						args = "(boneIndex: uint32,m: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalVertexPosition"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: Model.Mesh.Sub,vertexId: uint32)",
						returns = "([math.Vector])",
						valuetype = "Vector"
					},
					["GetBoneRotation"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([math.QuaternionInternal])",
						valuetype = "QuaternionInternal"
					},
					["SetBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,pos: vector.Vector,ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCycle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["AreSkeletonUpdateCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetBoneBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([prosper.SwapBuffer])",
						valuetype = "SwapBuffer"
					},
					["GetBoneBindPose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([phys.ScaledTransform])",
						valuetype = "ScaledTransform"
					},
					["SetCycle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBonePos"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([vector.Vector])",
						valuetype = "Vector"
					},
					["GetBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([math.QuaternionInternal])",
						valuetype = "QuaternionInternal"
					},
					["GetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([vector.Vector[,math.QuaternionInternal[,vector.Vector])",
						valuetype = "Vector"
					},
					["GetLocalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([phys.ScaledTransform])",
						valuetype = "ScaledTransform"
					},
					["GetGlobalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([vector.Vector[,math.QuaternionInternal[,vector.Vector])",
						valuetype = "Vector"
					},
					["PlayActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGlobalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([phys.ScaledTransform])",
						valuetype = "ScaledTransform"
					},
					["GetBoneAngles"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([math.EulerAngles])",
						valuetype = "EulerAngles"
					},
					["GetBoneScale"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([vector.Vector])",
						valuetype = "Vector"
					},
					["SetBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,pose: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBonePos"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,pos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRootPoseBoneId"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PlayLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(slot: int32,anim: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateEffectiveBoneTransforms"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBoneAngles"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBoneScale"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,scale: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,pos: vector.Vector,rot: math.QuaternionInternal,scale: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocalBonePos"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,pos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAnimationEvent"] = {
						type = "method",
						description = [[]],
						args = "(anim: string,frameId: uint32,f: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(controller: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocalBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBindPose"] = {
						type = "method",
						description = [[]],
						args = "(arg1: Model.Animation.Frame)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetGlobalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,pos: vector.Vector,rot: math.QuaternionInternal,scale: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InjectAnimationEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,args: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexPosition"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: Model.Mesh.Sub,vertexId: uint32)",
						returns = "([vector.Vector])",
						valuetype = "Vector"
					},
					["SetGlobalBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,pose: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBaseAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::FPlayAnim)",
						valuetype = "FPlayAnim"
					},
					["SetGlobalBoneRot"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEffectiveBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["SetEffectiveBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string,t: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(controller: string,val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAnimatedRootPoseTransformEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBindPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(Model.Animation.Frame)",
						valuetype = "Frame"
					},
					["ClearAnimationEvents"] = {
						type = "method",
						description = [[]],
						args = "(anim: string,frameId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["BindAnimationEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,component: ents.EntityComponent,methodName: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PlayLayeredActivity"] = {
						type = "method",
						description = [[]],
						args = "(slot: int32,activity: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["IsAnimatedRootPoseTransformEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddRootPoseBone"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["SetBaseAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::FPlayAnim)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLayeredAnimationFlags"] = {
						type = "method",
						description = [[]],
						args = "(layerIdx: uint32)",
						returns = "(any)",
						valuetype = "any"
					},
					["StopLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetActivity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum Activity)",
						valuetype = "enum Activity"
					},
					["GetLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetLayeredActivity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(enum Activity)",
						valuetype = "enum Activity"
					},
					["GetLayeredAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["ApplyLayeredAnimations"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPlaybackRateProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["GetBoneMatrix"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([math.Mat4])",
						valuetype = "Mat4"
					},
					["GetBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdentifier: string)",
						returns = "([vector.Vector[,math.QuaternionInternal[,vector.Vector])",
						valuetype = "Vector"
					},
					["EVENT_MAINTAIN_ANIMATION_MOVEMENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_MAINTAIN_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_MAINTAIN_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_LOOP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_SNAP_TO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_RESET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FPLAYANIM_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_TRANSFORM_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BONE_POSES_FINALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_ANIMATION_EVENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATIONS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATION_COMPLETE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_LAYERED_ANIMATION_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_BLEND_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATION_RESET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ANIMATION_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_LAYERED_ANIMATION_COMPLETE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_LAYERED_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAY_LAYERED_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_STOP_LAYERED_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PLAY_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_UPDATE_BONES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_UPDATE_BONE_POSES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_TRANSLATE_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_TRANSLATE_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_TRANSLATE_LAYERED_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["AttachableComponent"] = {
				type = "class",
				inherits = "ents.BaseAttachableComponent",
				description = [[]],
				childs = {
					["AttachToEntity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase,arg2: ents.AttachableComponent.AttachmentInfo)",
						returns = "(struct AttachmentData)",
						valuetype = "struct AttachmentData"
					},
					["ClearAttachment"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseParentComponent)",
						valuetype = "BaseParentComponent"
					},
					["AttachToBone"] = {
						type = "method",
						description = [[]],
						args = "(parent: ents.BaseEntityBase,bone: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocalPose"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AttachToAttachment"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase,arg2: string,arg3: ents.AttachableComponent.AttachmentInfo)",
						returns = "(struct AttachmentData)",
						valuetype = "struct AttachmentData"
					},
					["GetLocalPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([phys.Transform])",
						valuetype = "Transform"
					},
					["GetBone"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["SetAttachmentFlags"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum FAttachmentMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttachmentFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum FAttachmentMode)",
						valuetype = "enum FAttachmentMode"
					},
					["EVENT_ON_ATTACHMENT_UPDATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_PLAYER_VIEW_YAW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_PLAYER_VIEW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_BONEMERGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_POSITION_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_UPDATE_EACH_FRAME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_SNAP_TO_ORIGIN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_FORCE_IN_PLACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_FORCE_ROTATION_IN_PLACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FATTACHMENT_MODE_FORCE_TRANSLATION_IN_PLACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AttachmentInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetRotation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetOffset"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["flags"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["PointAtTargetComponent"] = {
				type = "class",
				inherits = "ents.BasePointAtTargetComponent",
				description = [[]],
				childs = {
					["SetPointAtTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPointAtTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					}
				}
			},
			["PointConstraintDoFComponent"] = {
				type = "class",
				inherits = "ents.BasePointConstraintDoFComponent",
				description = [[]],
				childs = {

				}
			},
			["Entity"] = {
				type = "class",
				inherits = "ents.BaseEntityBase",
				description = [[]],
				childs = {
					["IsShared"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetShared"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SendNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(protocol: enum nwm::Protocol,eventId: uint32,rp: net.RecipientFilter)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddNetworkedComponent"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(ents.EntityComponent)",
						valuetype = "EntityComponent"
					},
					["BroadcastNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(protocol: enum nwm::Protocol,eventId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveFromAllScenes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSynchronized"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsSynchronized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddToScene"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.SceneComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSnapshotDirty"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsClientsideOnly"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetClientIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetSceneFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["RemoveFromScene"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.SceneComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsInScene"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.SceneComponent)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddChild"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.Entity)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["PointConstraintConeTwistComponent"] = {
				type = "class",
				inherits = "ents.BasePointConstraintConeTwistComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspEchoComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSoundDspComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterNameOrClass"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: bool,arg3: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["PathNodeComponent"] = {
				type = "class",
				inherits = "ents.BasePointPathNodeComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterComponent"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["HealthComponent"] = {
				type = "class",
				inherits = "ents.BaseHealthComponent",
				description = [[]],
				childs = {
					["GetHealthProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::UInt16Property)",
						valuetype = "UInt16Property"
					},
					["GetMaxHealthProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::UInt16Property)",
						valuetype = "UInt16Property"
					},
					["GetHealth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetHealth"] = {
						type = "method",
						description = [[]],
						args = "(health: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "(maxHealth: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_TAKEN_DAMAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_HEALTH_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["EnvSoundProbeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PlayerSpawnComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["CSMComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ModelComponent"] = {
				type = "class",
				inherits = "ents.BaseModelComponent",
				description = [[]],
				childs = {
					["LookupBlendController"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetMaterialOverride"] = {
						type = "method",
						description = [[]],
						args = "(matSrc: string,matDst: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderMaterial"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(class CMaterial)",
						valuetype = "class CMaterial"
					},
					["GetMaxDrawDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetAttachmentTransform"] = {
						type = "method",
						description = [[]],
						args = "(attachment: int32)",
						returns = "([vector.Vector[,math.QuaternionInternal])",
						valuetype = "Vector"
					},
					["GetLOD"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["ClearMaterialOverride"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxDrawDistance"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetMaterialOverride"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(class CMaterial)",
						valuetype = "class CMaterial"
					},
					["GetSkinProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::UInt32Property)",
						valuetype = "UInt32Property"
					},
					["SetRandomSkin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBodyGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableuint32)",
						valuetype = "table<uint32>"
					},
					["SetBodyGroups"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupAnimation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["LookupAttachment"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetHitboxCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetHitboxBounds"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(vector.Vector,vector.Vector,vector.Vector,math.QuaternionInternal)",
						valuetype = "Vector"
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetModel"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.Model)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([game.Model])",
						valuetype = "Model"
					},
					["GetModelName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetSkin"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSkin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["EVENT_ON_MODEL_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MODEL_MATERIALS_LOADED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["GenericComponent"] = {
				type = "class",
				inherits = "ents.BaseGenericComponent",
				description = [[]],
				childs = {

				}
			},
			["EntityComponent"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(hComponentOther: ents.EntityComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["BroadcastEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,eventArgs: tablenil)",
						returns = "(enum util::EventReply)",
						valuetype = "EventReply"
					},
					["SetTickPolicy"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::TickPolicy)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetComponentName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["RegisterNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventName: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeEventCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,eventArgs: tablenil)",
						returns = "(enum util::EventReply)",
						valuetype = "EventReply"
					},
					["GetEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["GetTickPolicy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::TickPolicy)",
						valuetype = "TickPolicy"
					},
					["GetComponentId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetNextTick"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetNextTick"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddEventCallback"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,function: unknown)",
						returns = "(util.Callback)",
						valuetype = "Callback"
					},
					["InjectEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,eventArgs: tablenil)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(arg1: udm.LinkedPropertyWrapper)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(arg1: udm.LinkedPropertyWrapper)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CALLBACK_TYPE_COMPONENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CALLBACK_TYPE_ENTITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FREGISTER_BIT_NETWORKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FREGISTER_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FireComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvFireComponent",
				description = [[]],
				childs = {

				}
			},
			["PropPhysicsComponent"] = {
				type = "class",
				inherits = "ents.BasePropPhysicsComponent",
				description = [[]],
				childs = {

				}
			},
			["BotComponent"] = {
				type = "class",
				inherits = "ents.BaseBotComponent",
				description = [[]],
				childs = {

				}
			},
			["ParticleSystemComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvParticleSystemComponent",
				description = [[]],
				childs = {
					["RemoveInitializerByType"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNodeCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPrevControlPointPose"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ResumeEmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetColorFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRadius"] = {
						type = "method",
						description = [[]],
						args = "(radius: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Die"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsBloomEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GenerateModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOrientationType"] = {
						type = "method",
						description = [[]],
						args = "(orientationType: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetExtent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveRendererByType"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsDying"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsStatic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParent"] = {
						type = "method",
						description = [[]],
						args = "(hParent: ents.ParticleSystemComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindOperatorByType"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetExtent"] = {
						type = "method",
						description = [[]],
						args = "(extent: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetControlPointEntity"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRemoveOnComplete"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "(bStopImmediately: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRadius"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveChild"] = {
						type = "method",
						description = [[]],
						args = "(hChild: ents.ParticleSystemComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSimulationTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsAnimated"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOperators"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveOperatorByType"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindInitializer"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetNodeTarget"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32,pos: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindOperator"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInitializers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindRenderer"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParticle"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindInitializerByType"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindRendererByType"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNodePosition"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddOperator"] = {
						type = "method",
						description = [[]],
						args = "(name: string,o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderParticleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNodeTarget"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mat: game.Material)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRemoveOnComplete"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOrientationType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveInitializer"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsContinuous"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetContinuous"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBloomColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBloomColorFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEffectiveBloomColorFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParticleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParticles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddInitializer"] = {
						type = "method",
						description = [[]],
						args = "(name: string,o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddRenderer"] = {
						type = "method",
						description = [[]],
						args = "(name: string,o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveOperator"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveRenderer"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(alphaMode: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSortParticles"] = {
						type = "method",
						description = [[]],
						args = "(bSort: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsActiveOrPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStartTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParticleBufferIndexFromParticleIndex"] = {
						type = "method",
						description = [[]],
						args = "(ptIdx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParticleIndexFromParticleBufferIndex"] = {
						type = "method",
						description = [[]],
						args = "(ptBufIdx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsEmissionPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasChild"] = {
						type = "method",
						description = [[]],
						args = "(hChild: ents.ParticleSystemComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParticleBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetControlPointPose"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,pose: phys.Transform,timeStamp: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParticleAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimationSpriteSheetBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimationDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSpriteSheetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ShouldAutoSimulate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAutoSimulate"] = {
						type = "method",
						description = [[]],
						args = "(autoSimulate: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeFromParticleSystemDefinition"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetControlPointEntity"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,ent: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetControlPointPosition"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,pos: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetControlPointRotation"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddChild"] = {
						type = "method",
						description = [[]],
						args = "(hChild: ents.ParticleSystemComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetControlPointPose"] = {
						type = "method",
						description = [[]],
						args = "(cpIdx: uint32,timeStamp: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Start"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Simulate"] = {
						type = "method",
						description = [[]],
						args = "(tDelta: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetInitialColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInitialColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSortParticles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftParticles"] = {
						type = "method",
						description = [[]],
						args = "(bSoft: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftParticles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLifeTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(drawCmd: prosper.CommandBuffer,scene: ents.SceneComponent,renderer: ents.RasterizationRendererComponent,renderFlags: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PauseEmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetNextParticleEmissionCount"] = {
						type = "method",
						description = [[]],
						args = "(count: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEmissionRate"] = {
						type = "method",
						description = [[]],
						args = "(emissionRate: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEmissionRate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "(renderMode: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaxParticleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEffectiveAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RENDER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_WORLD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_STATIC"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_ALIGNED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_BILLBOARD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ORIENTATION_TYPE_UPRIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_FLAG_BIT_BLOOM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_FLAG_BIT_DEPTH_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_ADDITIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_PREMULTIPLIED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_ADDITIVE_BY_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_TRANSLUCENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_MASKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_OPAQUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["BaseInitializer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleInitializer ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["OnParticleSystemStarted"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleSystemStopped"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleCreated"] = {
								type = "method",
								description = [[]],
								args = "(arg1: ents.ParticleSystemComponent.Particle)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleDestroyed"] = {
								type = "method",
								description = [[]],
								args = "(arg1: ents.ParticleSystemComponent.Particle)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Initialize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},
					["ParticleInitializer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {

						}
					},
					["Particle"] = {
						type = "class",
						description = [[]],
						childs = {
							["CalcRandomFloatExp"] = {
								type = "method",
								description = [[]],
								args = "(min: float,max: float,exp: float,seed: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetColor"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetPosition"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVelocity"] = {
								type = "method",
								description = [[]],
								args = "(vel: math.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetAlive"] = {
								type = "method",
								description = [[]],
								args = "(alive: bool)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Resurrect"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetPosition"] = {
								type = "method",
								description = [[]],
								args = "(pos: math.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetField"] = {
								type = "method",
								description = [[]],
								args = "(fieldId: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetOrigin"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetAlpha"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetRotation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetField"] = {
								type = "method",
								description = [[]],
								args = "(fieldId: uint32,value: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetRotation"] = {
								type = "method",
								description = [[]],
								args = "(rot: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetRotationYaw"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetRotationYaw"] = {
								type = "method",
								description = [[]],
								args = "(rot: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetPreviousPosition"] = {
								type = "method",
								description = [[]],
								args = "(prevPos: math.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetLife"] = {
								type = "method",
								description = [[]],
								args = "(life: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetRadius"] = {
								type = "method",
								description = [[]],
								args = "(radius: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Die"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetLife"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTimeAlive"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetInitialRotation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetInitialLife"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["CalcRandomFloat"] = {
								type = "method",
								description = [[]],
								args = "(min: float,max: float,seed: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetCameraDistance"] = {
								type = "method",
								description = [[]],
								args = "(dist: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetTimeAlive"] = {
								type = "method",
								description = [[]],
								args = "(life: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTimeCreated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetDeathTime"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetTimeCreated"] = {
								type = "method",
								description = [[]],
								args = "(time: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetExtent"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetLength"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVelocity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetAngularVelocity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetCameraDistance"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetAnimationFrameOffset"] = {
								type = "method",
								description = [[]],
								args = "(offset: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetAnimationFrameOffset"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetWorldRotation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["IsDying"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetColor"] = {
								type = "method",
								description = [[]],
								args = "(color: math.Vector4)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetLifeSpan"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetInitialAnimationFrameOffset"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetWorldRotation"] = {
								type = "method",
								description = [[]],
								args = "(rot: math.QuaternionInternal)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetSequence"] = {
								type = "method",
								description = [[]],
								args = "(sequence: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetRadius"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetPreviousPosition"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetInitialRadius"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetInitialLength"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetAlpha"] = {
								type = "method",
								description = [[]],
								args = "(a: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetInitialColor"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetInitialAlpha"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["CalcRandomInt"] = {
								type = "method",
								description = [[]],
								args = "(min: int32,max: int32,seed: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ShouldDraw"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetSequence"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetOrigin"] = {
								type = "method",
								description = [[]],
								args = "(origin: math.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetLength"] = {
								type = "method",
								description = [[]],
								args = "(len: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Reset"] = {
								type = "method",
								description = [[]],
								args = "(t: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["IsAlive"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetAngularVelocity"] = {
								type = "method",
								description = [[]],
								args = "(vel: math.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["FIELD_ID_ANGULAR_VELOCITY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ALPHA"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_CREATION_TIME"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_COLOR"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_VELOCITY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_INVALID"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_COUNT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_LENGTH"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_LIFE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ORIGIN"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_POS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_RADIUS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ROT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_ROT_YAW"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["FIELD_ID_SEQUENCE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["ParticleOperator"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["CalcStrength"] = {
								type = "method",
								description = [[]],
								args = "(curTime: float)",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},
					["BaseRenderer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleRenderer ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["SetShader"] = {
								type = "method",
								description = [[]],
								args = "(shader: shader.BaseParticle2D)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleCreated"] = {
								type = "method",
								description = [[]],
								args = "(arg1: ents.ParticleSystemComponent.Particle)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleDestroyed"] = {
								type = "method",
								description = [[]],
								args = "(arg1: ents.ParticleSystemComponent.Particle)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Initialize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleSystemStopped"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleSystemStarted"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetShader"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Render"] = {
								type = "method",
								description = [[]],
								args = "(arg1: prosper.CommandBuffer,arg2: ents.SceneComponent,arg3: ents.RasterizationRendererComponent,arg4: bool)",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},
					["ParticleModifier"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(key: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetType"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetPriority"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetKeyValues"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetKeyValue"] = {
								type = "method",
								description = [[]],
								args = "(key: string,value: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetPriority"] = {
								type = "method",
								description = [[]],
								args = "(priority: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetParticleSystem"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},
					["ParticleRenderer"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {

						}
					},
					["BaseOperator"] = {
						type = "class",
						inherits = "ents.ParticleSystemComponent.ParticleOperator ents.ParticleSystemComponent.ParticleModifier",
						description = [[]],
						childs = {
							["OnParticleSystemStarted"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleSystemStopped"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleCreated"] = {
								type = "method",
								description = [[]],
								args = "(arg1: ents.ParticleSystemComponent.Particle)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["OnParticleDestroyed"] = {
								type = "method",
								description = [[]],
								args = "(arg1: ents.ParticleSystemComponent.Particle)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Simulate"] = {
								type = "method",
								description = [[]],
								args = "(arg1: ents.ParticleSystemComponent.Particle,arg2: float,arg3: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Initialize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},

				}
			},
			["TimeScaleComponent"] = {
				type = "class",
				inherits = "ents.BaseTimeScaleComponent",
				description = [[]],
				childs = {
					["GetTimeScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetTimeScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetEffectiveTimeScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					}
				}
			},
			["PointConstraintHingeComponent"] = {
				type = "class",
				inherits = "ents.BasePointConstraintHingeComponent",
				description = [[]],
				childs = {

				}
			},
			["ButtonComponent"] = {
				type = "class",
				inherits = "ents.BaseFuncButtonComponent",
				description = [[]],
				childs = {

				}
			},
			["GamemodeComponent"] = {
				type = "class",
				inherits = "ents.BaseGamemodeComponent",
				description = [[]],
				childs = {
					["GetIdentifier"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetAuthor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetGamemodeVersion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Version)",
						valuetype = "Version"
					},
					["EVENT_ON_PLAYER_JOINED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_GAME_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_GAME_READY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MAP_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_DEATH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_SPAWNED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_DROPPED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PLAYER_READY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FuncSoftPhysicsComponent"] = {
				type = "class",
				inherits = "ents.BaseFuncSoftPhysicsComponent",
				description = [[]],
				childs = {

				}
			},
			["BaseFuncSurfaceMaterialComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointConstraintFixedComponent"] = {
				type = "class",
				inherits = "ents.BasePointConstraintFixedComponent",
				description = [[]],
				childs = {

				}
			},
			["BaseEntity"] = {
				type = "class",
				inherits = "ents.Entity",
				description = [[]],
				childs = {
					["Initialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ViewBodyComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PointTargetComponent"] = {
				type = "class",
				inherits = "ents.BasePointTargetComponent",
				description = [[]],
				childs = {

				}
			},
			["FilterNameComponent"] = {
				type = "class",
				inherits = "ents.BaseFilterNameComponent",
				description = [[]],
				childs = {
					["ShouldPass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["EVENT_ON_NAME_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["IteratorFilterClass"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: bool,arg3: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["CompositeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["AddEntity"] = {
						type = "method",
						description = [[]],
						args = "(ent: ents.BaseEntityBase,groupName: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearEntities"] = {
						type = "method",
						description = [[]],
						args = "(groupName: string,safely: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEntities"] = {
						type = "method",
						description = [[]],
						args = "(groupName: string)",
						returns = "(tableents.BaseEntityBase)",
						valuetype = "BaseEntityBase>"
					},
					["GetRootGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.CompositeComponent.CompositeGroup)",
						valuetype = "CompositeGroup"
					},
					["CompositeGroup"] = {
						type = "class",
						description = [[]],
						childs = {
							["RemoveEntity"] = {
								type = "method",
								description = [[]],
								args = "(arg1: ents.BaseEntityBase)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearEntities"] = {
								type = "method",
								description = [[]],
								args = "(groupName: string,safely: bool)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["AddChildGroup"] = {
								type = "method",
								description = [[]],
								args = "(arg1: string)",
								returns = "(ents.CompositeComponent.CompositeGroup)",
								valuetype = "CompositeGroup"
							},
							["GetEntities"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(tableents.BaseEntityBase)",
								valuetype = "BaseEntityBase>"
							},
							["GetChildGroups"] = {
								type = "method",
								description = [[]],
								args = "(name: string)",
								returns = "(tableents.CompositeComponent.CompositeGroup)",
								valuetype = "CompositeGroup>"
							},
							["AddEntity"] = {
								type = "method",
								description = [[]],
								args = "(ent: ents.BaseEntityBase,groupName: string)",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},

				}
			},
			["BrushComponent"] = {
				type = "class",
				inherits = "ents.BaseFuncBrushComponent",
				description = [[]],
				childs = {

				}
			},
			["KinematicComponent"] = {
				type = "class",
				inherits = "ents.BaseFuncKinematicComponent",
				description = [[]],
				childs = {

				}
			},
			["FuncPhysicsComponent"] = {
				type = "class",
				inherits = "ents.BaseFuncPhysicsComponent",
				description = [[]],
				childs = {

				}
			},
			["WorldComponent"] = {
				type = "class",
				inherits = "ents.BaseWorldComponent",
				description = [[]],
				childs = {
					["GetBSPTree"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.WorldComponent.BSPTree)",
						valuetype = "BSPTree"
					},
					["BSPTree"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetRootNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetClusterVisibility"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["IsValid"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["IsClusterVisible"] = {
								type = "method",
								description = [[]],
								args = "(clusterSrc: uint32,clusterDst: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetClusterCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["FindLeafNode"] = {
								type = "method",
								description = [[]],
								args = "(origin: math.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["FindLeafNodesInAABB"] = {
								type = "method",
								description = [[]],
								args = "(min: math.Vector,max: math.Vector)",
								returns = "(any)",
								valuetype = "any"
							},
							["GetNodes"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Node"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetBounds"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetInternalNodeFaceCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetInternalNodePlane"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["IsLeaf"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetIndex"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(uint32)",
										valuetype = "uint32"
									},
									["GetCluster"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetInternalNodeFirstFaceIndex"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetVisibleLeafAreaBounds"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetChildren"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									}
								}
							},

						}
					},

				}
			},
			["SceneComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetWorldEnvironment"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.WorldEnvironment)",
						valuetype = "WorldEnvironment"
					},
					["SetWorldEnvironment"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.WorldEnvironment)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearWorldEnvironment"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCameraDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.DescriptorSet)",
						valuetype = "DescriptorSet"
					},
					["RenderPrepass"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo,renderMode: enum RenderMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetViewCameraDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class prosper::IDescriptorSet)",
						valuetype = "IDescriptorSet"
					},
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo,renderMode: enum RenderMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDebugMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::SceneDebugMode)",
						valuetype = "SceneDebugMode"
					},
					["SetDebugMode"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::SceneDebugMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.RendererComponent)",
						valuetype = "RendererComponent"
					},
					["SetRenderer"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.RendererComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSceneIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint8)",
						valuetype = "uint8"
					},
					["SetParticleSystemColorFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParticleSystemColorFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4)",
						valuetype = "Vector4"
					},
					["GetRenderParticleSystems"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableents.ParticleSystemComponent)",
						valuetype = "ParticleSystemComponent>"
					},
					["GetRenderQueue"] = {
						type = "method",
						description = [[]],
						args = "(renderMode: enum RenderMode,translucent: bool)",
						returns = "(game.RenderQueue)",
						valuetype = "RenderQueue"
					},
					["InitializeRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint8)",
						valuetype = "uint8"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32,uint32)",
						valuetype = "uint32"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32,arg3: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOcclusionCullingMethod"] = {
						type = "method",
						description = [[]],
						args = "(method: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.SceneComponent,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetActiveCamera"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::TWeakSharedHandle<class pragma::CCameraComponent>)",
						valuetype = "CCameraComponent>"
					},
					["SetActiveCamera"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateBuffers"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: prosper.CommandBuffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DEBUG_MODE_ALBEDO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_REFLECTANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_AMBIENT_OCCLUSION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_DIFFUSE_LIGHTING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_NORMAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_EMISSION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_NORMAL_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_METALNESS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_ROUGHNESS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_BRUTE_FORCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_CHC_PLUSPLUS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_BSP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_INERT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OCCLUSION_CULLING_METHOD_OCTREE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_TARGET_TEXTURE_BLOOM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_TARGET_TEXTURE_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_TARGET_TEXTURE_DEPTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_IBL_IRRADIANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEBUG_MODE_IBL_PREFILTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ACTIVE_CAMERA_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CreateInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["sampleCount"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["PointConstraintSliderComponent"] = {
				type = "class",
				inherits = "ents.BasePointConstraintSliderComponent",
				description = [[]],
				childs = {

				}
			},
			["FlashlightComponent"] = {
				type = "class",
				inherits = "ents.BaseFlashlightComponent",
				description = [[]],
				childs = {

				}
			},
			["PropDynamicComponent"] = {
				type = "class",
				inherits = "ents.BasePropDynamicComponent",
				description = [[]],
				childs = {

				}
			},
			["TriggerGravityComponent"] = {
				type = "class",
				inherits = "ents.BaseEntityTriggerGravityComponent",
				description = [[]],
				childs = {

				}
			},
			["InfoLandmarkComponent"] = {
				type = "class",
				inherits = "ents.BaseInfoLandmarkComponent",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilter"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["IteratorFilterName"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: bool,arg3: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["IteratorFilterModel"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["SkyboxComponent"] = {
				type = "class",
				inherits = "ents.BaseSkyboxComponent",
				description = [[]],
				childs = {
					["SetSkyAngles"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSkyAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					}
				}
			},
			["IteratorFilterEntity"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["IteratorFilterUuid"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["IteratorFilterCone"] = {
				type = "class",
				inherits = "ents.IteratorFilter",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: vector.Vector,arg3: float,arg4: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["GravityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["CalcBallisticVelocity"] = {
						type = "method",
						description = [[]],
						args = "(origin: vector.Vector,destPos: vector.Vector,fireAngle: float,maxSpeed: float,spread: float,maxPitch: float,maxYaw: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasGravityDirectionOverride"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetGravityScale"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetGravityOverride"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasGravityForceOverride"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetGravityDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetGravity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetGravityForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					}
				}
			},
			["LightDirectionalComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvLightDirectionalComponent",
				description = [[]],
				childs = {
					["GetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["GetAmbientColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::ColorProperty)",
						valuetype = "ColorProperty"
					},
					["SetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["VelocityComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetLocalAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetLocalAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddLocalAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetAngularVelocityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Vector3Property)",
						valuetype = "Vector3Property"
					},
					["SetLocalVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVelocityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Vector3Property)",
						valuetype = "Vector3Property"
					},
					["AddLocalVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					}
				}
			},
			["SoundScapeComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSoundScapeComponent",
				description = [[]],
				childs = {

				}
			},
			["GlobalComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetGlobalName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetGlobalName"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Animated2Component"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["RemoveAnimationManager"] = {
						type = "method",
						description = [[]],
						args = "(arg1: animation.Manager)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearAnimationManagers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimationManagers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableanimation.Manager)",
						valuetype = "Manager>"
					},
					["GetAnimationManager"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(tableanimation.Manager)",
						valuetype = "Manager>"
					},
					["AddAnimationManager"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(animation.Manager)",
						valuetype = "Manager"
					},
					["GetPlaybackRateProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["GetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					}
				}
			},
			["BaseEntityBase"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([ents.BaseParentComponent])",
						valuetype = "BaseParentComponent"
					},
					["GetAirDensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetGenericComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseGenericComponent)",
						valuetype = "BaseGenericComponent"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["TurnOff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["IsInert"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(v: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Disable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["AddComponent"] = {
						type = "method",
						description = [[]],
						args = "(componentId: uint32)",
						returns = "(ents.EntityComponent)",
						valuetype = "EntityComponent"
					},
					["GetPhysicsComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BasePhysicsComponent)",
						valuetype = "BasePhysicsComponent"
					},
					["GetNameComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseNameComponent)",
						valuetype = "BaseNameComponent"
					},
					["GetModelComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseModelComponent)",
						valuetype = "BaseModelComponent"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["RemoveComponent"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Spawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearComponents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasComponent"] = {
						type = "method",
						description = [[]],
						args = "(object: any)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetComponent"] = {
						type = "method",
						description = [[]],
						args = "(object: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum CollisionMask)",
						valuetype = "enum CollisionMask"
					},
					["C"] = {
						type = "method",
						description = [[]],
						args = "(object: any)",
						returns = "([ents.EntityComponent])",
						valuetype = "EntityComponent"
					},
					["GetWeaponComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseWeaponComponent)",
						valuetype = "BaseWeaponComponent"
					},
					["GetOwner"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([ents.BaseEntityBase])",
						valuetype = "BaseEntityBase"
					},
					["GetComponents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableclass util::TSharedHandle<class pragma::BaseEntityComponent>)",
						valuetype = "BaseEntityComponent>>"
					},
					["TurnOn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.Model)",
						valuetype = "Model"
					},
					["GetTransformComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseTransformComponent)",
						valuetype = "BaseTransformComponent"
					},
					["SetTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCharacterComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseCharacterComponent)",
						valuetype = "BaseCharacterComponent"
					},
					["GetVehicleComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseVehicleComponent)",
						valuetype = "BaseVehicleComponent"
					},
					["IsTurnedOff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetPlayerComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BasePlayerComponent)",
						valuetype = "BasePlayerComponent"
					},
					["GetTimeScaleComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseTimeScaleComponent)",
						valuetype = "BaseTimeScaleComponent"
					},
					["GetAIComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseAIComponent)",
						valuetype = "BaseAIComponent"
					},
					["GetUuid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetAnimatedComponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseAnimatedComponent)",
						valuetype = "BaseAnimatedComponent"
					},
					["SetUuid"] = {
						type = "method",
						description = [[]],
						args = "(uuid: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(arg1: udm.LinkedPropertyWrapper)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(arg1: udm.LinkedPropertyWrapper)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["IsStatic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetParent"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsDynamic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetSkin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["CreateSound"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: enum ALSoundType)",
						returns = "(sound.Source)",
						valuetype = "Source"
					},
					["EmitSound"] = {
						type = "method",
						description = [[]],
						args = "(sndname: string,soundType: enum ALSoundType)",
						returns = "(sound.Source)",
						valuetype = "Source"
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetModel"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.Model)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum CollisionMask)",
						valuetype = "enum CollisionMask"
					},
					["GetModelName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetAttachmentPose"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "([phys.Transform])",
						valuetype = "Transform"
					},
					["SetSkin"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(bgId: uint32)",
						returns = "([uint32])",
						valuetype = "uint32"
					},
					["SetOwner"] = {
						type = "method",
						description = [[]],
						args = "(hOwner: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(bgId: uint32,id: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Enable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsDisabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["GetPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.Object)",
						valuetype = "Object"
					},
					["InitializePhysics"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum PHYSICSTYPE)",
						returns = "(phys.Object)",
						valuetype = "Object"
					},
					["DestroyPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DropToFloor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector,vector.Vector)",
						valuetype = "Vector"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum CollisionMask)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum CollisionMask)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Input"] = {
						type = "method",
						description = [[]],
						args = "(input: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHealth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["GetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["SetHealth"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxHealth"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["PlayActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: enum Activity)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["PlayLayeredActivity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: enum Activity,arg3: enum pragma::FPlayAnim)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["PlayLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(slot: int32,anim: string,flags: enum pragma::FPlayAnim)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["StopLayeredAnimation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetActivity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum Activity)",
						valuetype = "enum Activity"
					},
					["TakeDamage"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DamageInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetLocalIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["IsMapEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsCharacter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsWorld"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetClass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["IsScripted"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsSpawned"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsNPC"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsVehicle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RemoveSafely"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveEntityOnRemoval"] = {
						type = "method",
						description = [[]],
						args = "(entOther: ents.BaseEntityBase,remove: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSpawnFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["SetPose"] = {
						type = "method",
						description = [[]],
						args = "(t: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_POST_SPAWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_KEY_VALUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_COMPONENT_ADDED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_REMOVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_COMPONENT_REMOVED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SPAWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SHARED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_LOCAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TouchComponent"] = {
				type = "class",
				inherits = "ents.BaseTouchComponent",
				description = [[]],
				childs = {
					["SetTriggerFlags"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::BaseTouchComponent::TriggerFlags)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTriggerFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::BaseTouchComponent::TriggerFlags)",
						valuetype = "TriggerFlags"
					},
					["GetTouchingEntityCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetTouchingEntities"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["TRIGGER_FLAG_EVERYTHING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_BIT_PLAYERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_BIT_NPCS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TRIGGER_FLAG_BIT_PHYSICS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_CAN_TRIGGER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_TOUCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_START_TOUCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TRIGGER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TRIGGER_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseEntityComponent"] = {
				type = "class",
				inherits = "ents.BaseBaseEntityComponent",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.Entity)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SendData"] = {
						type = "method",
						description = [[]],
						args = "(packet: net.Packet,rp: net.ClientRecipientFilter)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEntityComponent"] = {
						type = "method",
						description = [[]],
						args = "(componentName: string)",
						returns = "(ents.EntityComponent)",
						valuetype = "EntityComponent"
					},
					["ReceiveNetEvent"] = {
						type = "method",
						description = [[]],
						args = "(pl: ents.PlayerComponent,evId: uint32,packet: net.Packet)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SendSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(packet: net.Packet,pl: ents.PlayerComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReceiveSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(packet: net.Packet)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReceiveData"] = {
						type = "method",
						description = [[]],
						args = "(packet: net.Packet)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Initialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnTick"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnRemove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnEntitySpawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnAttachedToEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnDetachedFromEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetNetworked"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsNetworked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetShouldTransmitSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ShouldTransmitSnapshotData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddEntityComponent"] = {
						type = "method",
						description = [[]],
						args = "(name: string,methodNameOrFunction: any)",
						returns = "(ents.EntityComponent)",
						valuetype = "EntityComponent"
					},
					["GetVersion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["FlagCallbackForRemoval"] = {
						type = "method",
						description = [[]],
						args = "(hCb: util.Callback,callbackType: enum pragma::BaseEntityComponent::CallbackType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["BindComponentInitEvent"] = {
						type = "method",
						description = [[]],
						args = "(componentId: uint32,methodNameOrFunction: any)",
						returns = "(util.Callback)",
						valuetype = "Callback"
					},
					["BindEvent"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32,methodNameOrFunction: any)",
						returns = "(util.Callback)",
						valuetype = "Callback"
					},
					["OnMemberValueChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MEMBER_FLAG_BIT_USE_HAS_GETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_USE_IS_GETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT_NETWORKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT_SNAPSHOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_DEFAULT_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_SNAPSHOT_DATA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_TRANSMIT_ON_CHANGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_GETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_STORE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_SETTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_KEY_VALUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_PROPERTY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_NETWORKED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MEMBER_FLAG_BIT_OUTPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderComponent"] = {
				type = "class",
				inherits = "ents.BaseRenderComponent",
				description = [[]],
				childs = {
					["GetRenderClipPlane"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcRayIntersection"] = {
						type = "method",
						description = [[]],
						args = "(start: math.Vector,dir: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthPassEnabled"] = {
						type = "method",
						description = [[]],
						args = "(depthPassEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTransformationMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRenderClipPlane"] = {
						type = "method",
						description = [[]],
						args = "(clipPlane: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearDepthBias"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearRenderClipPlane"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalRenderSphereBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ShouldCastShadows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetRenderOffsetTransform"] = {
						type = "method",
						description = [[]],
						args = "(pose: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearRenderOffsetTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetExemptFromOcclusionCulling"] = {
						type = "method",
						description = [[]],
						args = "(exempt: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderOffsetTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ShouldDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ShouldDrawShadow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetRenderMode"] = {
						type = "method",
						description = [[]],
						args = "(mode: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderModeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(d: float,delta: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAbsoluteRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAbsoluteRenderSphereBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsReceivingShadows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocalRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(min: math.Vector,max: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsDepthPassEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLODMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRenderBufferDirty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLodRenderMeshes"] = {
						type = "method",
						description = [[]],
						args = "(lod: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsExemptFromOcclusionCulling"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetReceiveShadows"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCastShadows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["EVENT_SHOULD_DRAW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_DRAW_SHADOW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_WORLD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_SKYBOX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_VIEW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDERMODE_WATER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEPTH_BIAS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_CLIP_PLANE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_BOUNDS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_MODE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RENDER_BUFFERS_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_UPDATE_RENDER_MATRICES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_UPDATE_INSTANTIABILITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DebugTextComponent"] = {
				type = "class",
				inherits = "ents.BaseDebugTextComponent",
				description = [[]],
				childs = {
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["DebugPointComponent"] = {
				type = "class",
				inherits = "ents.BaseDebugPointComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSoundComponent",
				description = [[]],
				childs = {
					["SetSoundSource"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetGain"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMinGain"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOffset"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOuterConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetInnerConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetReferenceDistance"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxDistance"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxGain"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRelativeToListener"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPlayOnSpawn"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetLooping"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoundTypes"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum ALSoundType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Play"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsPlaying"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Pause"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(sound.Source)",
						valuetype = "Source"
					}
				}
			},
			["DebugPlaneComponent"] = {
				type = "class",
				inherits = "ents.BaseDebugPlaneComponent",
				description = [[]],
				childs = {

				}
			},
			["SmokeTrailComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSmokeTrailComponent",
				description = [[]],
				childs = {

				}
			},
			["AIComponent"] = {
				type = "class",
				inherits = "ents.BaseAIComponent",
				description = [[]],
				childs = {
					["StartSchedule"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ai.Schedule)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CancelSchedule"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsMoving"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetSquad"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearRelationship"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ai.Faction)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSquadName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["IsInMemory"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetMaxViewAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetMaxViewDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetRelationship"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ai.Faction,arg2: enum DISPOSITION,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxViewDistance"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CanHear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetLookTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetMaxViewAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSquad"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ai.Squad)",
						valuetype = "Squad"
					},
					["GetDisposition"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ai.Faction,arg2: int32)",
						returns = "(enum DISPOSITION)",
						valuetype = "enum DISPOSITION"
					},
					["GetCurrentSchedule"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ai.Schedule)",
						valuetype = "Schedule"
					},
					["GetMemory"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ai.Memory)",
						valuetype = "Memory"
					},
					["GetMemoryDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetControllable"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Memorize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase,arg2: enum pragma::ai::Memory::MemoryType)",
						returns = "(ai.MemoryFragment)",
						valuetype = "MemoryFragment"
					},
					["GetController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.PlayerComponent)",
						valuetype = "PlayerComponent"
					},
					["IsAnimationLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Forget"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetHearingStrength"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearMemory"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsInViewCone"] = {
						type = "method",
						description = [[]],
						args = "(entOther: ents.BaseEntityBase)",
						returns = "(bool[,float])",
						valuetype = "bool"
					},
					["GetHearingStrength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetMemoryDuration"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsAIEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["CanSee"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetMemoryFragmentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetPrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ai.MemoryFragment)",
						valuetype = "MemoryFragment"
					},
					["PlayActivity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum Activity,arg2: ents.AIComponent.AnimationInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ClearMoveSpeed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasPrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetNPCState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum NPCSTATE)",
						valuetype = "enum NPCSTATE"
					},
					["SetNPCState"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum NPCSTATE)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAIEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EnableAI"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DisableAI"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MoveTo"] = {
						type = "method",
						description = [[]],
						args = "(pos: vector.Vector)",
						returns = "(enum pragma::BaseAIComponent::MoveResult)",
						valuetype = "MoveResult"
					},
					["IsControllable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["StartControl"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.PlayerComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LockAnimation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EndControl"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsControlled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["StopMoving"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsEnemy"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["TurnStep"] = {
						type = "method",
						description = [[]],
						args = "(target: vector.Vector)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetDistanceToMoveTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetMoveTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["HasReachedDestination"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetMoveActivity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum Activity)",
						valuetype = "enum Activity"
					},
					["GetControllerActionInput"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum Action)",
						valuetype = "enum Action"
					},
					["TriggerScheduleInterrupt"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: ents.AIComponent.AnimationInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetMoveSpeed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMoveSpeed"] = {
						type = "method",
						description = [[]],
						args = "(animId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearLookTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLookTarget"] = {
						type = "method",
						description = [[]],
						args = "(ent: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_CONTROLLER_ACTION_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_CONTROL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_NPC_STATE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MEMORY_GAINED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_LOOK_TARGET_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TARGET_ACQUIRED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_MEMORY_LOST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PATH_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PATH_NODE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PRIMARY_TARGET_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SUSPICIOUS_SOUND_HEARED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SCHEDULE_COMPLETE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SCHEDULE_STARTED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_START_CONTROL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TARGET_VISIBILITY_LOST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TARGET_VISIBILITY_REACQUIRED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SELECT_CONTROLLER_SCHEDULE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SELECT_SCHEDULE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AnimationInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["ClearFaceTarget"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetFacePrimaryTarget"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetFaceTarget"] = {
								type = "method",
								description = [[]],
								args = "(arg1: ents.BaseEntityBase)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["flags"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["playAsSchedule"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["SoundDspEqualizerComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSoundDspComponent",
				description = [[]],
				childs = {

				}
			},
			["ParentComponent"] = {
				type = "class",
				inherits = "ents.BaseParentComponent",
				description = [[]],
				childs = {

				}
			},
			["PhysicsComponent"] = {
				type = "class",
				inherits = "ents.BasePhysicsComponent",
				description = [[]],
				childs = {
					["GetPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyTorqueImpulse"] = {
						type = "method",
						description = [[]],
						args = "(torque: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializePhysics"] = {
						type = "method",
						description = [[]],
						args = "(shape: class util::TSharedHandle<class pragma::physics::IConvexShape>)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DestroyPhysicsObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DropToFloor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionExtents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum CollisionMask)",
						valuetype = "enum CollisionMask"
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum CollisionMask)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsTrigger"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetPhysJointConstraints"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetKinematic"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsKinematic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetAABBDistance"] = {
						type = "method",
						description = [[]],
						args = "(other: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetCollisionCallbacksEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bool: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionContactReportEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetMoveType"] = {
						type = "method",
						description = [[]],
						args = "(moveType: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionContactReportEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bool: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(force: vector.Vector,relPos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionFilter"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum CollisionMask,arg2: enum CollisionMask)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EnableCollisions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DisableCollisions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ResetCollisions"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRotatedCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyTorque"] = {
						type = "method",
						description = [[]],
						args = "(torque: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPhysicsType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum PHYSICSTYPE)",
						valuetype = "enum PHYSICSTYPE"
					},
					["GetCollisionRadius"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["IsPhysicsProp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["IsRagdoll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ApplyImpulse"] = {
						type = "method",
						description = [[]],
						args = "(impulse: vector.Vector,relPos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(min: vector.Vector,max: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum CollisionMask)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum CollisionMask)",
						valuetype = "enum CollisionMask"
					},
					["GetMoveType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MOVETYPE_PHYSICS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_FLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_FREE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_NOCLIP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MOVETYPE_WALK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_RAYCAST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_INITIALIZE_PHYSICS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DYNAMIC_PHYSICS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PHYSICS_DESTROYED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PHYSICS_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PHYSICS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_POST_PHYSICS_SIMULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PRE_PHYSICS_SIMULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SLEEP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WAKE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TriggerRemoveComponent"] = {
				type = "class",
				inherits = "ents.BaseTriggerRemoveComponent",
				description = [[]],
				childs = {

				}
			},
			["LightMapComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetLightmapTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([prosper.Texture])",
						valuetype = "Texture"
					},
					["ConvertLightmapToBSPLuxelData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateLightmapUvBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLightmapAtlas"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReloadLightmapData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetExposure"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetExposure"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetExposureProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["BakeSettings"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetColorTransform"] = {
								type = "method",
								description = [[]],
								args = "(config: string,look: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ResetColorTransform"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["globalLightIntensityFactor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["denoise"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["createAsRenderJob"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["samples"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rebuildUvAtlas"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["height"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["exposure"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["width"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["IKComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetIKControllerEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsIKControllerEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetIKEffectorPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32,arg3: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIKEffectorPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					}
				}
			},
			["UsableComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["EVENT_CAN_USE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_USE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["MapComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetMapIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["SubmergibleComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["IsSubmerged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetSubmergedFraction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["IsInWater"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsFullySubmerged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetSubmergedFractionProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["GetWaterEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["EVENT_ON_WATER_EMERGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WATER_ENTERED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WATER_EXITED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_WATER_SUBMERGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["QuakeComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvQuakeComponent",
				description = [[]],
				childs = {

				}
			},
			["EnvTimeScaleComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvTimescaleComponent",
				description = [[]],
				childs = {

				}
			},
			["WindComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvWindComponent",
				description = [[]],
				childs = {

				}
			},
			["RasterizationRendererComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["RecordLightingPass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DrawSceneInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPrepassDepthTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["GetPrepassNormalTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["SetSSAOEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.RenderTarget)",
						valuetype = "RenderTarget"
					},
					["SetShaderOverride"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["BeginRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(drawSceneInfo: game.DrawSceneInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ClearShaderOverride"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EndRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DrawSceneInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetPostPrepassDepthTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["GetLightingPassCommandBufferRecorder"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.CommandBufferRecorder)",
						valuetype = "CommandBufferRecorder"
					},
					["GetPrepassShader"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class pragma::ShaderPrepassBase)",
						valuetype = "ShaderPrepassBase"
					},
					["SetPrepassMode"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::CRasterizationRendererComponent::PrepassMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPrepassMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::CRasterizationRendererComponent::PrepassMode)",
						valuetype = "PrepassMode"
					},
					["IsSSAOEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetLightSourceDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.DescriptorSet)",
						valuetype = "DescriptorSet"
					},
					["GetPostProcessingDepthDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.DescriptorSet)",
						valuetype = "DescriptorSet"
					},
					["GetPostProcessingHDRColorDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.DescriptorSet)",
						valuetype = "DescriptorSet"
					},
					["GetBloomTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["GetRenderTargetTextureDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.DescriptorSet)",
						valuetype = "DescriptorSet"
					},
					["ReloadPresentationRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ScheduleMeshForRendering"] = {
						type = "method",
						description = [[]],
						args = "(scene: ents.SceneComponent,renderMode: uint32,mat: game.Material,ent: ents.BaseEntityBase,mesh: Model.Mesh.Sub)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordPrepass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DrawSceneInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ExecutePrepass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DrawSceneInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ExecuteLightingPass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DrawSceneInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPrepassCommandBufferRecorder"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.CommandBufferRecorder)",
						valuetype = "CommandBufferRecorder"
					},
					["GetShadowCommandBufferRecorder"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.CommandBufferRecorder)",
						valuetype = "CommandBufferRecorder"
					},
					["UpdatePrepassRenderBuffers"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DrawSceneInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateLightingPassRenderBuffers"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.DrawSceneInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_POST_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_POST_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_POST_EXECUTE_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_POST_EXECUTE_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PREPASS_MODE_DISABLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PREPASS_MODE_DEPTH_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PREPASS_MODE_EXTENDED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RECORD_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RECORD_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_EXECUTE_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_PRE_EXECUTE_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["FilterClassComponent"] = {
				type = "class",
				inherits = "ents.BaseFilterClassComponent",
				description = [[]],
				childs = {
					["ShouldPass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["TriggerHurtComponent"] = {
				type = "class",
				inherits = "ents.BaseTriggerHurtComponent",
				description = [[]],
				childs = {

				}
			},
			["TriggerPushComponent"] = {
				type = "class",
				inherits = "ents.BaseTriggerPushComponent",
				description = [[]],
				childs = {

				}
			},
			["DebugSphereComponent"] = {
				type = "class",
				inherits = "ents.BaseDebugSphereComponent",
				description = [[]],
				childs = {

				}
			},
			["PlayerComponent"] = {
				type = "class",
				inherits = "ents.BasePlayerComponent",
				description = [[]],
				childs = {
					["GetUtilityDrone"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(void)"
					},
					["SetViewOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetActionInput"] = {
						type = "method",
						description = [[]],
						args = "(input: uint32,pressed: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PrintMessage"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: enum MESSAGE)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Respawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Kick"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SendResource"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetViewOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsInFirstPersonMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTimeConnected"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["IsKeyDown"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetViewPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetRunSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetSprintSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetObserverMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum OBSERVERMODE)",
						valuetype = "enum OBSERVERMODE"
					},
					["SetWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRunSpeed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyViewRotationOffset"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSprintSpeed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCrouchedWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetStandEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCrouchedWalkSpeed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocalPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetStandHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetStandHeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCrouchHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetCrouchHeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStandEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCrouchEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetCrouchEyeLevel"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetObserverMode"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum OBSERVERMODE)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetObserverModeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::TEnumProperty<enum OBSERVERMODE>)",
						valuetype = "TEnumProperty<enum OBSERVERMODE>"
					},
					["SetObserverTarget"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseObservableComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetObserverTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseObservableComponent)",
						valuetype = "BaseObservableComponent"
					},
					["SetFlashlightEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToggleFlashlight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetActionInput"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum Action)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsFlashlightEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetActionInputAxisMagnitude"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum Action)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetActionInputs"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum Action)",
						valuetype = "enum Action"
					},
					["SetActionInputAxisMagnitude"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum Action,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MESSAGE_TYPE_CHAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MESSAGE_TYPE_CONSOLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_FIRSTPERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_THIRDPERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_ROAMING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBSERVERMODE_SHOULDER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_ACTION_INPUT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_OBSERVATION_MODE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RaytracingRendererComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["DebugBoxComponent"] = {
				type = "class",
				inherits = "ents.BaseDebugBoxComponent",
				description = [[]],
				childs = {

				}
			},
			["DebugLineComponent"] = {
				type = "class",
				inherits = "ents.BaseDebugLineComponent",
				description = [[]],
				childs = {

				}
			},
			["NameComponent"] = {
				type = "class",
				inherits = "ents.BaseNameComponent",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNameProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::StringProperty)",
						valuetype = "StringProperty"
					}
				}
			},
			["VehicleComponent"] = {
				type = "class",
				inherits = "ents.BaseVehicleComponent",
				description = [[]],
				childs = {
					["GetSpeedKmh"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetSteeringFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["HasDriver"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetDriver"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDriver"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["SetupSteeringWheel"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearDriver"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPhysicsVehicle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.Vehicle)",
						valuetype = "Vehicle"
					},
					["SetupPhysics"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.VehicleCreateInfo,arg2: tablestring)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSteeringWheel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["EVENT_ON_DRIVER_EXITED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DRIVER_ENTERED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["WeaponComponent"] = {
				type = "class",
				inherits = "ents.BaseWeaponComponent",
				description = [[]],
				childs = {
					["IsSecondaryClipEmpty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddPrimaryClip"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAutomaticPrimary"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Holster"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSecondaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPrimaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveSecondaryClip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemovePrimaryClip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetViewModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.ViewModelComponent)",
						valuetype = "ViewModelComponent"
					},
					["RefillSecondaryClip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RefillPrimaryClip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Attack4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddSecondaryClip"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPrimaryAmmoTypeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::UInt32Property)",
						valuetype = "UInt32Property"
					},
					["GetMaxPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["IsInFirstPersonMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["PlayViewActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: enum Activity)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetViewModel"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetHideWorldModelInFirstPerson"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAutomaticSecondary"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPrimaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["EndSecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHideWorldModelInFirstPerson"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetViewModelOffset"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetViewModelOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["GetSecondaryAmmoTypeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::UInt32Property)",
						valuetype = "UInt32Property"
					},
					["IsPrimaryClipEmpty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetMaxSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["SetViewFOV"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetViewFOV"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetNextPrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetNextSecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetNextAttack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsAutomaticPrimary"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsAutomaticSecondary"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Deploy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsDeployed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetPrimaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetSecondaryAmmoType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["HasPrimaryAmmo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["PrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasSecondaryAmmo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["HasAmmo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetPrimaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::UInt16Property)",
						valuetype = "UInt16Property"
					},
					["SecondaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSecondaryClipSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["Reload"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSecondaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::UInt16Property)",
						valuetype = "UInt16Property"
					},
					["GetMaxPrimaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::UInt16Property)",
						valuetype = "UInt16Property"
					},
					["GetMaxSecondaryClipSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::UInt16Property)",
						valuetype = "UInt16Property"
					},
					["TertiaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EndAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EndPrimaryAttack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_PRIMARY_CLIP_SIZE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_ATTACK4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_PRIMARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TERTIARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SECONDARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_DEPLOY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_PRIMARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_RELOAD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_END_SECONDARY_ATTACK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_HOLSTER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SECONDARY_CLIP_SIZE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SoundDspChorusComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSoundDspComponent",
				description = [[]],
				childs = {

				}
			},
			["LightComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvLightComponent",
				description = [[]],
				childs = {
					["SetShadowType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::BaseEnvLightComponent::ShadowType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShadowType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::BaseEnvLightComponent::ShadowType)",
						valuetype = "ShadowType"
					},
					["SetAddToGameScene"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMorphTargetsInShadowsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AreMorphTargetsInShadowsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFalloffExponent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetFalloffExponent"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLightIntensityType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::BaseEnvLightComponent::LightIntensityType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLightIntensityType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::BaseEnvLightComponent::LightIntensityType)",
						valuetype = "LightIntensityType"
					},
					["SetLightIntensity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: enum pragma::BaseEnvLightComponent::LightIntensityType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLightIntensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetLightIntensityCandela"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["EVENT_SHOULD_PASS_ENTITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_PASS_MESH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_PASS_ENTITY_MESH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_SHADOW_BUFFER_INITIALIZED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_GET_TRANSFORMATION_MATRIX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_SHOULD_UPDATE_RENDER_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_HANDLE_SHADOW_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SHADOW_TYPE_FULL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SHADOW_TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SHADOW_TYPE_STATIC_ONLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INTENSITY_TYPE_CANDELA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INTENSITY_TYPE_LUX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INTENSITY_TYPE_LUMEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ColorComponent"] = {
				type = "class",
				inherits = "ents.BaseColorComponent",
				description = [[]],
				childs = {
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["GetColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::ColorProperty)",
						valuetype = "ColorProperty"
					},
					["EVENT_ON_COLOR_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ScoreComponent"] = {
				type = "class",
				inherits = "ents.BaseScoreComponent",
				description = [[]],
				childs = {
					["GetScoreProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Int32Property)",
						valuetype = "Int32Property"
					},
					["GetScore"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetScore"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddScore"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SubtractScore"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_SCORE_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["NetworkedComponent"] = {
				type = "class",
				inherits = "ents.BaseNetworkedComponent",
				description = [[]],
				childs = {

				}
			},
			["ObservableComponent"] = {
				type = "class",
				inherits = "ents.BaseObservableComponent",
				description = [[]],
				childs = {
					["GetCameraEnabledProperty"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::BaseObservableComponent::CameraType)",
						returns = "(class util::BoolProperty)",
						valuetype = "BoolProperty"
					},
					["GetCameraOffsetProperty"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::BaseObservableComponent::CameraType)",
						returns = "(class util::Vector3Property)",
						valuetype = "Vector3Property"
					},
					["GetLocalCameraOffset"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocalCameraOrigin"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32,origin: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalCameraOrigin"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocalCameraOffset"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32,offset: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCameraData"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCameraEnabled"] = {
						type = "method",
						description = [[]],
						args = "(camType: uint32,enabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CAMERA_TYPE_FIRST_PERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CAMERA_TYPE_THIRD_PERSON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CameraData"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetAngleLimits"] = {
								type = "method",
								description = [[]],
								args = "(min: math.EulerAngles,max: math.EulerAngles)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetAngleLimits"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearAngleLimits"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["rotateWithObservee"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["enabled"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["localOrigin"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["offset"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["ShooterComponent"] = {
				type = "class",
				inherits = "ents.BaseShooterComponent",
				description = [[]],
				childs = {
					["FireBullets"] = {
						type = "method",
						description = [[]],
						args = "(o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_FIRE_BULLETS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RadiusComponent"] = {
				type = "class",
				inherits = "ents.BaseRadiusComponent",
				description = [[]],
				childs = {
					["GetRadiusProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["GetRadius"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetRadius"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_RADIUS_CHANGED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SoundEmitterComponent"] = {
				type = "class",
				inherits = "ents.BaseSoundEmitterComponent",
				description = [[]],
				childs = {
					["CreateSound"] = {
						type = "method",
						description = [[]],
						args = "(sndname: string,soundType: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EmitSound"] = {
						type = "method",
						description = [[]],
						args = "(sndname: string,soundType: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["StopSounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_SOUND_CREATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ToggleComponent"] = {
				type = "class",
				inherits = "ents.BaseToggleComponent",
				description = [[]],
				childs = {
					["Toggle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTurnedOnProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::BoolProperty)",
						valuetype = "BoolProperty"
					},
					["SetTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TurnOn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TurnOff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsTurnedOn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsTurnedOff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["EVENT_ON_TURN_OFF"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["EVENT_ON_TURN_ON"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TransformComponent"] = {
				type = "class",
				inherits = "ents.BaseTransformComponent",
				description = [[]],
				childs = {
					["LocalToWorld"] = {
						type = "method",
						description = [[]],
						args = "(origin: vector.Vector,rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetLastMoveTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "(hOther: ents.BaseTransformComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetEyePos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetDotProduct"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: bool)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetDirection"] = {
						type = "method",
						description = [[]],
						args = "(hOther: ents.BaseTransformComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaxAxisScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WorldToLocal"] = {
						type = "method",
						description = [[]],
						args = "(origin: vector.Vector,rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetYaw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetRoll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetYaw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRoll"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAbsMaxAxisScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetDistance"] = {
						type = "method",
						description = [[]],
						args = "(hOther: ents.BaseTransformComponent)",
						returns = "(float)",
						valuetype = "float"
					}
				}
			},
			["WheelComponent"] = {
				type = "class",
				inherits = "ents.BaseWheelComponent",
				description = [[]],
				childs = {

				}
			},
			["LightSpotVolComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvLightSpotVolComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspDistortionComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSoundDspComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspEAXReverbComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSoundDspComponent",
				description = [[]],
				childs = {

				}
			},
			["SoundDspFlangerComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvSoundDspComponent",
				description = [[]],
				childs = {

				}
			},
			["CameraComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvCameraComponent",
				description = [[]],
				childs = {
					["UpdateViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNearZProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["GetFarZProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["GetFOVProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["GetAspectRatioProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::FloatProperty)",
						valuetype = "FloatProperty"
					},
					["SetAspectRatio"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPlaneBoundaries"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablevector.Vector,tablevector.Vector)",
						valuetype = "Vector>"
					},
					["SetNearZ"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFOV"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetFarZ"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFrustumNeighbors"] = {
						type = "method",
						description = [[]],
						args = "(planeID: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFOVRad"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetNearZ"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetAspectRatio"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetFarZ"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetFrustumPlanes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablemath.Plane)",
						valuetype = "Plane>"
					},
					["GetFrustumPoints"] = {
						type = "method",
						description = [[]],
						args = "(arg1: tablevector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFarPlaneCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["LookAt"] = {
						type = "method",
						description = [[]],
						args = "(lookAtPos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNearPlaneCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["DepthToDistance"] = {
						type = "method",
						description = [[]],
						args = "(depth: float,nearZ: float,farZ: float)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetPlaneCenter"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetFarPlaneBoundaries"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class std::array<struct glm::vec<3,float,0>,4>)",
						valuetype = "vec<3,float,0>,4>"
					},
					["UpdateProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNearPlaneBoundaries"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class std::array<struct glm::vec<3,float,0>,4>)",
						valuetype = "vec<3,float,0>,4>"
					},
					["SetProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNearPlaneBounds"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFarPlaneBounds"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNearPlanePoint"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetFarPlanePoint"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetPlanePoint"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: math.Vector2)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetFrustumPlaneCornerPoints"] = {
						type = "method",
						description = [[]],
						args = "(planeA: int32,planeB: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CreateFrustumKDop"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2,arg2: math.Vector2,arg3: tablemath.Plane)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CreateFrustumMesh"] = {
						type = "method",
						description = [[]],
						args = "(uvStart: math.Vector2,uvEnd: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ScreenSpaceToWorldSpace"] = {
						type = "method",
						description = [[]],
						args = "(uv: math.Vector2,width: float,height: float)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["WorldSpaceToScreenSpace"] = {
						type = "method",
						description = [[]],
						args = "(point: vector.Vector)",
						returns = "(math.Vector2,float)",
						valuetype = "Vector2"
					},
					["WorldSpaceToScreenSpaceDirection"] = {
						type = "method",
						description = [[]],
						args = "(dir: vector.Vector)",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["CalcScreenSpaceDistance"] = {
						type = "method",
						description = [[]],
						args = "(point: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["CalcRayDirection"] = {
						type = "method",
						description = [[]],
						args = "(uv: math.Vector2)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["GetViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["UpdateMatrices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFOV"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetProjectionMatrixProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Matrix4Property)",
						valuetype = "Matrix4Property"
					},
					["GetViewMatrixProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Matrix4Property)",
						valuetype = "Matrix4Property"
					},
					["DEFAULT_FAR_Z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEFAULT_FOV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEFAULT_NEAR_Z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEFAULT_VIEWMODEL_FOV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DecalComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvDecalComponent",
				description = [[]],
				childs = {
					["CreateFromProjection"] = {
						type = "method",
						description = [[]],
						args = "(tMeshes: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DebugDraw"] = {
						type = "method",
						description = [[]],
						args = "(duration: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ExplosionComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvExplosionComponent",
				description = [[]],
				childs = {

				}
			},
			["FogControllerComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvFogControllerComponent",
				description = [[]],
				childs = {

				}
			},
			["LightPointComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvLightPointComponent",
				description = [[]],
				childs = {

				}
			},
			["LightSpotComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvLightSpotComponent",
				description = [[]],
				childs = {
					["SetOuterCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOuterCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetInnerCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInnerCutoffAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					}
				}
			},
			["MicrophoneComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvMicrophoneComponent",
				description = [[]],
				childs = {

				}
			},
			["vrp"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["FlexComponent"] = {
				type = "class",
				inherits = "ents.BaseFlexComponent",
				description = [[]],
				childs = {
					["GetFlexAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["GetFlexAnimationCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetFlexController"] = {
						type = "method",
						description = [[]],
						args = "(flexName: string,value: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetScaledFlexController"] = {
						type = "method",
						description = [[]],
						args = "(flexControllerId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFlexControllerScale"] = {
						type = "method",
						description = [[]],
						args = "(scale: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexControllerScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcFlexValue"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "([float])",
						valuetype = "float"
					},
					["GetFlexWeights"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexWeight"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexAnimationCycle"] = {
						type = "method",
						description = [[]],
						args = "(id: string)",
						returns = "(float)",
						valuetype = "float"
					},
					["SetFlexWeight"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32,weight: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearFlexWeightOverride"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasFlexWeightOverride"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFlexWeightOverride"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32,weight: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["StopFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(id: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFlexAnimationCycle"] = {
						type = "method",
						description = [[]],
						args = "(id: string,cycle: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexController"] = {
						type = "method",
						description = [[]],
						args = "(flexController: string)",
						returns = "([float])",
						valuetype = "float"
					},
					["PlayFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(id: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFlexAnimationPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(id: string,playbackRate: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EVENT_ON_FLEX_CONTROLLERS_UPDATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ReflectionProbeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetIBLStrength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetIBLStrength"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIBLMaterialFilePath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["CaptureIBLReflectionsFromScene"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RequiresRebuild"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["RaytracingComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["OcclusionCullerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["PropComponent"] = {
				type = "class",
				inherits = "ents.BasePropComponent",
				description = [[]],
				childs = {

				}
			},
			["PBRConverterComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GenerateAmbientOcclusionMaps"] = {
						type = "method",
						description = [[]],
						args = "(ent: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ShadowMapComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["WaterSurfaceComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ListenerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["ViewModelComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetWeapon"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.WeaponComponent)",
						valuetype = "WeaponComponent"
					},
					["GetPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.PlayerComponent)",
						valuetype = "PlayerComponent"
					}
				}
			},
			["SoftBodyComponent"] = {
				type = "class",
				inherits = "ents.BaseSoftBodyComponent",
				description = [[]],
				childs = {

				}
			},
			["RendererComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["InitializeRenderTarget"] = {
						type = "method",
						description = [[]],
						args = "(scene: ents.SceneComponent,width: uint32,height: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHDRPresentationTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["GetSceneTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["GetPresentationTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["EyeComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["SetViewTarget"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearViewTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEyeballState"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "(ents.EyeComponent.EyeballState)",
						valuetype = "EyeballState"
					},
					["GetEyeJitter"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "([math.Vector2])",
						valuetype = "Vector2"
					},
					["SetBlinkDuration"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEyeShift"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32,eyeShift: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEyeJitter"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32,eyeJitter: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEyeSize"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "([float])",
						valuetype = "float"
					},
					["SetEyeSize"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32,eyeSize: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetIrisDilation"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32,dilation: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEyeShift"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "([math.Vector])",
						valuetype = "Vector"
					},
					["IsBlinkingEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetBlinkingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBlinkDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["CalcEyeballPose"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "(phys.Transform,phys.Transform)",
						valuetype = "Transform"
					},
					["GetIrisDilation"] = {
						type = "method",
						description = [[]],
						args = "(eyeIndex: uint32)",
						returns = "([float])",
						valuetype = "float"
					},
					["GetViewTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["GetEyePose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([phys.Transform])",
						valuetype = "Transform"
					},
					["EyeballState"] = {
						type = "class",
						description = [[]],
						childs = {
							["right"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisProjectionU"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["forward"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["origin"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["irisProjectionV"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["up"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["WeatherComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvWeatherComponent",
				description = [[]],
				childs = {

				}
			},
			["BSPComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["BSPLeafComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["SkyCameraComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["EnvTimescaleComponent"] = {
				type = "class",
				inherits = "ents.BaseEnvTimescaleComponent",
				description = [[]],
				childs = {

				}
			},
			["ShadowManagerComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {

				}
			},
			["LightMapReceiverComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["UpdateLightmapUvData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["VertexAnimatedComponent"] = {
				type = "class",
				inherits = "ents.EntityComponent",
				description = [[]],
				childs = {
					["GetVertexAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.SwapBuffer)",
						valuetype = "SwapBuffer"
					},
					["GetLocalVertexPosition"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: Model.Mesh.Sub,vertexId: uint32)",
						returns = "([math.Vector[,math.Vector])",
						valuetype = "Vector"
					},
					["UpdateVertexAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "(drawCmd: prosper.CommandBuffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexAnimationBufferMeshOffset"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: Model.Mesh.Sub)",
						returns = "([uint32[,uint32])",
						valuetype = "uint32"
					}
				}
			},

		}
	},
	["phys"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_convex_hull_shape"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,material: phys.Material)",
				returns = "(phys.ConvexHullShape)",
				valuetype = "ConvexHullShape"
			},
			["create_capsule_shape"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,halfWidth: float,halfHeight: float,material: phys.Material)",
				returns = "(phys.ConvexShape)",
				valuetype = "ConvexShape"
			},
			["create_heightfield_terrain_shape"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,width: float,length: float,maxHeight: float,upAxis: float,material: phys.Material)",
				returns = "(phys.Shape)",
				valuetype = "Shape"
			},
			["create_box_shape"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,halfExtents: vector.Vector,material: phys.Material)",
				returns = "(phys.ConvexShape)",
				valuetype = "ConvexShape"
			},
			["create_sphere_shape"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,radius: float,material: phys.Material)",
				returns = "(phys.ConvexShape)",
				valuetype = "ConvexShape"
			},
			["create_compound_shape"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,shapes: tablephys.Shape)",
				returns = "(phys.CompoundShape)",
				valuetype = "CompoundShape"
			},
			["create_cylinder_shape"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,radius: float,height: float,material: phys.Material)",
				returns = "(phys.ConvexShape)",
				valuetype = "ConvexShape"
			},
			["create_rigid_body"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,shape: phys.Shape,dynamic: bool)",
				returns = "(phys.RigidBody)",
				valuetype = "RigidBody"
			},
			["create_fixed_constraint"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,bodyA: phys.RigidBody,pivotA: vector.Vector,rotA: math.QuaternionInternal,bodyB: phys.RigidBody,pivotB: vector.Vector,rotB: math.QuaternionInternal)",
				returns = "(phys.FixedConstraint)",
				valuetype = "FixedConstraint"
			},
			["create_ghost_object"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,shape: phys.Shape)",
				returns = "(phys.GhostObj)",
				valuetype = "GhostObj"
			},
			["create_plane"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,n: vector.Vector,d: float,material: phys.Material)",
				returns = "(phys.CollisionObj)",
				valuetype = "CollisionObj"
			},
			["create_ballsocket_constraint"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,bodyA: phys.RigidBody,pivotA: vector.Vector,bodyB: phys.RigidBody,pivotB: vector.Vector)",
				returns = "(phys.BallSocketConstraint)",
				valuetype = "BallSocketConstraint"
			},
			["raycast"] = {
				type = "function",
				description = [[]],
				args = "(game: class Game,traceData: phys.RayCastData)",
				returns = "(variantbool|tablephys.RayCastResult|phys.RayCastResult)",
				valuetype = "RayCastResult>"
			},
			["create_hinge_constraint"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,bodyA: phys.RigidBody,pivotA: vector.Vector,bodyB: phys.RigidBody,pivotB: vector.Vector,axis: vector.Vector)",
				returns = "(phys.HingeConstraint)",
				valuetype = "HingeConstraint"
			},
			["calc_torque_from_angular_velocity"] = {
				type = "function",
				description = [[]],
				args = "(angVel: vector.Vector,invInertiaTensor: math.Mat3,dt: float)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["create_slider_constraint"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,bodyA: phys.RigidBody,pivotA: vector.Vector,rotA: math.QuaternionInternal,bodyB: phys.RigidBody,pivotB: vector.Vector,rotB: math.QuaternionInternal)",
				returns = "(phys.SliderConstraint)",
				valuetype = "SliderConstraint"
			},
			["calc_linear_velocity_from_force"] = {
				type = "function",
				description = [[]],
				args = "(force: vector.Vector,mass: float,dt: float)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["create_conetwist_constraint"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,bodyA: phys.RigidBody,pivotA: vector.Vector,rotA: math.QuaternionInternal,bodyB: phys.RigidBody,pivotB: vector.Vector,rotB: math.QuaternionInternal)",
				returns = "(phys.ConeTwistConstraint)",
				valuetype = "ConeTwistConstraint"
			},
			["create_dof_constraint"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,bodyA: phys.RigidBody,pivotA: vector.Vector,rotA: math.QuaternionInternal,bodyB: phys.RigidBody,pivotB: vector.Vector,rotB: math.QuaternionInternal)",
				returns = "(phys.DoFConstraint)",
				valuetype = "DoFConstraint"
			},
			["create_dof_spring_constraint"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,bodyA: phys.RigidBody,pivotA: vector.Vector,rotA: math.QuaternionInternal,bodyB: phys.RigidBody,pivotB: vector.Vector,rotB: math.QuaternionInternal)",
				returns = "(phys.DoFSpringConstraint)",
				valuetype = "DoFSpringConstraint"
			},
			["create_surface_material"] = {
				type = "function",
				description = [[]],
				args = "(game: class Game,name: string,friction: float,restitution: float)",
				returns = "(game.SurfaceMaterial)",
				valuetype = "SurfaceMaterial"
			},
			["create_material"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,staticFriction: float,dynamicFriction: float,restitution: float)",
				returns = "(phys.Material)",
				valuetype = "Material"
			},
			["create_box_controller"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,halfExtents: vector.Vector,stepHeight: float,slopeLimit: float,startTransform: phys.Transform)",
				returns = "(phys.Controller)",
				valuetype = "Controller"
			},
			["create_capsule_controller"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,halfWidth: float,halfHeight: float,stepHeight: float,slopeLimit: float,startTransform: phys.Transform)",
				returns = "(phys.Controller)",
				valuetype = "Controller"
			},
			["create_vehicle"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment,vhcCreateInfo: phys.VehicleCreateInfo)",
				returns = "(phys.Vehicle)",
				valuetype = "Vehicle"
			},
			["get_surface_material"] = {
				type = "function",
				description = [[]],
				args = "(arg0: class Game,arg1: uint32)",
				returns = "(game.SurfaceMaterial)",
				valuetype = "SurfaceMaterial"
			},
			["get_surface_materials"] = {
				type = "function",
				description = [[]],
				args = "(game: class Game)",
				returns = "(tablegame.SurfaceMaterial)",
				valuetype = "SurfaceMaterial>"
			},
			["get_generic_material"] = {
				type = "function",
				description = [[]],
				args = "(env: class pragma::physics::IEnvironment)",
				returns = "(phys.Material)",
				valuetype = "Material"
			},
			["calc_force_from_linear_velocity"] = {
				type = "function",
				description = [[]],
				args = "(linVel: vector.Vector,mass: float,dt: float)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["overlap"] = {
				type = "function",
				description = [[]],
				args = "(game: class Game,traceData: phys.RayCastData)",
				returns = "(variantbool|tablephys.RayCastResult|phys.RayCastResult)",
				valuetype = "RayCastResult>"
			},
			["calc_angular_velocity_from_torque"] = {
				type = "function",
				description = [[]],
				args = "(torque: vector.Vector,invInertiaTensor: math.Mat3,dt: float)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["sweep"] = {
				type = "function",
				description = [[]],
				args = "(game: class Game,traceData: phys.RayCastData)",
				returns = "(variantbool|tablephys.RayCastResult|phys.RayCastResult)",
				valuetype = "RayCastResult>"
			},
			["SoftBodyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetMaterialStiffnessCoefficients"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32,linear: float,angular: float,volume: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterialStiffnessCoefficients"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32)",
						returns = "([float[,float[,float])",
						valuetype = "float"
					},
					["anchorsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dragCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["rigidContactsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["kineticContactsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softContactsHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dampingCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidImpulseSplitK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dynamicFrictionCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["liftCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["volumeConversationCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidImpulseSplitR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidImpulseSplitS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsKineticHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsRigidHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["softVsSoftHardness"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["pressureCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["velocitiesCorrectionFactor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bendingConstraintsDistance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["clusterCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["poseMatchingCoefficient"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxClusterIterations"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SoftBody"] = {
				type = "class",
				inherits = "phys.CollisionObj phys.Base",
				description = [[]],
				childs = {
					["SetFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPressureCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAnchorsHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetKineticContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVolume"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRigidContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDynamicFrictionCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetHitFraction"] = {
						type = "method",
						description = [[]],
						args = "(fraction: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAnisotropicFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDampingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftVsRigidImpulseSplitS"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLiftCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDynamicFrictionCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPoseMatchingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPressureCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAeroForceToFace"] = {
						type = "method",
						description = [[]],
						args = "(face: uint32,force: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftVsKineticHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(rest: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftVsRigidImpulseSplitK"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetVelocitiesCorrectionFactor"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftVsRigidImpulseSplitR"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftVsSoftHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetVolumeConversationCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnchorsHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRigidContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRollingFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetKineticContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftVsRigidHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLiftCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVelocitiesCorrectionFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPoseMatchingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(force: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftContactsHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftVsKineticHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterialLinearStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftVsRigidImpulseSplitK"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVolumeConversationCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftVsSoftHardness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftVsRigidImpulseSplitS"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaterialAngularStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32,val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaterialLinearStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32,val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaterialVolumeStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32,val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterialAngularStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterialVolumeStiffnessCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(matId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnisotropicFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AppendAnchor"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32,hRigidBody: phys.RigidBody)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MeshVertexIndexToLocalVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(meshVertexIndex: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LocalVertexIndexToMeshVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(localIndex: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LocalVertexIndexToNodeIndex"] = {
						type = "method",
						description = [[]],
						args = "(localVertexIndex: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["NodeIndexToLocalVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(nodeIndex: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDensity"] = {
						type = "method",
						description = [[]],
						args = "(density: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MeshVertexIndexToNodeIndex"] = {
						type = "method",
						description = [[]],
						args = "(meshVertexIndex: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["NodeIndexToMeshVertexIndex"] = {
						type = "method",
						description = [[]],
						args = "(nodeIndex: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRestLengthScale"] = {
						type = "method",
						description = [[]],
						args = "(scale: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAeroForceToNode"] = {
						type = "method",
						description = [[]],
						args = "(node: uint32,force: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHitFraction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRollingFriction"] = {
						type = "method",
						description = [[]],
						args = "(friction: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRestLengthScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNodeCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftVsRigidImpulseSplitR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDampingCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftVsRigidHardness"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWindVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetWindVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetVolumeDensity"] = {
						type = "method",
						description = [[]],
						args = "(density: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetVolumeMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["TriangleShape"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {

				}
			},
			["Shape"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsConvex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["CalculateLocalInertia"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["IsTriangleShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsHeightfield"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsConvexHull"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["Heightfield"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetMaxHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetUpAxis"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint8)",
						valuetype = "uint8"
					},
					["SetHeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32,arg3: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["CapsuleShape"] = {
				type = "class",
				inherits = "phys.ConvexShape phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetHalfHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetRadius"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					}
				}
			},
			["ScaledTransform"] = {
				type = "class",
				inherits = "phys.Transform",
				description = [[]],
				childs = {
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["CompoundShape"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {

				}
			},
			["RayCastResult"] = {
				type = "class",
				description = [[]],
				childs = {
					["HIT_TYPE_BLOCK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["HIT_TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["HIT_TYPE_TOUCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["startPosition"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["subMesh"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mesh"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["colObj"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["material"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["materialName"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normal"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["distance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["entity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["hitType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physObj"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["fraction"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ConvexHullShape"] = {
				type = "class",
				inherits = "phys.ConvexShape phys.Shape phys.Base",
				description = [[]],
				childs = {
					["AddTriangle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32,arg3: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReservePoints"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddPoint"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReserveTriangles"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Build"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["VehicleCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetWheels"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablephys.WheelCreateInfo)",
						valuetype = "WheelCreateInfo>"
					},
					["AddAntiRollBar"] = {
						type = "method",
						description = [[]],
						args = "(antiRollBar: struct pragma::physics::VehicleCreateInfo::AntiRollBar)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAntiRollBars"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablestruct pragma::physics::VehicleCreateInfo::AntiRollBar)",
						valuetype = "AntiRollBar>"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddWheel"] = {
						type = "method",
						description = [[]],
						args = "(wheelCreateInfo: phys.WheelCreateInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WHEEL_DRIVE_FOUR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WHEEL_DRIVE_FRONT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WHEEL_DRIVE_REAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxEngineTorque"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["actor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["chassis"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["gearSwitchTime"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxEngineRotationSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["wheelDrive"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["clutchStrength"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["gravityFactor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SuspensionInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["camberAngleAtMaxCompression"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["maxCompression"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["springStrength"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["springDamperRate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["camberAngleAtRest"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["maxDroop"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["camberAngleAtMaxDroop"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["BoxShape"] = {
				type = "class",
				inherits = "phys.ConvexShape phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetHalfExtents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					}
				}
			},
			["Vehicle"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["GetCollisionObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.CollisionObj)",
						valuetype = "CollisionObj"
					},
					["SetHandBrakeFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetForwardSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["ChangeToGear"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::physics::IVehicle::Gear)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetUseDigitalInputs"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBrakeFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAccelerationFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetGearDown"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSteerFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentGear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::physics::IVehicle::Gear)",
						valuetype = "Gear"
					},
					["SetGear"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::physics::IVehicle::Gear)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetGearUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetGearSwitchTime"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetUseAutoGears"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ShouldUseAutoGears"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetEngineRotationSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetRestState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ResetControls"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetWheelRotationAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetWheelRotationSpeed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsInAir"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetWheelCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSidewaysSpeed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GEAR_TWENTYSIXTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_THIRTIETH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_ELEVENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_EIGHTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYSECOND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_EIGHTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_NEUTRAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FIFTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FIFTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FIRST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FOURTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_FOURTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_NINETEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_NINTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYSEVENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_REVERSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYNINTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SECOND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SEVENTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SEVENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SIXTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_SIXTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_THIRD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_THIRTEENTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWELFTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTIETH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYEIGHTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYFIFTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYFIRST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYFOURTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GEAR_TWENTYTHIRD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DoFSpringConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetAngularUpperLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(angularUpper: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngle"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalculateTransforms"] = {
						type = "method",
						description = [[]],
						args = "(transformA: phys.Transform,transformB: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStiffness"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,stiffness: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetERP"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCalculatedTransformA"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetServoTarget"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,target: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCalculatedTransformB"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAxis"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFrameOffsetA"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFrameOffsetB"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRelativePivotPosition"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFrames"] = {
						type = "method",
						description = [[]],
						args = "(transformA: phys.Transform,transformB: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(linearLower: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAxis"] = {
						type = "method",
						description = [[]],
						args = "(axis1: vector.Vector,axis2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,lo: float,hi: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(linearUpper: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStopCFM"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,velocity: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(angularLower: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,damping: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularLowerLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(angularLower: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularLowerLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(angularUpper: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularUpperLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLimitReversed"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,lo: float,hi: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLimited"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint32,type: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStopCFM"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRotationOrder"] = {
						type = "method",
						description = [[]],
						args = "(rotationOrder: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRotationOrder"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBounce"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,bounce: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EnableMotor"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,enable: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetServo"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,enable: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,force: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EnableSpring"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,enable: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEquilibriumPoint"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetERP"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStopERP"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStopERP"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCFM"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32,value: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCFM"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,axis: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ConvexShape"] = {
				type = "class",
				inherits = "phys.Shape phys.Base",
				description = [[]],
				childs = {
					["GetCollisionMesh"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(Model.CollisionMesh)",
						valuetype = "CollisionMesh"
					}
				}
			},
			["IKController"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(mapstring|string)",
						valuetype = "map<string,string>"
					},
					["GetEffectorName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetChainLength"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string,value: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChainLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetEffectorName"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMethod"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum util::ik::Method)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMethod"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum util::ik::Method)",
						valuetype = "Method"
					},
					["GetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "([string])",
						valuetype = "string"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "(arg2: mapstring|string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["METHOD_DEFAULT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_JACOBIAN_TRANSPOSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_PSEUDOINVERSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_SELECTIVELY_DAMPED_LEAST_SQUARE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_DAMPED_LEAST_SQUARES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["METHOD_DAMPED_LEAST_SQUARES_WITH_SINGULAR_VALUE_DECOMPOSITION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Base"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["IKJacobian"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetJtargetActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcDeltaThetasDLS"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcDeltaThetas"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcDeltaThetasPseudoinverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcDeltaThetasDLSwithSVD"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ZeroDeltaThetas"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcDeltaThetasTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcDeltaThetasSDLS"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateThetas"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateThetaDot"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdatedSClampValue"] = {
						type = "method",
						description = [[]],
						args = "(vTargets: tablevector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRowCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetColumnCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ComputeJacobian"] = {
						type = "method",
						description = [[]],
						args = "(vTargets: tablevector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetJendActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ChassisCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddShapeIndex"] = {
						type = "method",
						description = [[]],
						args = "(shapeIndex: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShapeIndices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableuint32)",
						valuetype = "table<uint32>"
					},
					["momentOfInertia"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["centerOfMass"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ContactInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetContactPoints"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shape0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shape1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GetContactPoint"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["collisionObj0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["GetContactPointCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["collisionObj1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ContactPoint"] = {
				type = "class",
				description = [[]],
				childs = {
					["impulse"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["material0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["material1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["distance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normal"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["HingeConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {

				}
			},
			["CollisionObj"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsGhostObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(mask: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsSoftBody"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsSimulationEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsAsleep"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EnableSimulation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Spawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsRigidBody"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsAlwaysAwake"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(origin: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoundingSphere"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DisableSimulation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetActivationState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WakeUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetActivationState"] = {
						type = "method",
						description = [[]],
						args = "(state: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWorldTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetWorldTransform"] = {
						type = "method",
						description = [[]],
						args = "(t: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PutToSleep"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAlwaysAwake"] = {
						type = "method",
						description = [[]],
						args = "(alwaysAwake: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Object"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetCollisionFilter"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum CollisionMask,arg2: enum CollisionMask)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetGroundEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["IsGroundWalkable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum CollisionMask)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearForces"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum CollisionMask)",
						valuetype = "enum CollisionMask"
					},
					["GetOwner"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.EntityComponent)",
						valuetype = "EntityComponent"
					},
					["GetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["GetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyImpulse"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGroundFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float)",
						valuetype = "float"
					},
					["AddAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ApplyTorqueImpulse"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGroundPhysCollisionObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.CollisionObj)",
						valuetype = "CollisionObj"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyTorque"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGroundPhysObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.Object)",
						valuetype = "Object"
					},
					["GetCollisionObjects"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablephys.CollisionObj)",
						valuetype = "CollisionObj>"
					},
					["GetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum CollisionMask)",
						valuetype = "enum CollisionMask"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsOnGround"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetSleepingThresholds"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTotalTorque"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetGroundVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetTotalForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetGroundSurfaceMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WakeUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PutToSleep"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["GhostObj"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["RayCastData"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetSourceRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetShape"] = {
						type = "method",
						description = [[]],
						args = "(shape: phys.ConvexShape)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTargetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTarget"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFilter"] = {
						type = "method",
						description = [[]],
						args = "(object: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTargetTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSourceTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionFilterGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTargetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSource"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSourceRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionFilterMask"] = {
						type = "method",
						description = [[]],
						args = "(mask: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTargetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSourceOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["RigidBody"] = {
				type = "class",
				inherits = "phys.CollisionObj phys.Base",
				description = [[]],
				childs = {
					["GetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneID"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(linDamping: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsKinematic"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyForce"] = {
						type = "method",
						description = [[]],
						args = "(force: vector.Vector,relPos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(angDamping: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyImpulse"] = {
						type = "method",
						description = [[]],
						args = "(impulse: vector.Vector,relPos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(threshold: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyTorque"] = {
						type = "method",
						description = [[]],
						args = "(torque: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInertia"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInvInertiaTensorWorld"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(linDamping: float,angDamping: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearForces"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTotalForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTotalTorque"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBoneID"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetKinematic"] = {
						type = "method",
						description = [[]],
						args = "(bKinematic: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "(threshold: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSleepingThresholds"] = {
						type = "method",
						description = [[]],
						args = "(linear: float,angular: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSleepingThreshold"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularVelocity"] = {
						type = "method",
						description = [[]],
						args = "(vel: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCenterOfMassOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyTorqueImpulse"] = {
						type = "method",
						description = [[]],
						args = "(torque: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCenterOfMassOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Material"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["SetFriction"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetSurfaceMaterial"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.SurfaceMaterial)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSurfaceMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.SurfaceMaterial)",
						valuetype = "SurfaceMaterial"
					}
				}
			},
			["DoFConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["GetAngularForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "(damping: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsAngularMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentAngularAccumulatedImpulse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentAngularLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(velocity: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentAngularPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentAngularLimitError"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(force: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearDamping"] = {
						type = "method",
						description = [[]],
						args = "(damping: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(velocity: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "(softness: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "(tolerance: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularMaxLimitForce"] = {
						type = "method",
						description = [[]],
						args = "(force: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLinearMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(axis: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearMotorEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentLinearDifference"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentLinearLimitError"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentLinearLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentLinearAccumulatedImpulse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularLowerLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularLimitForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLinearLimit"] = {
						type = "method",
						description = [[]],
						args = "(lower: vector.Vector,upper: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularLimit"] = {
						type = "method",
						description = [[]],
						args = "(lower: math.EulerAngles,upper: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetlinearUpperLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "(softness: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularTargetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularMaxMotorForce"] = {
						type = "method",
						description = [[]],
						args = "(force: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularMaxLimitForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularForceMixingFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularLimitSoftness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularLimitErrorTolerance"] = {
						type = "method",
						description = [[]],
						args = "(tolerance: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngularRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngularRestitutionFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["IKTree"] = {
				type = "class",
				description = [[]],
				childs = {
					["Print"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InsertRightSibling"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.IKTree.Node,arg2: phys.IKTree.Node)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetJoint"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(phys.IKTree.Node)",
						valuetype = "Node"
					},
					["UnFreeze"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEffector"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(phys.IKTree.Node)",
						valuetype = "Node"
					},
					["GetSuccessor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.IKTree.Node)",
						returns = "(phys.IKTree.Node)",
						valuetype = "Node"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.IKTree.Node)",
						returns = "(phys.IKTree.Node)",
						valuetype = "Node"
					},
					["GetEffectorPosition"] = {
						type = "method",
						description = [[]],
						args = "(nodeIdx: uint32)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetRoot"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.IKTree.Node)",
						valuetype = "Node"
					},
					["GetNodeCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetEffectorCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetJointCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["Compute"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InsertRoot"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.IKTree.Node)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InsertLeftChild"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.IKTree.Node,arg2: phys.IKTree.Node)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Node"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetTheta"] = {
								type = "method",
								description = [[]],
								args = "(arg1: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetEffectorIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(int32)",
								valuetype = "int32"
							},
							["ComputeS"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ComputeW"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["IsJoint"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(bool)",
								valuetype = "bool"
							},
							["IsEffector"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(bool)",
								valuetype = "bool"
							},
							["UnFreeze"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Freeze"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["IsFrozen"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(bool)",
								valuetype = "bool"
							},
							["AddToTheta"] = {
								type = "method",
								description = [[]],
								args = "(delta: float)",
								returns = "(float)",
								valuetype = "float"
							},
							["GetJointIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(int32)",
								valuetype = "int32"
							},
							["PrintNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetLocalTransform"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(phys.Transform)",
								valuetype = "Transform"
							},
							["SetAttach"] = {
								type = "method",
								description = [[]],
								args = "(attach: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetRotationAxis"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(vector.Vector)",
								valuetype = "Vector"
							},
							["SetRotationAxis"] = {
								type = "method",
								description = [[]],
								args = "(axis: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetLeftChildNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(phys.IKTree.Node)",
								valuetype = "Node"
							},
							["UpdateTheta"] = {
								type = "method",
								description = [[]],
								args = "(delta: float)",
								returns = "(float)",
								valuetype = "float"
							},
							["GetRightChildNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(phys.IKTree.Node)",
								valuetype = "Node"
							},
							["InitNode"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetAttach"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(vector.Vector)",
								valuetype = "Vector"
							},
							["GetRelativePosition"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(vector.Vector)",
								valuetype = "Vector"
							},
							["GetTheta"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(float)",
								valuetype = "float"
							},
							["GetS"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(vector.Vector)",
								valuetype = "Vector"
							},
							["GetW"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(vector.Vector)",
								valuetype = "Vector"
							},
							["GetMinTheta"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(float)",
								valuetype = "float"
							},
							["GetMaxTheta"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(float)",
								valuetype = "float"
							},
							["GetRestAngle"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(float)",
								valuetype = "float"
							},
							["PURPOSE_JOINT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["PURPOSE_EFFECTOR"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["FixedConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {

				}
			},
			["SliderConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetDamping"] = {
						type = "method",
						description = [[]],
						args = "(damping: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLimits"] = {
						type = "method",
						description = [[]],
						args = "(lower: float,upper: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLimits"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDamping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(restitution: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DisableLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftness"] = {
						type = "method",
						description = [[]],
						args = "(softness: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ConeTwistConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["BallSocketConstraint"] = {
				type = "class",
				inherits = "phys.Constraint",
				description = [[]],
				childs = {

				}
			},
			["Constraint"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetSourceTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTargetTransform"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DisableCollisions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBreakTorque"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSourceRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTargetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSourcePosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EnableCollisions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEnabled"] = {
						type = "method",
						description = [[]],
						args = "(b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSourceActor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTargetActor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTargetPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBreakForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBreakTorque"] = {
						type = "method",
						description = [[]],
						args = "(threshold: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBreakForce"] = {
						type = "method",
						description = [[]],
						args = "(threshold: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Transform"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(tOther: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetIdentity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsIdentity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["TranslateGlobal"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RotateLocal"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TransformGlobal"] = {
						type = "method",
						description = [[]],
						args = "(t2: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TransformLocal"] = {
						type = "method",
						description = [[]],
						args = "(t2: phys.Transform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMatrix"] = {
						type = "method",
						description = [[]],
						args = "(m: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Interpolate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.Transform,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InterpolateToIdentity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.Transform)",
						valuetype = "Transform"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.Transform)",
						valuetype = "Transform"
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["TranslateLocal"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RotateGlobal"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["yaw"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["roll"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["pitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Controller"] = {
				type = "class",
				inherits = "phys.Base",
				description = [[]],
				childs = {
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetDimensions"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetUpDirection"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFootPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDimensions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["AddMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStepHeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Spawn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGroundShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.Shape)",
						valuetype = "Shape"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSlopeLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCollisionObject"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.CollisionObj)",
						valuetype = "CollisionObj"
					},
					["GetFootPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetGroundTouchPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([vector.Vector])",
						valuetype = "Vector"
					},
					["GetShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.ConvexShape)",
						valuetype = "ConvexShape"
					},
					["GetCollisionFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::physics::IController::CollisionFlags)",
						valuetype = "CollisionFlags"
					},
					["Move"] = {
						type = "method",
						description = [[]],
						args = "(disp: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGroundBody"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.RigidBody)",
						valuetype = "RigidBody"
					},
					["GetGroundMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.Material)",
						valuetype = "Material"
					},
					["IsTouchingGround"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetGroundTouchNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([vector.Vector])",
						valuetype = "Vector"
					},
					["GetMoveVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetStepHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					}
				}
			},
			["WheelCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_BIT_FRONT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_LEFT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_REAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_RIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxHandBrakeTorque"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxSteeringAngle"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["momentOfInertia"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["shapeIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["radius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["chassisOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["suspension"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tireType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["coroutine"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["angle"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_from_string"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(math.EulerAngles)",
				valuetype = "EulerAngles"
			},
			["random"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(math.EulerAngles)",
				valuetype = "EulerAngles"
			}
		}
	},
	["debug"] = {
		type = "lib",
		description = [[]],
		childs = {
			["stackdump"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["behavior_task_decorator_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(decoratorType: enum pragma::ai::TaskDecorator::DecoratorType)",
				returns = "(string)",
				valuetype = "string"
			},
			["disposition_to_string"] = {
				type = "function",
				description = [[]],
				args = "(disposition: enum DISPOSITION)",
				returns = "(string)",
				valuetype = "string"
			},
			["task_to_string"] = {
				type = "function",
				description = [[]],
				args = "(task: enum pragma::ai::Task)",
				returns = "(string)",
				valuetype = "string"
			},
			["draw_lines"] = {
				type = "function",
				description = [[]],
				args = "(linePoints: tablemath.Vector,renderInfo: debug.DrawInfo)",
				returns = "(debug.RendererObject)",
				valuetype = "RendererObject"
			},
			["memory_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(memoryType: enum pragma::ai::Memory::MemoryType)",
				returns = "(string)",
				valuetype = "string"
			},
			["npc_state_to_string"] = {
				type = "function",
				description = [[]],
				args = "(npcState: enum NPCSTATE)",
				returns = "(string)",
				valuetype = "string"
			},
			["draw_line"] = {
				type = "function",
				description = [[]],
				args = "(start: vector.Vector,end: vector.Vector,renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_point"] = {
				type = "function",
				description = [[]],
				args = "(renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_frustum"] = {
				type = "function",
				description = [[]],
				args = "(points: tablemath.Vector,renderInfo: debug.DrawInfo)",
				returns = "(debug.RendererObject)",
				valuetype = "RendererObject"
			},
			["draw_box"] = {
				type = "function",
				description = [[]],
				args = "(min: vector.Vector,max: vector.Vector,renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_sphere"] = {
				type = "function",
				description = [[]],
				args = "(radius: float,renderInfo: debug.DrawInfo,recursionLevel: uint32)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_cone"] = {
				type = "function",
				description = [[]],
				args = "(dist: float,renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_truncated_cone"] = {
				type = "function",
				description = [[]],
				args = "(startRadius: float,dist: float,endRadius: float,renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_cylinder"] = {
				type = "function",
				description = [[]],
				args = "(dist: float,radius: float,renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_pose"] = {
				type = "function",
				description = [[]],
				args = "(renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_text"] = {
				type = "function",
				description = [[]],
				args = "(text: string,size: float,renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_path"] = {
				type = "function",
				description = [[]],
				args = "(points: ,renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_spline"] = {
				type = "function",
				description = [[]],
				args = "(points: ,segmentCount: uint32,renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["draw_plane"] = {
				type = "function",
				description = [[]],
				args = "(renderInfo: debug.DrawInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["behavior_task_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(type: enum pragma::ai::BehaviorNode::Type)",
				returns = "(string)",
				valuetype = "string"
			},
			["move_state_to_string"] = {
				type = "function",
				description = [[]],
				args = "(v: enum pragma::BaseAIComponent::MoveResult)",
				returns = "(string)",
				valuetype = "string"
			},
			["beep"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["behavior_task_result_to_string"] = {
				type = "function",
				description = [[]],
				args = "(result: enum pragma::ai::BehaviorNode::Result)",
				returns = "(string)",
				valuetype = "string"
			},
			["behavior_selector_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(selectorType: enum pragma::ai::SelectorType)",
				returns = "(string)",
				valuetype = "string"
			},
			["draw_mesh"] = {
				type = "function",
				description = [[]],
				args = "(verts: tablemath.Vector,renderInfo: debug.DrawInfo)",
				returns = "(debug.RendererObject)",
				valuetype = "RendererObject"
			},
			["draw_points"] = {
				type = "function",
				description = [[]],
				args = "(points: tablemath.Vector,renderInfo: debug.DrawInfo)",
				returns = "(debug.RendererObject)",
				valuetype = "RendererObject"
			},
			["DrawInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: util.Color)",
						returns = "(debug.DrawInfo)",
						valuetype = "DrawInfo"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.Transform,arg2: util.Color,arg3: util.Color,arg4: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(debug.DrawInfo)",
						valuetype = "DrawInfo"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(debug.DrawInfo)",
						valuetype = "DrawInfo"
					},
					["SetDuration"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(debug.DrawInfo)",
						valuetype = "DrawInfo"
					},
					["SetOutlineColor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: util.Color)",
						returns = "(debug.DrawInfo)",
						valuetype = "DrawInfo"
					}
				}
			},
			["RendererObject"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAngles"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsVisible"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetVisible"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPose"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector)",
						valuetype = "Vector"
					}
				}
			},

		}
	},
	["string"] = {
		type = "lib",
		description = [[]],
		childs = {
			["remove_quotes"] = {
				type = "function",
				description = [[]],
				args = "(s: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["split"] = {
				type = "function",
				description = [[]],
				args = "(str: string,delimiter: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["replace"] = {
				type = "function",
				description = [[]],
				args = "(subject: string,from: string,to: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["fill_zeroes"] = {
				type = "function",
				description = [[]],
				args = "(i: string,numDigits: int32)",
				returns = "(string)",
				valuetype = "string"
			},
			["join"] = {
				type = "function",
				description = [[]],
				args = "(values: )",
				returns = "(string)",
				valuetype = "string"
			},
			["remove_whitespace"] = {
				type = "function",
				description = [[]],
				args = "(s: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["calc_levenshtein_distance"] = {
				type = "function",
				description = [[]],
				args = "(s0: string,s1: string)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["calc_levenshtein_similarity"] = {
				type = "function",
				description = [[]],
				args = "(s0: string,s1: string)",
				returns = "(float)",
				valuetype = "float"
			},
			["compare"] = {
				type = "function",
				description = [[]],
				args = "(a: string,b: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["hash"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["is_number"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["is_integer"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["find_similar_elements"] = {
				type = "function",
				description = [[]],
				args = "(baseElement: string,inElements: ,limit: uint32,outSimilarElements: any,outSimilarities: any)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["find_longest_common_substring"] = {
				type = "function",
				description = [[]],
				args = "(s0: string,s1: string,outStartIdx: uint32,outLen: uint32,outEndIdx: uint32)",
				returns = "(nil)",
				valuetype = "nil"
			}
		}
	},
	["net"] = {
		type = "lib",
		description = [[]],
		childs = {
			["broadcast"] = {
				type = "function",
				description = [[]],
				args = "(protocol: enum pragma::networking::Protocol,identifier: string,packet: net.Packet)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["send"] = {
				type = "function",
				description = [[]],
				args = "(protocol: enum pragma::networking::Protocol,identifier: string,packet: net.Packet,recipient: ents.PlayerComponent)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["register_event"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["receive"] = {
				type = "function",
				description = [[]],
				args = "(name: string,function: unknown)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["register"] = {
				type = "function",
				description = [[]],
				args = "(identifier: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["RecipientFilter"] = {
				type = "class",
				description = [[]],
				childs = {
					["HasRecipient"] = {
						type = "method",
						description = [[]],
						args = "(hPl: ents.PlayerComponent)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFilterType"] = {
						type = "method",
						description = [[]],
						args = "(filterType: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFilterType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRecipients"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableents.PlayerComponent)",
						valuetype = "PlayerComponent>"
					},
					["AddRecipient"] = {
						type = "method",
						description = [[]],
						args = "(hPl: ents.PlayerComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveRecipient"] = {
						type = "method",
						description = [[]],
						args = "(hPl: ents.PlayerComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TYPE_EXCLUDE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INCLUDE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Packet"] = {
				type = "class",
				description = [[]],
				childs = {
					["ReadVectori"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector4i"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadSoundSource"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Seek"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WritePlayer"] = {
						type = "method",
						description = [[]],
						args = "(hEnt: class util::TWeakSharedHandle<class BaseEntity>)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteDouble"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat2x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadLongDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt16"] = {
						type = "method",
						description = [[]],
						args = "(t: int16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteFloat"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt64"] = {
						type = "method",
						description = [[]],
						args = "(t: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector"] = {
						type = "method",
						description = [[]],
						args = "(t: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector2"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector2i"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadStringUntil"] = {
						type = "method",
						description = [[]],
						args = "(pattern: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt32"] = {
						type = "method",
						description = [[]],
						args = "(t: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector4"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteAngles"] = {
						type = "method",
						description = [[]],
						args = "(t: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat2"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteChar"] = {
						type = "method",
						description = [[]],
						args = "(t: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat3"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadString"] = {
						type = "method",
						description = [[]],
						args = "(len: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadBinaryString"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteString"] = {
						type = "method",
						description = [[]],
						args = "(str: string,bNullterminated: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadChar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToBinaryString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTimeSinceTransmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteBinary"] = {
						type = "method",
						description = [[]],
						args = "(dsOther: net.Packet)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadBinary"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUniqueEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteBool"] = {
						type = "method",
						description = [[]],
						args = "(t: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt64"] = {
						type = "method",
						description = [[]],
						args = "(t: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt8"] = {
						type = "method",
						description = [[]],
						args = "(t: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVertex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt8"] = {
						type = "method",
						description = [[]],
						args = "(t: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt32"] = {
						type = "method",
						description = [[]],
						args = "(t: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt16"] = {
						type = "method",
						description = [[]],
						args = "(t: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteSoundSource"] = {
						type = "method",
						description = [[]],
						args = "(snd: sound.Source)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat4x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat4x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat3x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVectori"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat3x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat2x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(t: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Tell"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadBool"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat4"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector2i"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector4i"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVertex"] = {
						type = "method",
						description = [[]],
						args = "(t: Model.Vertex)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUniqueEntity"] = {
						type = "method",
						description = [[]],
						args = "(o: any)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ClientRecipientFilter"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetRecipients"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},

		}
	},
	["jit"] = {
		type = "lib",
		description = [[]],
		childs = {
			["opt"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["regex"] = {
		type = "lib",
		description = [[]],
		childs = {
			["replace"] = {
				type = "function",
				description = [[]],
				args = "(input: string,e: string,format: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["Result"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasMatch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFormat"] = {
						type = "method",
						description = [[]],
						args = "(format: string,flags: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMatchCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},

		}
	},
	["pcl"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["table"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["util"] = {
		type = "lib",
		description = [[]],
		childs = {
			["cubemap_to_equirectangular_texture"] = {
				type = "function",
				description = [[]],
				args = "(cubemap: prosper.Texture)",
				returns = "(any)",
				valuetype = "any"
			},
			["open_path_in_explorer"] = {
				type = "function",
				description = [[]],
				args = "(spath: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_pretty_time"] = {
				type = "function",
				description = [[]],
				args = "(t: float)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_pretty_bytes"] = {
				type = "function",
				description = [[]],
				args = "(bytes: uint32)",
				returns = "(string)",
				valuetype = "string"
			},
			["open_url_in_browser"] = {
				type = "function",
				description = [[]],
				args = "(url: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_addon_path"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(string)",
				valuetype = "string"
			},
			["units_to_metres"] = {
				type = "function",
				description = [[]],
				args = "(units: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["read_scene_file"] = {
				type = "function",
				description = [[]],
				args = "(fileName: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["world_to_local"] = {
				type = "function",
				description = [[]],
				args = "(vLocal: vector.Vector,rLocal: math.QuaternionInternal,v: vector.Vector,r: math.QuaternionInternal)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["metres_to_units"] = {
				type = "function",
				description = [[]],
				args = "(metres: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["get_string_hash"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["variable_type_to_string"] = {
				type = "function",
				description = [[]],
				args = "(varType: enum util::VarType)",
				returns = "(string)",
				valuetype = "string"
			},
			["generate_uuid_v4"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(string)",
				valuetype = "string"
			},
			["is_valid"] = {
				type = "function",
				description = [[]],
				args = "(o: any)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_scale_factor"] = {
				type = "function",
				description = [[]],
				args = "(val: float,min: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["register_class"] = {
				type = "function",
				description = [[]],
				args = "(pclassName: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["load_image"] = {
				type = "function",
				description = [[]],
				args = "(fileName: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["local_to_world"] = {
				type = "function",
				description = [[]],
				args = "(vLocal: vector.Vector,rLocal: math.QuaternionInternal,v: vector.Vector,r: math.QuaternionInternal)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["fire_bullets"] = {
				type = "function",
				description = [[]],
				args = "(bulletInfo: game.BulletInfo)",
				returns = "(any)",
				valuetype = "any"
			},
			["get_pretty_duration"] = {
				type = "function",
				description = [[]],
				args = "(ms: uint32)",
				returns = "(string)",
				valuetype = "string"
			},
			["remove"] = {
				type = "function",
				description = [[]],
				args = "(struct luabind::detail::nil_type)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["fade_property"] = {
				type = "function",
				description = [[]],
				args = "(vProp: util.FloatProperty,vDst: float,duration: float)",
				returns = "(any)",
				valuetype = "any"
			},
			["round_string"] = {
				type = "function",
				description = [[]],
				args = "(value: float)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_type_name"] = {
				type = "function",
				description = [[]],
				args = "(o: any)",
				returns = "(string)",
				valuetype = "string"
			},
			["is_same_object"] = {
				type = "function",
				description = [[]],
				args = "(o0: any,o1: any)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["calc_screen_space_distance_to_world_space_position"] = {
				type = "function",
				description = [[]],
				args = "(point: vector.Vector,vp: math.Mat4,nearZ: float,farZ: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["clamp_resolution_to_aspect_ratio"] = {
				type = "function",
				description = [[]],
				args = "(w: uint32,h: uint32,aspectRatio: float)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["create_muzzle_flash"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["get_class_value"] = {
				type = "function",
				description = [[]],
				args = "(oClass: any,key: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["is_valid_entity"] = {
				type = "function",
				description = [[]],
				args = "(o: any)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["capture_raytraced_screenshot"] = {
				type = "function",
				description = [[]],
				args = "(width: uint32,height: uint32)",
				returns = "(util.ParallelJobImage)",
				valuetype = "ParallelJobImage"
			},
			["get_image_format_file_extension"] = {
				type = "function",
				description = [[]],
				args = "(format: enum uimg::ImageFormat)",
				returns = "(string)",
				valuetype = "string"
			},
			["pack_zip_archive"] = {
				type = "function",
				description = [[]],
				args = "(pzipFileName: string,t: )",
				returns = "(nil)",
				valuetype = "nil"
			},
			["world_space_point_to_screen_space_uv"] = {
				type = "function",
				description = [[]],
				args = "(point: vector.Vector,vp: math.Mat4,nearZ: float,farZ: float)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["world_space_direction_to_screen_space"] = {
				type = "function",
				description = [[]],
				args = "(dir: vector.Vector,vp: math.Mat4)",
				returns = "(math.Vector2)",
				valuetype = "Vector2"
			},
			["depth_to_distance"] = {
				type = "function",
				description = [[]],
				args = "(depth: float,nearZ: float,farZ: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["shake_screen"] = {
				type = "function",
				description = [[]],
				args = "(amplitude: float,frequency: float,duration: float,fadeIn: float,fadeOut: float)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["create_giblet"] = {
				type = "function",
				description = [[]],
				args = "(gibletInfo: class GibletCreateInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["create_explosion"] = {
				type = "function",
				description = [[]],
				args = "(splashDamageInfo: util.SplashDamageInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["calc_world_direction_from_2d_coordinates"] = {
				type = "function",
				description = [[]],
				args = "(forward: vector.Vector,right: vector.Vector,up: vector.Vector,fov: float,nearZ: float,farZ: float,aspectRatio: float,uv: math.Vector2)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["get_faded_time_factor"] = {
				type = "function",
				description = [[]],
				args = "(cur: float,dur: float,fadeIn: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["is_table"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_date_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(string)",
				valuetype = "string"
			},
			["splash_damage"] = {
				type = "function",
				description = [[]],
				args = "(splashDamageInfo: util.SplashDamageInfo)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["create_particle_tracer"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["save_image"] = {
				type = "function",
				description = [[]],
				args = "(img: prosper.Image,fileName: string,imgWriteInfo: util.TextureInfo)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_clipboard_string"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(string)",
				valuetype = "string"
			},
			["set_clipboard_string"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["QuaternionVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["LongLongVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["ParallelJob"] = {
				type = "class",
				description = [[]],
				childs = {
					["Cancel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsSuccessful"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsThreadActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Wait"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Start"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsComplete"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsPending"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsCancelled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetProgress"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStatus"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetResultMessage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Poll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["JOB_STATUS_PENDING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_INVALID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_CANCELLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_FAILED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_INITIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["JOB_STATUS_SUCCESSFUL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DataStream"] = {
				type = "class",
				description = [[]],
				childs = {
					["WriteFloat"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt16"] = {
						type = "method",
						description = [[]],
						args = "(t: int16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadLongDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat2x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteDouble"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVectori"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector4i"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadDouble"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteLongDouble"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt64"] = {
						type = "method",
						description = [[]],
						args = "(t: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector"] = {
						type = "method",
						description = [[]],
						args = "(t: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector2"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector2i"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadStringUntil"] = {
						type = "method",
						description = [[]],
						args = "(pattern: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVector2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt32"] = {
						type = "method",
						description = [[]],
						args = "(t: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector4"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteAngles"] = {
						type = "method",
						description = [[]],
						args = "(t: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat2"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat2x3"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat2x4"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteChar"] = {
						type = "method",
						description = [[]],
						args = "(t: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat3x2"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat3"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat3x4"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat4x2"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadString"] = {
						type = "method",
						description = [[]],
						args = "(len: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadBinaryString"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteString"] = {
						type = "method",
						description = [[]],
						args = "(str: string,bNullterminated: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadChar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToBinaryString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat3x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteBinary"] = {
						type = "method",
						description = [[]],
						args = "(dsOther: util.DataStream)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadBinary"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteBool"] = {
						type = "method",
						description = [[]],
						args = "(t: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(t: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat2x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt64"] = {
						type = "method",
						description = [[]],
						args = "(t: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVectori"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat3x4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt64"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteInt8"] = {
						type = "method",
						description = [[]],
						args = "(t: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadVertex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt8"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt8"] = {
						type = "method",
						description = [[]],
						args = "(t: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadInt32"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt32"] = {
						type = "method",
						description = [[]],
						args = "(t: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteUInt16"] = {
						type = "method",
						description = [[]],
						args = "(t: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadUInt16"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat4x3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat4x2"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadMat3"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(size: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Tell"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Seek"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReadBool"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat4x3"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMat4"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector2i"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVector4i"] = {
						type = "method",
						description = [[]],
						args = "(t: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteVertex"] = {
						type = "method",
						description = [[]],
						args = "(t: Model.Vertex)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat4x3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Mat4x3)",
						valuetype = "Mat4x3"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4x3)",
						valuetype = "Mat4x3"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4x3)",
						valuetype = "Mat4x3"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["EulerAnglesVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["BoolProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.IntProperty)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["QuaternionProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.StringProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float,arg4: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["BaseProperty"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["ColorProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.Vector4Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.ColorProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.ColorProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.ColorProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.ColorProperty)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["DoubleVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(float)",
						valuetype = "float"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Mat3x4Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.Mat3x4Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["LongDoubleVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(float)",
						valuetype = "float"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Mat2x3Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.Mat2x3Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Vector3iVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Vectori)",
						valuetype = "Vectori"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vectori)",
						valuetype = "Vectori"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vectori)",
						valuetype = "Vectori"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["IntVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Mat4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["DirectoryChangeListener"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Poll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LISTENER_FLAG_WATCH_DIRECTORY_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_ABSOLUTE_PATH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_BIT_WATCH_SUB_DIRECTORIES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["LISTENER_FLAG_START_DISABLED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ParallelJobString"] = {
				type = "class",
				inherits = "util.ParallelJob",
				description = [[]],
				childs = {
					["GetResult"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["CallbackHandler"] = {
				type = "class",
				description = [[]],
				childs = {
					["CallCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(name: string,o1: any,o2: any,o3: any,o4: any,o5: any,o6: any,o7: any,o8: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(name: string,o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.CallbackHandler)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Path"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToComponents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFileName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFront"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MoveUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetComponentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PopFront"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PopBack"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Canonicalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsFile"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFileExtension"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveFileExtension"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MakeRelative"] = {
						type = "method",
						description = [[]],
						args = "(other: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsEmpty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["StringProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.EulerAnglesProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Mat3)",
						valuetype = "Mat3"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat3)",
						valuetype = "Mat3"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat3)",
						valuetype = "Mat3"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Vector2Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector2Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.StringProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector2Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector2Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector2Property)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat2x3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Mat2x3)",
						valuetype = "Mat2x3"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat2x3)",
						valuetype = "Mat2x3"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat2x3)",
						valuetype = "Mat2x3"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["EulerAnglesProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.StringProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.EulerAnglesProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.EulerAnglesProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.EulerAnglesProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.EulerAnglesProperty)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["FloatVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(float)",
						valuetype = "float"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["DataBlock"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "(val: string,def: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInt"] = {
						type = "method",
						description = [[]],
						args = "(val: string,def: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVector4"] = {
						type = "method",
						description = [[]],
						args = "(val: string,def: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFloat"] = {
						type = "method",
						description = [[]],
						args = "(val: string,def: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBool"] = {
						type = "method",
						description = [[]],
						args = "(val: string,def: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "(val: string,def: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVector2"] = {
						type = "method",
						description = [[]],
						args = "(val: string,def: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVector"] = {
						type = "method",
						description = [[]],
						args = "(val: string,def: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChildBlocks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(type: string,key: string,val: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(other: util.DataBlock)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetKeys"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsEmpty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddBlock"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsString"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsColor"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsInt"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsFloat"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsBool"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsVector"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsVector4"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindBlock"] = {
						type = "method",
						description = [[]],
						args = "(key: string,blockIndex: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "(val: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat4Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.Mat4Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["FloatProperty"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: util.FloatProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.IntProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.FloatProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(1: util.FloatProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(1: util.FloatProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.FloatProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.FloatProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.FloatProperty)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Vector2iVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["ShortVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(int16)",
						valuetype = "int16"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int16)",
						valuetype = "int16"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int16)",
						valuetype = "int16"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Mat3Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.Mat3Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["VectorProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.VectorProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.StringProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.VectorProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.VectorProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.VectorProperty)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Vector4Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector4Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.StringProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector4Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float,arg4: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector4Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector4Property)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Version"] = {
				type = "class",
				description = [[]],
				childs = {
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Version)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Version)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Version)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["major"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["revision"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ColorVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Vector2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["BoolVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["CharVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(int8)",
						valuetype = "int8"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int8)",
						valuetype = "int8"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int8)",
						valuetype = "int8"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["SplashDamageInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCone"] = {
						type = "method",
						description = [[]],
						args = "(coneDirection: vector.Vector,coneAngle: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["radius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["damageInfo"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["origin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["StringVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(string)",
						valuetype = "string"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Color"] = {
				type = "class",
				description = [[]],
				childs = {
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(other: util.Color,factor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetContrastColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToVector4"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToVector"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToHexColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToHexColorRGB"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToHSVColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetComplementaryColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcPerceivedLuminance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(r: uint8,g: uint8,b: uint8,a: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mat4x2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Mat4x2)",
						valuetype = "Mat4x2"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4x2)",
						valuetype = "Mat4x2"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4x2)",
						valuetype = "Mat4x2"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["ParallelJobImage"] = {
				type = "class",
				inherits = "util.ParallelJob",
				description = [[]],
				childs = {
					["GetResult"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat3x2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Mat3x2)",
						valuetype = "Mat3x2"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat3x2)",
						valuetype = "Mat3x2"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat3x2)",
						valuetype = "Mat3x2"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["IntProperty"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: util.IntProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.FloatProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.IntProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(1: util.IntProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(1: util.IntProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.IntProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.IntProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.IntProperty)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Callback"] = {
				type = "class",
				description = [[]],
				childs = {
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Call"] = {
						type = "method",
						description = [[]],
						args = "(arg0: any,arg1: any,arg2: any,arg3: any,arg4: any,arg5: any,arg6: any,arg7: any,arg8: any,arg9: any,arg10: any,arg11: any,arg12: any,arg13: any,arg14: any,arg15: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["VectoriProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.VectoriProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.StringProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.VectoriProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.VectoriProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.VectoriProperty)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Vector4iProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector4iProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.StringProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector4iProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32,arg4: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector4iProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector4iProperty)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Vector2iProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector2iProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.StringProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector2iProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector2iProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: util.Vector2iProperty)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["HSVColor"] = {
				type = "class",
				description = [[]],
				childs = {
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(hsv1: util.HSVColor,t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToRGBColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: util.HSVColor)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["h"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["s"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["v"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mat2Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.Mat2Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Vector3Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Mat3x2Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.Mat3x2Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat4x3Property"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvokeCallbacks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddModifier"] = {
						type = "method",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocked"] = {
						type = "method",
						description = [[]],
						args = "(bLocked: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Unlink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(val: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.Mat4x3Property)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ResultCode"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMessage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsError"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["Vector4iVector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Vector4i)",
						valuetype = "Vector4i"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4i)",
						valuetype = "Vector4i"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4i)",
						valuetype = "Vector4i"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Mat2x4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Mat2x4)",
						valuetype = "Mat2x4"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat2x4)",
						valuetype = "Mat2x4"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat2x4)",
						valuetype = "Mat2x4"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Mat3x4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Mat3x4)",
						valuetype = "Mat3x4"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat3x4)",
						valuetype = "Mat3x4"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat3x4)",
						valuetype = "Mat3x4"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Mat2Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Mat2)",
						valuetype = "Mat2"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat2)",
						valuetype = "Mat2"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat2)",
						valuetype = "Mat2"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Vector4Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["ShrinkToFit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PushBack"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__len"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Reserve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Insert"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["At"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(math.Vector4)",
						valuetype = "Vector4"
					},
					["Erase"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Back"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4)",
						valuetype = "Vector4"
					},
					["Front"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4)",
						valuetype = "Vector4"
					},
					["Capacity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["EntityProperty"] = {
				type = "class",
				inherits = "util.BaseProperty",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(propOther: util.EntityProperty)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ImageBuffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPixelValueHDR"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,channel: uint32,value: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChannelCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChannelSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasAlphaChannel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(dst: util.ImageBuffer,xSrc: uint32,ySrc: uint32,xDst: uint32,yDst: uint32,w: uint32,h: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcLuminance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyGammaCorrection"] = {
						type = "method",
						description = [[]],
						args = "(gamma: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPixelSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPixelCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPixelValueLDR"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,channel: uint32,value: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsLDRFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsHDRFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPixelValue"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,channel: uint32,value: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsFloatFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPixelValue"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,channel: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(color: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Convert"] = {
						type = "method",
						description = [[]],
						args = "(format: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToLDR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToHDR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearAlpha"] = {
						type = "method",
						description = [[]],
						args = "(a: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPixelIndex"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPixelOffset"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FlipHorizontally"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FlipVertically"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Flip"] = {
						type = "method",
						description = [[]],
						args = "(flipH: bool,flipV: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SwapChannels"] = {
						type = "method",
						description = [[]],
						args = "(channel0: enum uimg::Channel,channel1: enum uimg::Channel)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyToneMapping"] = {
						type = "method",
						description = [[]],
						args = "(toneMapping: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyExposure"] = {
						type = "method",
						description = [[]],
						args = "(exposure: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(w: uint32,h: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FORMAT_RGBA16"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA_HDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA32"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA8"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA_LDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGBA_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_RED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_GREEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_A"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_R"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_BLUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_B"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_G"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_ACES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_UNCHARTED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_GRAN_TURISMO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_GAMMA_CORRECTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_HEJIL_RICHARD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TONE_MAPPING_REINHARD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB16"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB_HDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB32"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB8"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_RGB_LDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FORMAT_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TextureInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetNormalMap"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["INPUT_FORMAT_R32_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_KEEP_INPUT_IMAGE_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_R16G16B16A16_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_R8G8B8A8_UINT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["INPUT_FORMAT_R32G32B32A32_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP_SHARP_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP_SMOOTH_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_COLOR_MAP_1BIT_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_CONVERT_TO_NORMAL_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_GENERATE_MIPMAPS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_SRGB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WRAP_MODE_CLAMP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WRAP_MODE_REPEAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["WRAP_MODE_MIRROR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MIPMAP_FILTER_KAISER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MIPMAP_FILTER_BOX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_HDR_COLOR_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC1A"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC3N"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC3_RGBM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC5"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC6"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_BC7"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_CTX1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT1A"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT1N"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT5"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_DXT5N"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_GRADIENT_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_KEEP_INPUT_IMAGE_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_NORMAL_MAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_RGB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_RGBA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGBA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_R"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGB_A1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OUTPUT_FORMAT_ETC2_RGBM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CONTAINER_FORMAT_DDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CONTAINER_FORMAT_KTX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["wrapMode"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["inputFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["outputFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipMapFilter"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["containerFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Texture"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetVkTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					}
				}
			},

		}
	},
	["class_info_data"] = {
		type = "class",
		description = [[]],
		childs = {
			["attributes"] = {
				type = "value",
				description = [[]],
				valuetype = ""
			},
			["name"] = {
				type = "value",
				description = [[]],
				valuetype = ""
			},
			["methods"] = {
				type = "value",
				description = [[]],
				valuetype = ""
			}
		}
	},
	["boundingvolume"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_rotated_aabb"] = {
				type = "function",
				description = [[]],
				args = "(min: vector.Vector,max: vector.Vector,rot: math.Mat4)",
				returns = "(vector.Vector,vector.Vector)",
				valuetype = "Vector"
			}
		}
	},
	["tool"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["intersect"] = {
		type = "lib",
		description = [[]],
		childs = {
			["line_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(origin: vector.Vector,dir: vector.Vector,n: vector.Vector,d: float)",
				returns = "(any)",
				valuetype = "any"
			},
			["aabb_with_triangle"] = {
				type = "function",
				description = [[]],
				args = "(min: vector.Vector,max: vector.Vector,a: vector.Vector,b: vector.Vector,c: vector.Vector)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["obb_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(min: vector.Vector,max: vector.Vector,origin: vector.Vector,rot: math.QuaternionInternal,n: vector.Vector,d: float)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["point_in_plane_mesh"] = {
				type = "function",
				description = [[]],
				args = "(vec: vector.Vector,planeTable: )",
				returns = "(bool)",
				valuetype = "bool"
			},
			["line_with_mesh"] = {
				type = "function",
				description = [[]],
				args = "(arg1: vector.Vector,arg2: vector.Vector,arg3: game.Model,arg4: ,arg5: any,arg6: any)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["sphere_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(sphereOrigin: vector.Vector,sphereRadius: float,n: vector.Vector,d: float)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["line_with_sphere"] = {
				type = "function",
				description = [[]],
				args = "(lineOrigin: vector.Vector,lineDir: vector.Vector,sphereOrigin: vector.Vector,sphereRadius: float)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["aabb_with_sphere"] = {
				type = "function",
				description = [[]],
				args = "(min: vector.Vector,max: vector.Vector,origin: vector.Vector,r: float)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["line_with_aabb"] = {
				type = "function",
				description = [[]],
				args = "(start: vector.Vector,dir: vector.Vector,min: vector.Vector,max: vector.Vector,outMin: any,outMax: any)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["sphere_with_sphere"] = {
				type = "function",
				description = [[]],
				args = "(originA: vector.Vector,rA: float,originB: vector.Vector,rB: float)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["aabb_with_aabb"] = {
				type = "function",
				description = [[]],
				args = "(minA: vector.Vector,maxA: vector.Vector,minB: vector.Vector,maxB: vector.Vector)",
				returns = "(enum umath::intersection::Intersect)",
				valuetype = "Intersect"
			},
			["line_with_obb"] = {
				type = "function",
				description = [[]],
				args = "(rayStart: vector.Vector,rayDir: vector.Vector,min: vector.Vector,max: vector.Vector)",
				returns = "(any)",
				valuetype = "any"
			},
			["point_in_aabb"] = {
				type = "function",
				description = [[]],
				args = "(vec: vector.Vector,min: vector.Vector,max: vector.Vector)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["sphere_in_plane_mesh"] = {
				type = "function",
				description = [[]],
				args = "(vec: vector.Vector,r: float,planeTable: )",
				returns = "(int32)",
				valuetype = "int32"
			},
			["aabb_in_plane_mesh"] = {
				type = "function",
				description = [[]],
				args = "(min: vector.Vector,max: vector.Vector,planeTable: )",
				returns = "(int32)",
				valuetype = "int32"
			},
			["sphere_with_cone"] = {
				type = "function",
				description = [[]],
				args = "(sphereOrigin: vector.Vector,radius: float,coneOrigin: vector.Vector,coneDir: vector.Vector,coneAngle: float)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["line_with_triangle"] = {
				type = "function",
				description = [[]],
				args = "(arg1: vector.Vector,arg2: vector.Vector,arg3: vector.Vector,arg4: vector.Vector,arg5: vector.Vector,arg6: any,arg7: any)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["aabb_with_plane"] = {
				type = "function",
				description = [[]],
				args = "(min: vector.Vector,max: vector.Vector,n: vector.Vector,d: float)",
				returns = "(bool)",
				valuetype = "bool"
			}
		}
	},
	["dmx"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Attribute"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddArrayValue"] = {
						type = "method",
						description = [[]],
						args = "(val: dmx.Attribute)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveArrayValue"] = {
						type = "method",
						description = [[]],
						args = "(val: dmx.Attribute)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(attrOther: dmx.Attribute)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetValueAsString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TYPE_TIME_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ANGLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BINARY_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_TIME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BINARY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ANGLE_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BOOL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BOOL_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_MATRIX_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_COLOR_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ELEMENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ELEMENT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FLOAT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INVALID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_MATRIX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_OBJECTID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_QUATERNION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_OBJECTID_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_QUATERNION_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_STRING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_STRING_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_UINT64"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_UINT8"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR2_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR3_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR4_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Element"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(elOther: dmx.Element)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttributeValue"] = {
						type = "method",
						description = [[]],
						args = "(id: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGUID"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttrV"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttr"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttributes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttribute"] = {
						type = "method",
						description = [[]],
						args = "(id: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Data"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetElements"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRootAttribute"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},

		}
	},
	["bit"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["prosper"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_secondary_command_buffer"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(prosper.CommandBuffer)",
				valuetype = "CommandBuffer"
			},
			["flush"] = {
				type = "function",
				description = [[]],
				args = "(arg0: class prosper::IPrContext)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["create_image_view"] = {
				type = "function",
				description = [[]],
				args = "(context: class prosper::IPrContext,imgViewCreateInfo: prosper.ImageViewCreateInfo,img: prosper.Image)",
				returns = "(prosper.ImageView)",
				valuetype = "ImageView"
			},
			["wait_for_current_swapchain_command_buffer_completion"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(variantbool|string)",
				valuetype = "variant<bool,string>"
			},
			["create_image_create_info"] = {
				type = "function",
				description = [[]],
				args = "(imgBuf: util.ImageBuffer)",
				returns = "(prosper.ImageCreateInfo)",
				valuetype = "ImageCreateInfo"
			},
			["shader_stage_to_string"] = {
				type = "function",
				description = [[]],
				args = "(stage: enum prosper::ShaderStage)",
				returns = "(string)",
				valuetype = "string"
			},
			["create_framebuffer"] = {
				type = "function",
				description = [[]],
				args = "(width: uint32,height: uint32,attachments: tableprosper.ImageView)",
				returns = "(prosper.Framebuffer)",
				valuetype = "Framebuffer"
			},
			["create_buffer"] = {
				type = "function",
				description = [[]],
				args = "(context: class prosper::IPrContext,bufCreateInfo: prosper.BufferCreateInfo)",
				returns = "(prosper.Buffer)",
				valuetype = "Buffer"
			},
			["create_descriptor_set"] = {
				type = "function",
				description = [[]],
				args = "(ldescSetInfo: shader.DescriptorSetInfo)",
				returns = "(prosper.DescriptorSet)",
				valuetype = "DescriptorSet"
			},
			["create_image"] = {
				type = "function",
				description = [[]],
				args = "(imgBuffer: util.ImageBuffer,imgCreateInfo: prosper.ImageCreateInfo)",
				returns = "(prosper.Image)",
				valuetype = "Image"
			},
			["create_texture"] = {
				type = "function",
				description = [[]],
				args = "(img: prosper.Image,texCreateInfo: prosper.TextureCreateInfo)",
				returns = "(prosper.Texture)",
				valuetype = "Texture"
			},
			["create_render_pass"] = {
				type = "function",
				description = [[]],
				args = "(rpCreateInfo: prosper.RenderPassCreateInfo)",
				returns = "(prosper.RenderPass)",
				valuetype = "RenderPass"
			},
			["create_render_target"] = {
				type = "function",
				description = [[]],
				args = "(rtCreateInfo: prosper.RenderTargetCreateInfo,textures: tableprosper.Texture)",
				returns = "(prosper.RenderTarget)",
				valuetype = "RenderTarget"
			},
			["create_event"] = {
				type = "function",
				description = [[]],
				args = "(arg0: class prosper::IPrContext)",
				returns = "(prosper.Event)",
				valuetype = "Event"
			},
			["format_to_string"] = {
				type = "function",
				description = [[]],
				args = "(format: enum prosper::Format)",
				returns = "(string)",
				valuetype = "string"
			},
			["create_gradient_texture"] = {
				type = "function",
				description = [[]],
				args = "(width: uint32,height: uint32,format: enum prosper::Format,dir: math.Vector2,tNodes: tablenil)",
				returns = "(prosper.Texture)",
				valuetype = "Texture"
			},
			["create_fence"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(prosper.Fence)",
				valuetype = "Fence"
			},
			["calculate_mipmap_count"] = {
				type = "function",
				description = [[]],
				args = "(w: uint32,h: uint32)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["calculate_mipmap_size"] = {
				type = "function",
				description = [[]],
				args = "(v: uint32,level: uint32)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["result_to_string"] = {
				type = "function",
				description = [[]],
				args = "(r: enum prosper::Result)",
				returns = "(string)",
				valuetype = "string"
			},
			["is_depth_format"] = {
				type = "function",
				description = [[]],
				args = "(format: enum prosper::Format)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["is_compressed_format"] = {
				type = "function",
				description = [[]],
				args = "(format: enum prosper::Format)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["is_uncompressed_format"] = {
				type = "function",
				description = [[]],
				args = "(format: enum prosper::Format)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_bit_size"] = {
				type = "function",
				description = [[]],
				args = "(format: enum prosper::Format)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["create_primary_command_buffer"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(prosper.CommandBuffer)",
				valuetype = "CommandBuffer"
			},
			["get_byte_size"] = {
				type = "function",
				description = [[]],
				args = "(format: enum prosper::Format)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["get_swapchain_image_count"] = {
				type = "function",
				description = [[]],
				args = "(arg0: class prosper::IPrContext)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["get_api_identifier"] = {
				type = "function",
				description = [[]],
				args = "(arg0: class prosper::IPrContext)",
				returns = "(string)",
				valuetype = "string"
			},
			["wait_idle"] = {
				type = "function",
				description = [[]],
				args = "(arg0: class prosper::IPrContext)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_api_abbreviation"] = {
				type = "function",
				description = [[]],
				args = "(arg0: class prosper::IPrContext)",
				returns = "(string)",
				valuetype = "string"
			},
			["create_window"] = {
				type = "function",
				description = [[]],
				args = "(windowSettings: prosper.WindowCreateInfo)",
				returns = "(prosper.Window)",
				valuetype = "Window"
			},
			["util"] = {
				type = "lib",
				description = [[]],
				childs = {
					["allocate_temporary_buffer"] = {
						type = "function",
						description = [[]],
						args = "(size: uint32)",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["get_line_vertex_format"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(enum prosper::Format)",
						valuetype = "Format"
					},
					["get_square_vertex_buffer"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["get_square_vertex_uv_buffer"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["get_square_vertices"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(tablemath.Vector2)",
						valuetype = "Vector2>"
					},
					["get_square_uv_buffer"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["get_square_uv_coordinates"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(tablemath.Vector2)",
						valuetype = "Vector2>"
					},
					["get_square_vertex_count"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["get_square_vertex_format"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(enum prosper::Format)",
						valuetype = "Format"
					},
					["get_square_uv_format"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(enum prosper::Format)",
						valuetype = "Format"
					},
					["get_line_vertex_buffer"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["get_line_vertices"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(tablemath.Vector2)",
						valuetype = "Vector2>"
					},
					["get_line_vertex_count"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Buffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["WriteMemory"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32,ds: util.DataStream)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["ReadMemory"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([util.DataStream])",
						valuetype = "DataStream"
					},
					["GetBaseIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetUsageFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::BufferUsageFlags)",
						valuetype = "BufferUsageFlags"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.Buffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetCreateInfo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.BufferCreateInfo)",
						valuetype = "BufferCreateInfo"
					},
					["GetStartOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetPermanentlyMapped"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool,arg2: enum prosper::IBuffer::MapFlags)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MapMemory"] = {
						type = "method",
						description = [[]],
						args = "(mapFlags: enum prosper::IBuffer::MapFlags)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["UnmapMemory"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["ClearImageInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["subresourceRange"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["PipelineBarrierInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["dstStageMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcStageMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BufferCopyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["size"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Image"] = {
				type = "class",
				description = [[]],
				childs = {
					["WriteMemory"] = {
						type = "method",
						description = [[]],
						args = "(x: uint32,y: uint32,imgBuf: util.ImageBuffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToImageBuffer"] = {
						type = "method",
						description = [[]],
						args = "(includeLayers: bool,includeMipmaps: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Convert"] = {
						type = "method",
						description = [[]],
						args = "(cmd: prosper.CommandBuffer,format: enum prosper::Format)",
						returns = "(prosper.Image)",
						valuetype = "Image"
					},
					["GetMemoryBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["SetNormalMap"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetCreateInfo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.ImageCreateInfo)",
						valuetype = "ImageCreateInfo"
					},
					["GetAspectSubresourceLayout"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([prosper.SubresourceLayout])",
						valuetype = "SubresourceLayout"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.Image)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsSrgb"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsNormalMap"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetSrgb"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAlignment"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::Format)",
						valuetype = "Format"
					},
					["GetExtent2D"] = {
						type = "method",
						description = [[]],
						args = "(mipmap: uint32)",
						returns = "(uint32,uint32)",
						valuetype = "uint32"
					},
					["GetMipmapSize"] = {
						type = "method",
						description = [[]],
						args = "(mipmap: uint32)",
						returns = "(uint32,uint32)",
						valuetype = "uint32"
					},
					["GetMipmapCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetUsage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::ImageUsageFlags)",
						valuetype = "ImageUsageFlags"
					},
					["GetSharingMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::SharingMode)",
						valuetype = "SharingMode"
					},
					["GetTiling"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::ImageTiling)",
						valuetype = "ImageTiling"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetSampleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::SampleCountFlags)",
						valuetype = "SampleCountFlags"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::ImageType)",
						valuetype = "ImageType"
					},
					["GetLayerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(cmd: prosper.CommandBuffer)",
						returns = "(prosper.Image)",
						valuetype = "Image"
					}
				}
			},
			["WindowCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["focused"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["depthBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["doublebuffer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["resizable"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["stencilBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["visible"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["title"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["decorated"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["autoIconify"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["floating"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["stereo"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srgbCapable"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["samples"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["greenBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["refreshRate"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["redBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["blueBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["alphaBits"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderPass"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.RenderPass)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Framebuffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.Framebuffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["RenderTarget"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.RenderTarget)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetRenderPass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.RenderPass)",
						valuetype = "RenderPass"
					},
					["GetTexture"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["GetFramebuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Framebuffer)",
						valuetype = "Framebuffer"
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::Format)",
						valuetype = "Format"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Event"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.Event)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["SubresourceLayout"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["offset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["size"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["arrayPitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["depthPitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["rowPitch"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Fence"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.Fence)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["CommandBuffer"] = {
				type = "class",
				description = [[]],
				childs = {
					["RecordBlitTexture"] = {
						type = "method",
						description = [[]],
						args = "(texSrc: prosper.Texture,imgDst: prosper.Image)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordDraw"] = {
						type = "method",
						description = [[]],
						args = "(vertexCount: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordClearImage"] = {
						type = "method",
						description = [[]],
						args = "(img: prosper.Image,depth: float)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordCopyImage"] = {
						type = "method",
						description = [[]],
						args = "(imgSrc: prosper.Image,imgDst: prosper.Image,copyInfo: prosper.ImageCopyInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordDrawIndexed"] = {
						type = "method",
						description = [[]],
						args = "(indexCount: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordSetStencilWriteMask"] = {
						type = "method",
						description = [[]],
						args = "(faceMask: uint32,stencilWriteMask: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordUpdateBuffer"] = {
						type = "method",
						description = [[]],
						args = "(buf: prosper.Buffer,offset: uint32,ds: util.DataStream)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordClearAttachment"] = {
						type = "method",
						description = [[]],
						args = "(img: prosper.Image,clearDepth: float)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordBlitImage"] = {
						type = "method",
						description = [[]],
						args = "(imgSrc: prosper.Image,imgDst: prosper.Image,blitInfo: prosper.BlitInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordCopyBuffer"] = {
						type = "method",
						description = [[]],
						args = "(bufSrc: prosper.Buffer,bufDst: prosper.Buffer,copyInfo: prosper.BufferCopyInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordCopyBufferToImage"] = {
						type = "method",
						description = [[]],
						args = "(bufSrc: prosper.Buffer,imgDst: prosper.Image)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordResolveImage"] = {
						type = "method",
						description = [[]],
						args = "(imgSrc: prosper.Image,imgDst: prosper.Image)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordGenerateMipmaps"] = {
						type = "method",
						description = [[]],
						args = "(img: prosper.Image,currentLayout: uint32,srcAccessMask: uint32,srcStage: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordPipelineBarrier"] = {
						type = "method",
						description = [[]],
						args = "(barrierInfo: prosper.PipelineBarrierInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordImageBarrier"] = {
						type = "method",
						description = [[]],
						args = "(img: prosper.Image,srcStageMask: uint32,dstStageMask: uint32,oldLayout: uint32,newLayout: uint32,srcAccessMask: uint32,dstAccessMask: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordBufferBarrier"] = {
						type = "method",
						description = [[]],
						args = "(buf: prosper.Buffer,srcStageMask: uint32,dstStageMask: uint32,srcAccessMask: uint32,dstAccessMask: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordSetViewport"] = {
						type = "method",
						description = [[]],
						args = "(width: uint32,height: uint32,x: uint32,y: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordSetScissor"] = {
						type = "method",
						description = [[]],
						args = "(width: uint32,height: uint32,x: uint32,y: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordBeginRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(rpInfo: prosper.RenderPassInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordSetDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(minDepthBounds: float,maxDepthBounds: float)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordEndRenderPass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["StopRecording"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordCopyImageToBuffer"] = {
						type = "method",
						description = [[]],
						args = "(imgSrc: prosper.Image,srcImageLayout: uint32,bufDst: prosper.Buffer,copyInfo: prosper.BufferImageCopyInfo)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordDrawIndexedIndirect"] = {
						type = "method",
						description = [[]],
						args = "(buffer: prosper.Buffer,offset: uint32,drawCount: uint32,stride: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordDrawIndirect"] = {
						type = "method",
						description = [[]],
						args = "(buffer: prosper.Buffer,offset: uint32,drawCount: uint32,stride: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordFillBuffer"] = {
						type = "method",
						description = [[]],
						args = "(buffer: prosper.Buffer,offset: uint32,size: uint32,data: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordSetBlendConstants"] = {
						type = "method",
						description = [[]],
						args = "(blendConstants: math.Vector4)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordSetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(depthBiasConstantFactor: float,depthBiasClamp: float,slopeScaledDepthBias: float)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordSetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(lineWidth: float)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordSetStencilReference"] = {
						type = "method",
						description = [[]],
						args = "(faceMask: uint32,stencilReference: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordDrawGradient"] = {
						type = "method",
						description = [[]],
						args = "(rt: prosper.RenderTarget,dir: math.Vector2,lnodes: any)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["StartRecording"] = {
						type = "method",
						description = [[]],
						args = "(oneTimeSubmit: bool,simultaneousUseAllowed: bool)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Flush"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["RecordSetStencilCompareMask"] = {
						type = "method",
						description = [[]],
						args = "(faceMask: uint32,stencilCompareMask: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.CommandBuffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(graphics: shader.Graphics,vertexBuffer: prosper.Buffer)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordBindVertexBuffers"] = {
						type = "method",
						description = [[]],
						args = "(graphics: shader.Graphics,buffers: tableprosper.Buffer)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RecordBindIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(indexBuffer: prosper.Buffer,indexType: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["SwapBuffer"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},
			["DescriptorSet"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBindingCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.DescriptorSet)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBindingArrayTexture"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,texture: prosper.Texture,arrayIdx: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetBindingUniformBuffer"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,buffer: prosper.Buffer)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetBindingUniformBufferDynamic"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,buffer: prosper.Buffer)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetBindingStorageBuffer"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,buffer: prosper.Buffer)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetBindingTexture"] = {
						type = "method",
						description = [[]],
						args = "(bindingIdx: uint32,texture: prosper.Texture)",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["BufferCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_SPARSE_ALIASED_RESIDENCY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_SPARSE_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_CONCURRENT_SHARING_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_DONT_ALLOCATE_MEMORY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["queueFamilyMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["usageFlags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["size"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["memoryFeatures"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderTargetCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["useLayerFramebuffers"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["SamplerCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["compareOp"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minLod"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipmapMode"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxLod"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["borderColor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["addressModeV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["magFilter"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minFilter"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["addressModeU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["addressModeW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipLodBias"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxAnisotropy"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["compareEnable"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageView"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetBaseLayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetImageFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::Format)",
						valuetype = "Format"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.ImageView)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetSwizzleArray"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class std::array<enum prosper::ComponentSwizzle,4>)",
						valuetype = "ComponentSwizzle,4>"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAspectMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::ImageAspectFlags)",
						valuetype = "ImageAspectFlags"
					},
					["GetLayerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetMipmapCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::ImageViewType)",
						valuetype = "ImageViewType"
					},
					["GetBaseMipmapLevel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["TextureCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_CREATE_IMAGE_VIEW_FOR_EACH_LAYER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_RESOLVABLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["sampler"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["imageView"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderPassInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetRenderPass"] = {
						type = "method",
						description = [[]],
						args = "(rp: prosper.RenderPass)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetClearValues"] = {
						type = "method",
						description = [[]],
						args = "(clearValues: tableprosper.ClearValue)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: prosper.RenderTarget)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLayer"] = {
						type = "method",
						description = [[]],
						args = "(layerId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddClearValue"] = {
						type = "method",
						description = [[]],
						args = "(clearValue: prosper.ClearValue)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetAlphaBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetVertexWeightBuffer"] = {
						type = "method",
						description = [[]],
						args = "(arg1: prosper.Buffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(arg1: prosper.Buffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexWeightBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["GetIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					},
					["SetVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(arg1: prosper.Buffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAlphaBuffer"] = {
						type = "method",
						description = [[]],
						args = "(arg1: prosper.Buffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.Mesh)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Buffer)",
						valuetype = "Buffer"
					}
				}
			},
			["ImageCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_SPARSE_ALIASED_RESIDENCY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_SPARSE_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_DONT_ALLOCATE_MEMORY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_ALLOCATE_DISCRETE_MEMORY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NORMAL_MAP_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_CONCURRENT_SHARING_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_CUBEMAP_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_SRGB_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_FULL_MIPMAP_CHAIN_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["queueFamilyMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["usageFlags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["memoryFeatures"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["postCreateLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["type"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layers"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["format"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tiling"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["samples"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageSubresourceLayers"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["aspectMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipLevel"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseArrayLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TimerQuery"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.TimerQuery)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ImageViewCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["baseMipmap"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleRed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleGreen"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipmapLevels"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["format"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleBlue"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["swizzleAlpha"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["levelCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderPassCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddSubPassColorAttachment"] = {
						type = "method",
						description = [[]],
						args = "(subPassId: uint32,colorAttId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSubPassDepthStencilAttachmentEnabled"] = {
						type = "method",
						description = [[]],
						args = "(subPassId: uint32,bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddSubPassDependency"] = {
						type = "method",
						description = [[]],
						args = "(subPassId: uint32,sourceSubPassId: uint32,destinationSubPassId: uint32,sourceStageMask: uint32,destinationStageMask: uint32,sourceAccessMask: uint32,destinationAccessMask: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAttachment"] = {
						type = "method",
						description = [[]],
						args = "(format: uint32,initialLayout: uint32,finalLayout: uint32,loadOp: uint32,storeOp: uint32)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["AddSubPass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["BlitInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["srcSubresourceLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstSubresourceLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageCopyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["srcSubresource"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstSubresource"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["dstImageLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["srcImageLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BufferImageCopyInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([uint32])",
						valuetype = "uint32"
					},
					["SetWidth"] = {
						type = "method",
						description = [[]],
						args = "(width: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([uint32])",
						valuetype = "uint32"
					},
					["SetHeight"] = {
						type = "method",
						description = [[]],
						args = "(height: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["dstImageLayout"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aspectMask"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bufferOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseArrayLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["height"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mipLevel"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["width"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ImageSubresourceRange"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32,arg3: uint32,arg4: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["baseMipLevel"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["levelCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["layerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["baseArrayLayer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Sampler"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBorderColor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum prosper::BorderColor)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAddressModeV"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum prosper::SamplerAddressMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMipmapMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::SamplerMipmapMode)",
						valuetype = "SamplerMipmapMode"
					},
					["SetMinLod"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMagFilter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::Filter)",
						valuetype = "Filter"
					},
					["SetMaxLod"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAddressModeU"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::SamplerAddressMode)",
						valuetype = "SamplerAddressMode"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMinFilter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::Filter)",
						valuetype = "Filter"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetAddressModeU"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum prosper::SamplerAddressMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAddressModeV"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::SamplerAddressMode)",
						valuetype = "SamplerAddressMode"
					},
					["GetAddressModeW"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::SamplerAddressMode)",
						valuetype = "SamplerAddressMode"
					},
					["GetMipLodBias"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetCompareOperation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum prosper::CompareOp)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnisotropyEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetMaxAnisotropy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCompareEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetMaxAnisotropy"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.Sampler)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCompareOperation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::CompareOp)",
						valuetype = "CompareOp"
					},
					["GetMinLod"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetMaxLod"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetBorderColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::BorderColor)",
						valuetype = "BorderColor"
					},
					["SetMagFilter"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum prosper::Filter)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMinFilter"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum prosper::Filter)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMipmapMode"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum prosper::SamplerMipmapMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAddressModeW"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum prosper::SamplerAddressMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCompareEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["TimestampQuery"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.TimestampQuery)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["CommandBufferRecorder"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.CommandBufferRecorder)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsPending"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ExecuteCommands"] = {
						type = "method",
						description = [[]],
						args = "(drawCmd: prosper.CommandBuffer)",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["ClearValue"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetDepthStencil"] = {
						type = "method",
						description = [[]],
						args = "(depth: float,stencil: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(clearColor: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Window"] = {
				type = "class",
				description = [[]],
				childs = {
					["Close"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetKeyState"] = {
						type = "method",
						description = [[]],
						args = "(key: enum GLFW::Key)",
						returns = "(enum GLFW::KeyState)",
						valuetype = "KeyState"
					},
					["SetCloseCallback"] = {
						type = "method",
						description = [[]],
						args = "(function: unknown)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSize"] = {
						type = "method",
						description = [[]],
						args = "(size: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsFocused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsResizable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsVisible"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SwapBuffers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCursorPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["GetStickyMouseButtonsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetCursorInputMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum GLFW::CursorMode)",
						valuetype = "CursorMode"
					},
					["SetCursorInputMode"] = {
						type = "method",
						description = [[]],
						args = "(cursorMode: enum GLFW::CursorMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Restore"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCursor"] = {
						type = "method",
						description = [[]],
						args = "(cursor: class GLFW::Cursor)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetWindowTitle"] = {
						type = "method",
						description = [[]],
						args = "(title: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ShouldClose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsDecorated"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetShouldClose"] = {
						type = "method",
						description = [[]],
						args = "(shouldClose: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetClipboardString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetClipboardString"] = {
						type = "method",
						description = [[]],
						args = "(str: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCursorPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStickyKeysEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStickyKeysEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetStickyMouseButtonsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(enabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFramebufferSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["GetFrameSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4i)",
						valuetype = "Vector4i"
					},
					["Iconify"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["Show"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Hide"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearCursorPosOverride"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCursorPosOverride"] = {
						type = "method",
						description = [[]],
						args = "(pos: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MakeContextCurrent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsIconified"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsFloating"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ClearCursor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMouseButtonState"] = {
						type = "method",
						description = [[]],
						args = "(mouseButton: enum GLFW::MouseButton)",
						returns = "(enum GLFW::KeyState)",
						valuetype = "KeyState"
					}
				}
			},
			["Texture"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: prosper.Texture)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetImageView"] = {
						type = "method",
						description = [[]],
						args = "(arg1: prosper.ImageView)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetImage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Image)",
						valuetype = "Image"
					},
					["GetImageView"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(prosper.ImageView)",
						valuetype = "ImageView"
					},
					["GetSampler"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Sampler)",
						valuetype = "Sampler"
					},
					["GetFormat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum prosper::Format)",
						valuetype = "Format"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},

		}
	},
	["io"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["log"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["ik"] = {
		type = "lib",
		description = [[]],
		childs = {
			["FABRIkSolver"] = {
				type = "class",
				inherits = "ik.IkSolver",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["IkConstraint"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetJointIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["IkBallSocketConstraint"] = {
				type = "class",
				inherits = "ik.IkConstraint",
				description = [[]],
				childs = {
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([float])",
						valuetype = "float"
					}
				}
			},
			["IkSolver"] = {
				type = "class",
				description = [[]],
				childs = {
					["Solve"] = {
						type = "method",
						description = [[]],
						args = "(arg1: phys.ScaledTransform)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddHingeConstraint"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,axis: vector.Vector)",
						returns = "(ik.IkHingeConstraint)",
						valuetype = "IkHingeConstraint"
					},
					["GetGlobalTransform"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["Size"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["AddCustomConstraint"] = {
						type = "method",
						description = [[]],
						args = "(arg2: uint32,arg3: unknown)",
						returns = "(ik.IkConstraint)",
						valuetype = "IkConstraint"
					},
					["AddBallSocketConstraint"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,limit: float)",
						returns = "(ik.IkBallSocketConstraint)",
						valuetype = "IkBallSocketConstraint"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLocalTransform"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalTransform"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					}
				}
			},
			["CCDIkSolver"] = {
				type = "class",
				inherits = "ik.IkSolver",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["IkHingeConstraint"] = {
				type = "class",
				inherits = "ik.IkConstraint",
				description = [[]],
				childs = {
					["GetLimits"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([math.Vector2])",
						valuetype = "Vector2"
					},
					["SetLimits"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearLimits"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},

		}
	},
	["geometry"] = {
		type = "lib",
		description = [[]],
		childs = {
			["closest_point_on_aabb_to_point"] = {
				type = "function",
				description = [[]],
				args = "(min: vector.Vector,max: vector.Vector,p: vector.Vector)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["closest_point_on_plane_to_point"] = {
				type = "function",
				description = [[]],
				args = "(n: vector.Vector,d: float,p: vector.Vector)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["closest_point_on_line_to_point"] = {
				type = "function",
				description = [[]],
				args = "(start: vector.Vector,end: vector.Vector,p: vector.Vector)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["triangulate"] = {
				type = "function",
				description = [[]],
				args = "(tContour: )",
				returns = "(any)",
				valuetype = "any"
			},
			["get_side_of_point_to_plane"] = {
				type = "function",
				description = [[]],
				args = "(n: vector.Vector,d: float,p: vector.Vector)",
				returns = "(enum umath::geometry::PlaneSide)",
				valuetype = "PlaneSide"
			},
			["closest_points_between_lines"] = {
				type = "function",
				description = [[]],
				args = "(pA: vector.Vector,qA: vector.Vector,pB: vector.Vector,qB: vector.Vector,outCA: vector.Vector,outCB: vector.Vector,outD: float)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["closest_point_on_triangle_to_point"] = {
				type = "function",
				description = [[]],
				args = "(a: vector.Vector,b: vector.Vector,c: vector.Vector,p: vector.Vector)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["smallest_enclosing_sphere"] = {
				type = "function",
				description = [[]],
				args = "(tVerts: ,outCenter: vector.Vector,outRadius: float)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_triangle_winding_order"] = {
				type = "function",
				description = [[]],
				args = "(v0: math.Vector2,v1: math.Vector2,v2: math.Vector2)",
				returns = "(enum umath::geometry::WindingOrder)",
				valuetype = "WindingOrder"
			},
			["closest_point_on_sphere_to_line"] = {
				type = "function",
				description = [[]],
				args = "(origin: vector.Vector,radius: float,start: vector.Vector,end: vector.Vector)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["calc_rotation_between_planes"] = {
				type = "function",
				description = [[]],
				args = "(n0: vector.Vector,n1: vector.Vector)",
				returns = "(math.QuaternionInternal)",
				valuetype = "QuaternionInternal"
			},
			["generate_truncated_cone_mesh"] = {
				type = "function",
				description = [[]],
				args = "(arg1: vector.Vector,arg2: float,arg3: vector.Vector,arg4: float,arg5: float,arg6: any,arg7: any,arg8: any)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["calc_face_normal"] = {
				type = "function",
				description = [[]],
				args = "(v0: vector.Vector,v1: vector.Vector,v2: vector.Vector)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["calc_volume_of_triangle"] = {
				type = "function",
				description = [[]],
				args = "(v0: vector.Vector,v1: vector.Vector,v2: vector.Vector)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_volume_of_polyhedron"] = {
				type = "function",
				description = [[]],
				args = "(tVerts: ,tTriangles: )",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_point_on_triangle"] = {
				type = "function",
				description = [[]],
				args = "(v0: vector.Vector,v1: vector.Vector,v2: vector.Vector,a: float,b: float)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["calc_center_of_mass"] = {
				type = "function",
				description = [[]],
				args = "(tVerts: ,tTriangles: ,outCom: vector.Vector,outVolume: float)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["calc_triangle_area"] = {
				type = "function",
				description = [[]],
				args = "(a: vector.Vector,b: vector.Vector,c: vector.Vector)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_barycentric_coordinates"] = {
				type = "function",
				description = [[]],
				args = "(p0: vector.Vector,p1: vector.Vector,p2: vector.Vector,hitPoint: vector.Vector)",
				returns = "(math.Vector2)",
				valuetype = "Vector2"
			},
			["get_side_of_point_to_line"] = {
				type = "function",
				description = [[]],
				args = "(a: math.Vector2,b: math.Vector2,c: math.Vector2)",
				returns = "(enum umath::geometry::LineSide)",
				valuetype = "LineSide"
			},
			["get_outline_vertices"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			}
		}
	},
	["noise"] = {
		type = "lib",
		description = [[]],
		childs = {
			["perlin"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["const"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["voronoi"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["generate_height_map"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			}
		}
	},
	["unirender"] = {
		type = "lib",
		description = [[]],
		childs = {
			["register_node"] = {
				type = "function",
				description = [[]],
				args = "(typeName: string,function: any)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["register_shader"] = {
				type = "function",
				description = [[]],
				args = "(className: string,shaderClass: any)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["Shader"] = {
				type = "class",
				description = [[]],
				childs = {
					["InitializeCombinedPass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: unirender.GroupNode,arg2: unirender.Node)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetHairConfig"] = {
						type = "method",
						description = [[]],
						args = "(arg1: unirender.Shader.HairConfig)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeAlbedoPass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: unirender.GroupNode,arg2: unirender.Node)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.Material)",
						valuetype = "Material"
					},
					["ClearSubdivisionSettings"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeDepthPass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: unirender.GroupNode,arg2: unirender.Node)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeNormalPass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: unirender.GroupNode,arg2: unirender.Node)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHairConfig"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([unirender.Shader.HairConfig])",
						valuetype = "HairConfig"
					},
					["ClearHairConfig"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSubdivisionSettings"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([unirender.Shader.SubdivisionSettings])",
						valuetype = "SubdivisionSettings"
					},
					["GetEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["Initialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSubdivisionSettings"] = {
						type = "method",
						description = [[]],
						args = "(arg1: unirender.Shader.SubdivisionSettings)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HairConfig"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["defaultLength"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["curvature"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["randomHairLengthFactor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["defaultHairStrength"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["hairPerSquareMeter"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["defaultThickness"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["numSegments"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["SubdivisionSettings"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["maxLevel"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["maxEdgeScreenSize"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["GroupNode"] = {
				type = "class",
				inherits = "unirender.Node",
				description = [[]],
				childs = {
					["AddNode"] = {
						type = "method",
						description = [[]],
						args = "(nodeTypeId: uint32)",
						returns = "(any)",
						valuetype = "any"
					},
					["AddMathNode"] = {
						type = "method",
						description = [[]],
						args = "(mathOp: enum unirender::nodes::math::MathType,socket0: any,socket1: any)",
						returns = "(any)",
						valuetype = "any"
					},
					["RegisterOutput"] = {
						type = "method",
						description = [[]],
						args = "(st: enum unirender::SocketType,name: string)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["AddVectorMathNode"] = {
						type = "method",
						description = [[]],
						args = "(mathOp: enum unirender::nodes::vector_math::MathType,socket0: any,socket1: any)",
						returns = "(any)",
						valuetype = "any"
					},
					["CombineRGB"] = {
						type = "method",
						description = [[]],
						args = "(r: any,g: any,b: any)",
						returns = "(any)",
						valuetype = "any"
					},
					["RegisterProperty"] = {
						type = "method",
						description = [[]],
						args = "(st: enum unirender::SocketType,name: string,defaultValue: math.Mat4x3)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(nodeSrc: unirender.Node,socketSrc: string,nodeDst: unirender.Node,socketDst: string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddTextureNode"] = {
						type = "method",
						description = [[]],
						args = "(socket: unirender.Socket)",
						returns = "(any)",
						valuetype = "any"
					},
					["AddConstantNode"] = {
						type = "method",
						description = [[]],
						args = "(v: math.Vector)",
						returns = "(any)",
						valuetype = "any"
					},
					["SetPrimaryOutputSocket"] = {
						type = "method",
						description = [[]],
						args = "(socket: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RegisterInput"] = {
						type = "method",
						description = [[]],
						args = "(st: enum unirender::SocketType,name: string,defaultValue: math.Mat4x3)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["AddNormalMapNode"] = {
						type = "method",
						description = [[]],
						args = "(socket: unirender.Socket)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					}
				}
			},
			["SceneObject"] = {
				type = "class",
				description = [[]],
				childs = {
					["Finalize"] = {
						type = "method",
						description = [[]],
						args = "(scene: unirender.Scene)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetScene"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class unirender::Scene)",
						valuetype = "Scene"
					}
				}
			},
			["WorldObject"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector)",
						valuetype = "Vector"
					}
				}
			},
			["Renderer"] = {
				type = "class",
				description = [[]],
				childs = {
					["BeginSceneEdit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["EndSceneEdit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["HasRenderedSamplesForAllTiles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Restart"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["StartRender"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CreateProgressiveImageHandler"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.ProgressiveTexture)",
						valuetype = "ProgressiveTexture"
					},
					["GetScene"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Scene)",
						valuetype = "Scene"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["StopRendering"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ReloadShaders"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_ENABLE_LIVE_EDITING_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Scene"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetLightIntensityFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLightSources"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddLightSource"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,pos: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxTransmissionBounces"] = {
						type = "method",
						description = [[]],
						args = "(bounces: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxTransparencyBounces"] = {
						type = "method",
						description = [[]],
						args = "(bounces: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeFromGameScene"] = {
						type = "method",
						description = [[]],
						args = "(gameScene: ents.SceneComponent,camPos: math.Vector,camRot: math.QuaternionInternal,vp: math.Mat4,nearZ: float,farZ: float,fov: float,sceneFlags: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSkyStrength"] = {
						type = "method",
						description = [[]],
						args = "(skyStrength: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(ds: util.DataStream,rootDir: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(ds: util.DataStream,rootDir: string,serializationData: unirender.Scene.SerializationData)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSky"] = {
						type = "method",
						description = [[]],
						args = "(skyPath: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSkyAngles"] = {
						type = "method",
						description = [[]],
						args = "(skyAngles: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindObjectByName"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(unirender.Object)",
						valuetype = "Object"
					},
					["AddCache"] = {
						type = "method",
						description = [[]],
						args = "(cache: unirender.Cache)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Finalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxBounces"] = {
						type = "method",
						description = [[]],
						args = "(bounces: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEmissionStrength"] = {
						type = "method",
						description = [[]],
						args = "(emissionStrength: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCamera"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Camera)",
						valuetype = "Camera"
					},
					["SetSkyTransparent"] = {
						type = "method",
						description = [[]],
						args = "(transparent: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxDiffuseBounces"] = {
						type = "method",
						description = [[]],
						args = "(bounces: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxGlossyBounces"] = {
						type = "method",
						description = [[]],
						args = "(bounces: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetResolution"] = {
						type = "method",
						description = [[]],
						args = "(width: uint32,height: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RENDER_MODE_INDIRECT_SPECULAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_INDIRECT_SPECULAR_REFLECT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_INDIRECT_SPECULAR_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_INDIRECT_GLOSSY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_INDIRECT_GLOSSY_REFLECT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_INDIRECT_GLOSSY_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_BAKE_AMBIENT_OCCLUSION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_BAKE_DIFFUSE_LIGHTING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_BAKE_NORMALS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DENOISE_MODE_DETAILED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DENOISE_MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DENOISE_MODE_FAST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SCENE_FLAG_BIT_CULL_OBJECTS_OUTSIDE_CAMERA_FRUSTUM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SCENE_FLAG_BIT_CULL_OBJECTS_OUTSIDE_PVS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_INDIRECT_DIFFUSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_INDIRECT_DIFFUSE_REFLECT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_INDIRECT_DIFFUSE_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEVICE_TYPE_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEVICE_TYPE_GPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_DIRECT_DIFFUSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_DIRECT_DIFFUSE_REFLECT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_DIRECT_DIFFUSE_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_DIRECT_GLOSSY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_DIRECT_GLOSSY_REFLECT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_DIRECT_GLOSSY_TRANSMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_DEPTH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_ALBEDO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_CAUSTIC"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_EMISSION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_COMBINED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_GEOMETRY_NORMAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_IRRADIANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_NOISE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_NORMALS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_SHADING_NORMAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_MODE_UV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SCENE_FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CreateInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetColorTransform"] = {
								type = "method",
								description = [[]],
								args = "(config: string,lookName: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetSamplesPerPixel"] = {
								type = "method",
								description = [[]],
								args = "(samples: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["progressiveRefine"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["preCalculateLight"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["progressive"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["exposure"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["hdrOutput"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["denoiseMode"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["deviceType"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["renderer"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["SerializationData"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["outputFileName"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["Object"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsSubdivisionEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetSubdivisionEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Node"] = {
				type = "class",
				description = [[]],
				childs = {
					["GreaterThanOrEqualTo"] = {
						type = "method",
						description = [[]],
						args = "(nodeOther: unirender.Node)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["IsGroupNode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetInputSocket"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "([unirender.Socket])",
						valuetype = "Socket"
					},
					["GetPrimaryOutputSocket"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([unirender.Socket])",
						valuetype = "Socket"
					},
					["GetOutputSocket"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "([unirender.Socket])",
						valuetype = "Socket"
					},
					["LessThan"] = {
						type = "method",
						description = [[]],
						args = "(nodeOther: unirender.Node)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LessThanOrEqualTo"] = {
						type = "method",
						description = [[]],
						args = "(nodeOther: unirender.Node)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["GetPropertySocket"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "([unirender.Socket])",
						valuetype = "Socket"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GreaterThan"] = {
						type = "method",
						description = [[]],
						args = "(nodeOther: unirender.Node)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["GetTypeName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mod"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__pow"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetProperty"] = {
						type = "method",
						description = [[]],
						args = "(propertyName: string,value: )",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetProperty"] = {
						type = "method",
						description = [[]],
						args = "(socketName: string)",
						returns = "(any)",
						valuetype = "any"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.GroupNode)",
						valuetype = "GroupNode"
					}
				}
			},
			["Socket"] = {
				type = "class",
				description = [[]],
				childs = {
					["GreaterThanOrEqualTo"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(scale: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Abs"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["IsConcreteValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Sqrt"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mod"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Invert"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["__pow"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unirender.Socket)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Acos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["GetSocketName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Atan"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["IsOutputSocket"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Mix"] = {
						type = "method",
						description = [[]],
						args = "(oSocketOther: any,oFac: any,mixType: enum unirender::nodes::mix::Mix)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["ToGrayScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Fraction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["LessThan"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Sin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Cos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Asin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Round"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Atan2"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Min"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Link"] = {
						type = "method",
						description = [[]],
						args = "(v: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Max"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Reflect"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Clamp"] = {
						type = "method",
						description = [[]],
						args = "(min: any,max: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(other: unirender.Socket,factor: unirender.Socket)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Ceil"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Floor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LessThanOrEqualTo"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["GetNode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Node)",
						valuetype = "Node"
					},
					["IsNodeSocket"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Tan"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["Log"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["GreaterThan"] = {
						type = "method",
						description = [[]],
						args = "(socketOther: any)",
						returns = "(unirender.Socket)",
						valuetype = "Socket"
					},
					["TYPE_FLOAT_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BOOL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_STRING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ENUM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_CLOSURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_COLOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_COLOR_ARRAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_NORMAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_INT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_NODE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_POINT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_POINT2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_TRANSFORM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_UINT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VECTOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ProgressiveTexture"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					}
				}
			},
			["Camera"] = {
				type = "class",
				inherits = "unirender.WorldObject unirender.SceneObject",
				description = [[]],
				childs = {
					["SetFOV"] = {
						type = "method",
						description = [[]],
						args = "(fov: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCameraType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum unirender::Camera::CameraType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetApertureSizeFromFStop"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPanoramaType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum unirender::Camera::PanoramaType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBokehRatio"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBladeCount"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFarZ"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEquirectangularHorizontalRange"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetInterocularDistance"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEquirectangularVerticalRange"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetApertureSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFOVFromFocalLength"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFocalDistance"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthOfFieldEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStereoscopic"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBladesRotation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetNearZ"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetResolution"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PANORAMA_TYPE_FISHEYE_EQUIDISTANT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PANORAMA_TYPE_FISHEYE_EQUISOLID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PANORAMA_TYPE_EQUIRECTANGULAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PANORAMA_TYPE_MIRRORBALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_PERSPECTIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_ORTHOGRAPHIC"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_PANORAMA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Cache"] = {
				type = "class",
				description = [[]],
				childs = {
					["InitializeFromGameScene"] = {
						type = "method",
						description = [[]],
						args = "(gameScene: ents.SceneComponent)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["LightSource"] = {
				type = "class",
				inherits = "unirender.WorldObject",
				description = [[]],
				childs = {
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetIntensity"] = {
						type = "method",
						description = [[]],
						args = "(intensity: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAxisV"] = {
						type = "method",
						description = [[]],
						args = "(axisV: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAxisU"] = {
						type = "method",
						description = [[]],
						args = "(axisU: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSizeU"] = {
						type = "method",
						description = [[]],
						args = "(sizeU: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSizeV"] = {
						type = "method",
						description = [[]],
						args = "(sizeV: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetConeAngles"] = {
						type = "method",
						description = [[]],
						args = "(innerAngle: float,outerAngle: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSize"] = {
						type = "method",
						description = [[]],
						args = "(size: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TYPE_AREA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_TRIANGLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SPOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_DIRECTIONAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_BACKGROUND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_POINT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["os"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["tf2"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["locale"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_language"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(string)",
				valuetype = "string"
			},
			["change_language"] = {
				type = "function",
				description = [[]],
				args = "(lan: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["set_text"] = {
				type = "function",
				description = [[]],
				args = "(id: string,text: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["load"] = {
				type = "function",
				description = [[]],
				args = "(fileName: string)",
				returns = "(bool)",
				valuetype = "bool"
			}
		}
	},
	["fudm"] = {
		type = "lib",
		description = [[]],
		childs = {
			["impl"] = {
				type = "lib",
				description = [[]],
				childs = {
					["name_to_type_id"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},
					["registered_types"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},
					["class_to_type_id"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},

				}
			},

		}
	},
	["input"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["asset"] = {
		type = "lib",
		description = [[]],
		childs = {
			["find_file"] = {
				type = "function",
				description = [[]],
				args = "(name: string,type: enum pragma::asset::Type)",
				returns = "([string])",
				valuetype = "string"
			},
			["is_loaded"] = {
				type = "function",
				description = [[]],
				args = "(name: string,type: enum pragma::asset::Type)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["exists"] = {
				type = "function",
				description = [[]],
				args = "(name: string,type: enum pragma::asset::Type)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["delete"] = {
				type = "function",
				description = [[]],
				args = "(name: string,type: enum pragma::asset::Type)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["clear_unused_models"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["clear_unused_materials"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["matches"] = {
				type = "function",
				description = [[]],
				args = "(name0: string,name1: string,type: enum pragma::asset::Type)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["clear_flagged_models"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["flag_model_for_cache_removal"] = {
				type = "function",
				description = [[]],
				args = "(mdl: game.Model)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["lock_asset_watchers"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["unlock_asset_watchers"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_supported_import_file_extensions"] = {
				type = "function",
				description = [[]],
				args = "(type: enum pragma::asset::Type)",
				returns = "(tablestring)",
				valuetype = "table<string>"
			},
			["get_supported_export_file_extensions"] = {
				type = "function",
				description = [[]],
				args = "(type: enum pragma::asset::Type)",
				returns = "(tablestring)",
				valuetype = "table<string>"
			},
			["get_normalized_path"] = {
				type = "function",
				description = [[]],
				args = "(name: string,type: enum pragma::asset::Type)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_supported_extensions"] = {
				type = "function",
				description = [[]],
				args = "(type: enum pragma::asset::Type)",
				returns = "(tablestring)",
				valuetype = "table<string>"
			},
			["get_legacy_extension"] = {
				type = "function",
				description = [[]],
				args = "(type: enum pragma::asset::Type)",
				returns = "([string])",
				valuetype = "string"
			},
			["get_asset_root_directory"] = {
				type = "function",
				description = [[]],
				args = "(type: enum pragma::asset::Type)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_binary_udm_extension"] = {
				type = "function",
				description = [[]],
				args = "(type: enum pragma::asset::Type)",
				returns = "([string])",
				valuetype = "string"
			},
			["get_ascii_udm_extension"] = {
				type = "function",
				description = [[]],
				args = "(type: enum pragma::asset::Type)",
				returns = "([string])",
				valuetype = "string"
			},
			["determine_format_from_data"] = {
				type = "function",
				description = [[]],
				args = "(f: file.File,type: enum pragma::asset::Type)",
				returns = "([string])",
				valuetype = "string"
			},
			["determine_format_from_filename"] = {
				type = "function",
				description = [[]],
				args = "(fileName: string,type: enum pragma::asset::Type)",
				returns = "([string])",
				valuetype = "string"
			},
			["determine_type_from_extension"] = {
				type = "function",
				description = [[]],
				args = "(ext: string)",
				returns = "([enum pragma::asset::Type])",
				valuetype = "Type"
			},
			["matches_format"] = {
				type = "function",
				description = [[]],
				args = "(format0: string,format1: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["relative_path_to_absolute_path"] = {
				type = "function",
				description = [[]],
				args = "(path: string,type: enum pragma::asset::Type)",
				returns = "(string)",
				valuetype = "string"
			},
			["absolute_path_to_relative_path"] = {
				type = "function",
				description = [[]],
				args = "(path: string,type: enum pragma::asset::Type)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_udm_format_extension"] = {
				type = "function",
				description = [[]],
				args = "(type: enum pragma::asset::Type,binary: bool)",
				returns = "([string])",
				valuetype = "string"
			},
			["clear_unused_textures"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["TextureImportInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["srgb"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normalMap"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["MapExportInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AddCamera"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.CameraComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddLightSource"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.LightComponent)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["includeMapLightSources"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["engine"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_tick_count"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["load_library"] = {
				type = "function",
				description = [[]],
				args = "(path: string)",
				returns = "(variantbool|string)",
				valuetype = "variant<bool,string>"
			},
			["library_exists"] = {
				type = "function",
				description = [[]],
				args = "(library: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_info"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tablenil)",
				valuetype = "table<nil>"
			},
			["poll_console_output"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([string[,enum Con::MessageFlags[,util.Color])",
				valuetype = "string"
			},
			["shutdown"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_working_directory"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(string)",
				valuetype = "string"
			},
			["set_record_console_output"] = {
				type = "function",
				description = [[]],
				args = "(record: bool)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["unbind_key"] = {
				type = "function",
				description = [[]],
				args = "(key: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_font"] = {
				type = "function",
				description = [[]],
				args = "(identifier: string)",
				returns = "(engine.FontInfo)",
				valuetype = "FontInfo"
			},
			["set_fixed_frame_delta_time_interpretation"] = {
				type = "function",
				description = [[]],
				args = "(fps: uint16)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["bind_key"] = {
				type = "function",
				description = [[]],
				args = "(key: string,function: any)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["clear_fixed_frame_delta_time_interpretation"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_window_resolution"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(math.Vector2i)",
				valuetype = "Vector2i"
			},
			["set_tick_delta_time_tied_to_frame_rate"] = {
				type = "function",
				description = [[]],
				args = "(tieToFrameRate: bool)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_render_resolution"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(math.Vector2i)",
				valuetype = "Vector2i"
			},
			["get_staging_render_target"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(prosper.RenderTarget)",
				valuetype = "RenderTarget"
			},
			["get_current_frame_index"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["get_text_size"] = {
				type = "function",
				description = [[]],
				args = "(text: string,font: engine.FontInfo)",
				returns = "(math.Vector2i)",
				valuetype = "Vector2i"
			},
			["create_font"] = {
				type = "function",
				description = [[]],
				args = "(identifier: string,font: string,size: uint32)",
				returns = "(engine.FontInfo)",
				valuetype = "FontInfo"
			},
			["FontInfo"] = {
				type = "class",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["package"] = {
		type = "lib",
		description = [[]],
		childs = {
			["preload"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["loaders"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},

		}
	},
	["sound"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Source"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetPriority"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetRoomRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetFadeOutDuration"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetConeAngles"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxGain"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxDistance"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOuterConeGainHF"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetGain"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum ALSoundType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMinGain"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetMinGain"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDopplerFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetInnerConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOuterConeAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGain"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetOuterConeGainHF"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetDirection"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRangeOffsets"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float)",
						valuetype = "float"
					},
					["SetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsRelative"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetTimeOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetReferenceDistance"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum ALSoundType)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAirAbsorptionFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Play"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Rewind"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRelative"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRoomRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetPriority"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetReferenceDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetRolloffFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetMaxDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["HasRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetDirectFilter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float,float)",
						valuetype = "float"
					},
					["GetMaxGain"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetInnerConeAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetLeftStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetOuterConeAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetOuterConeGain"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetOuterConeGain"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGainAuto"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool,bool,bool)",
						valuetype = "bool"
					},
					["CallOnStateChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unknown)",
						returns = "(util.Callback)",
						valuetype = "Callback"
					},
					["FadeIn"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FadeOut"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaxAudibleDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetIntensity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["SetFadeInDuration"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDopplerFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFadeInDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetLeftStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRightStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRightStereoAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetAirAbsorptionFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetConeAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float)",
						valuetype = "float"
					},
					["GetDirection"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["RemoveEffect"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDirectFilter"] = {
						type = "method",
						description = [[]],
						args = "(gain: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddEffect"] = {
						type = "method",
						description = [[]],
						args = "(name: string,gain: float)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetEffectParameters"] = {
						type = "method",
						description = [[]],
						args = "(name: string,gain: float)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetGainRange"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGainRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float)",
						valuetype = "float"
					},
					["GetSendGainAuto"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetDistanceRange"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOffset"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOuterConeGains"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float)",
						valuetype = "float"
					},
					["SetStereoAngles"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStereoAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float)",
						valuetype = "float"
					},
					["SetOuterConeGains"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLooping"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDirectGainHFAuto"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetVelocity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEffectGain"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRolloffFactors"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float)",
						valuetype = "float"
					},
					["SetRolloffFactors"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float)",
						valuetype = "float"
					},
					["ClearRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSendGainHFAuto"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetDistanceRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float,float)",
						valuetype = "float"
					},
					["SetGainAuto"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool,arg2: bool,arg3: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOrientation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector,vector.Vector)",
						valuetype = "Vector"
					},
					["SetOrientation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFadeOutDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["IsStopped"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum ALState)",
						valuetype = "enum ALState"
					},
					["Pause"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsPlaying"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsLooping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum ALSoundType)",
						valuetype = "enum ALSoundType"
					},
					["GetSource"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["SetSource"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPhonemeData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([tablenil])",
						valuetype = "table<nil>"
					}
				}
			},
			["Effect"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetProperties"] = {
						type = "method",
						description = [[]],
						args = "(props: sound.Effect.EqualizerProperties)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PitchShifterProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["coarseTune"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["fineTune"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["FrequencyShifterProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["leftDirection"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["frequency"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["rightDirection"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["AutoWahProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["peakGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["attackTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["releaseTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["resonance"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["FlangerProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["rate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["depth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["feedback"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phase"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["delay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["EqualizerProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["mid1Width"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["highCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid2Gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["highGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid2Center"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lowCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid2Width"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lowGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid1Gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["mid1Center"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["EchoProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["lrDelay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["feedback"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["damping"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["spread"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["delay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["RingModulatorProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["highpassCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["frequency"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["ReverbProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["lateReverbGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["modulationTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["reflectionsPan"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lateReverbDelay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["diffusion"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["modulationDepth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lateReverbPan"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["echoTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["echoDepth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["airAbsorptionGainHF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["hfReference"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lfReference"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["roomRolloffFactor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayHFLimit"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["density"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gainHF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gainLF"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayTime"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayHFRatio"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["decayLFRatio"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["reflectionsGain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["reflectionsDelay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["CompressorProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["onOff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["VocalMorpherProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["rate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeB"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeBCoarseTuning"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeACoarseTuning"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phonemeA"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["DistortionProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["eqBandwidth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["eqCenter"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["gain"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["edge"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["lowpassCutoff"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},
					["ChorusProperties"] = {
						type = "class",
						description = [[]],
						childs = {
							["__init"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["rate"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["depth"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["feedback"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["waveform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["phase"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["delay"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},

		}
	},
	["ai"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_schedule"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(ai.Schedule)",
				valuetype = "Schedule"
			},
			["register_faction"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(ai.Faction)",
				valuetype = "Faction"
			},
			["find_faction_by_name"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["get_factions"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(any)",
				valuetype = "any"
			},
			["register_task"] = {
				type = "function",
				description = [[]],
				args = "(taskClass: any)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["Memory"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFragmentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetFragments"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableai.MemoryFragment)",
						valuetype = "MemoryFragment>"
					},
					["TYPE_SMELL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SOUND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_VISUAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BehaviorTask"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTask"] = {
						type = "method",
						description = [[]],
						args = "(nodeId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterType"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTasks"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetScheduleParameter"] = {
						type = "method",
						description = [[]],
						args = "(taskParamId: uint8,scheduleParamId: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CreateTask"] = {
						type = "method",
						description = [[]],
						args = "(o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LinkParameter"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8,taskOther: ai.BehaviorTask)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CreateDecoratedTask"] = {
						type = "method",
						description = [[]],
						args = "(decoratorType: uint32,o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,s: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsActive"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDebugName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSelectorType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDebugName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasParameter"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,i: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,f: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,ent: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,v: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(sched: ai.Schedule,paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RESULT_PENDING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RESULT_FAILED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RESULT_INITIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RESULT_SUCCEEDED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTOR_TYPE_RANDOM_SHUFFLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTOR_TYPE_SEQUENTIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_ALWAYS_FAIL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_ALWAYS_SUCCEED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_LIMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_INHERIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_INVERT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_REPEAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_UNTIL_FAIL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DECORATOR_TYPE_UNTIL_SUCCESS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SELECTOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SEQUENCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_BOOL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_ENTITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_EULER_ANGLES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_FLOAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_STRING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_INT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_QUATERNION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TYPE_VECTOR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskDebugDrawText"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMessage"] = {
						type = "method",
						description = [[]],
						args = "(msg: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_MESSAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskDebugPrint"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMessage"] = {
						type = "method",
						description = [[]],
						args = "(msg: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_MESSAGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlaySound"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetPitch"] = {
						type = "method",
						description = [[]],
						args = "(pitch: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetGain"] = {
						type = "method",
						description = [[]],
						args = "(gain: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoundName"] = {
						type = "method",
						description = [[]],
						args = "(sndName: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_GAIN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_PITCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_SOUND_NAME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Squad"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMembers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableents.BaseEntityBase)",
						valuetype = "BaseEntityBase>"
					}
				}
			},
			["TaskDecorator"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetDecoratorType"] = {
						type = "method",
						description = [[]],
						args = "(decoratorType: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLimit"] = {
						type = "method",
						description = [[]],
						args = "(limit: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_DECORATOR_TYPE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_LIMIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskMoveToTarget"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMoveTarget"] = {
						type = "method",
						description = [[]],
						args = "(ent: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMoveDistance"] = {
						type = "method",
						description = [[]],
						args = "(dist: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMoveActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_DISTANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_TARGET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_MOVE_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskEvent"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetEventId"] = {
						type = "method",
						description = [[]],
						args = "(eventId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEventArgument"] = {
						type = "method",
						description = [[]],
						args = "(argIdx: uint32,arg: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_EVENT_ARGS_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_EVENT_ID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayAnimation"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetFaceTarget"] = {
						type = "method",
						description = [[]],
						args = "(target: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(animation: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFacePrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_FACE_TARGET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["MemoryFragment"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetLastKnownVelocity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetLastTimeSeen"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetLastCheckTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["GetLastTimeSensed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetLastTimeHeared"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["IsInView"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetLastKnownPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					}
				}
			},
			["Faction"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["AddClass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAlliedFaction"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasClass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetClasses"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablestring)",
						valuetype = "table<string>"
					},
					["SetDisposition"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction,disposition: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFearsomeFaction"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEnemyFaction"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetNeutralFaction"] = {
						type = "method",
						description = [[]],
						args = "(factionTgt: ai.Faction)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDisposition"] = {
						type = "method",
						description = [[]],
						args = "(ent: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDefaultDisposition"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum DISPOSITION)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDefaultDisposition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum DISPOSITION)",
						valuetype = "enum DISPOSITION"
					}
				}
			},
			["TaskWait"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMinWaitTime"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxWaitTime"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetWaitTime"] = {
						type = "method",
						description = [[]],
						args = "(t: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_MAX_WAIT_TIME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_MIN_WAIT_TIME"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseBehaviorTask"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Think"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ai.Schedule,arg2: ents.AIComponent,arg3: uint32)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["OnTaskComplete"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ai.Schedule,arg2: uint32,arg3: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnSetScheduleParameter"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint8,arg2: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Start"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ai.Schedule,arg2: ents.AIComponent)",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["TaskLookAtTarget"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetLookDuration"] = {
						type = "method",
						description = [[]],
						args = "(duration: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_LOOK_DURATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayActivity"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetFaceTarget"] = {
						type = "method",
						description = [[]],
						args = "(target: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFacePrimaryTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_FACE_TARGET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayLayeredAnimation"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(animation: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAnimationSlot"] = {
						type = "method",
						description = [[]],
						args = "(animationSlot: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_ANIMATION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_ANIMATION_SLOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Schedule"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,b: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterType"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddInterruptFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DebugPrint"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetInterruptFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInterruptFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Cancel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddTask"] = {
						type = "method",
						description = [[]],
						args = "(node: class pragma::ai::BehaviorNode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRootTask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasParameter"] = {
						type = "method",
						description = [[]],
						args = "(parameterId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,i: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,f: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,s: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterEntity"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,ent: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterVector"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,v: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterQuaternion"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParameterEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint8,ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterBool"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterInt"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterFloat"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParameterString"] = {
						type = "method",
						description = [[]],
						args = "(paramIdx: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["MoveInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["faceTarget"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["turnSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["moveSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["destinationTolerance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["moveOnPath"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["activity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskPlayLayeredActivity"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetAnimationSlot"] = {
						type = "method",
						description = [[]],
						args = "(animationSlot: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_ANIMATION_SLOT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskRandom"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetChance"] = {
						type = "method",
						description = [[]],
						args = "(chance: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_CHANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TaskMoveRandom"] = {
				type = "class",
				inherits = "ai.BehaviorTask",
				description = [[]],
				childs = {
					["SetMoveActivity"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMoveDistance"] = {
						type = "method",
						description = [[]],
						args = "(dist: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARAMETER_DISTANCE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARAMETER_MOVE_ACTIVITY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["animation"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Player"] = {
				type = "class",
				description = [[]],
				childs = {
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetLooping"] = {
						type = "method",
						description = [[]],
						args = "(looping: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentTimeFraction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCurrentSlice"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(animation.Slice)",
						valuetype = "Slice"
					},
					["Advance"] = {
						type = "method",
						description = [[]],
						args = "(dt: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRemainingDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCurrentTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "(playbackRate: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPlaybackRate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["IsLooping"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: animation.Animation2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCurrentTime"] = {
						type = "method",
						description = [[]],
						args = "(time: float,force: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Channel"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetInterpolation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::animation::AnimationChannelInterpolation)",
						valuetype = "AnimationChannelInterpolation"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetInterpolation"] = {
						type = "method",
						description = [[]],
						args = "(interp: enum pragma::animation::AnimationChannelInterpolation)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTargetPath"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Path)",
						valuetype = "Path"
					},
					["Load"] = {
						type = "method",
						description = [[]],
						args = "(prop: udm.LinkedPropertyWrapper)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetValueArray"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["SetTargetPath"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTimesArray"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(udm.LinkedPropertyWrapper)",
						valuetype = "LinkedPropertyWrapper"
					},
					["GetValueType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum udm::Type)",
						valuetype = "Type"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(prop: udm.LinkedPropertyWrapper)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetValueType"] = {
						type = "method",
						description = [[]],
						args = "(type: enum udm::Type)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Pose"] = {
				type = "class",
				description = [[]],
				childs = {
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(other: animation.Pose,f: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Globalize"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: Model.Skeleton)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBoneIndex"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,boneIdx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Localize"] = {
						type = "method",
						description = [[]],
						args = "(skeleton: Model.Skeleton)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTransformCount"] = {
						type = "method",
						description = [[]],
						args = "(count: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdx: uint32)",
						returns = "(phys.ScaledTransform)",
						valuetype = "ScaledTransform"
					},
					["SetTransform"] = {
						type = "method",
						description = [[]],
						args = "(boneIdx: uint32,transform: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneTranslationTable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableuint32)",
						valuetype = "table<uint32>"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Manager"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetPreviousSlice"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(animation.Slice)",
						valuetype = "Slice"
					},
					["GetCurrentAnimationId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["PlayAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([animation.Animation2])",
						valuetype = "Animation2"
					},
					["GetPlayer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(animation.Player)",
						valuetype = "Player"
					},
					["StopAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetModel"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([game.Model])",
						valuetype = "Model"
					}
				}
			},
			["Animation2"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetChannelCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["FindChannel"] = {
						type = "method",
						description = [[]],
						args = "(path: util.Path)",
						returns = "([animation.Channel])",
						valuetype = "Channel"
					},
					["GetAnimationSpeedFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDuration"] = {
						type = "method",
						description = [[]],
						args = "(duration: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddChannel"] = {
						type = "method",
						description = [[]],
						args = "(path: string,valueType: enum udm::Type)",
						returns = "([animation.Channel])",
						valuetype = "Channel"
					},
					["GetChannels"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableanimation.Channel)",
						valuetype = "Channel>"
					},
					["SetAnimationSpeedFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Slice"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChannelValueCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetChannelProperty"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "([udm.Property])",
						valuetype = "Property"
					}
				}
			},

		}
	},
	["function_info"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_function_overloads"] = {
				type = "function",
				description = [[]],
				args = "(fn: any)",
				returns = "(any)",
				valuetype = "any"
			},
			["get_function_name"] = {
				type = "function",
				description = [[]],
				args = "(fn: any)",
				returns = "(string)",
				valuetype = "string"
			}
		}
	},
	["resource"] = {
		type = "lib",
		description = [[]],
		childs = {
			["add_file"] = {
				type = "function",
				description = [[]],
				args = "(res: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["add_lua_file"] = {
				type = "function",
				description = [[]],
				args = "(f: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_list"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(any)",
				valuetype = "any"
			}
		}
	},
	["doc"] = {
		type = "lib",
		description = [[]],
		childs = {
			["load"] = {
				type = "function",
				description = [[]],
				args = "(fileName: string)",
				returns = "([doc.Collection])",
				valuetype = "Collection"
			},
			["autogenerate"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["generate_lad_assets"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["generate_zerobrane_autocomplete_script"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["Group"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Enum"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGameStateFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TYPE_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_REGULAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Module"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetTarget"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["DerivedFrom"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["BaseCollectionObject"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Member"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetGameStateFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDefault"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(struct pragma::doc::Variant)",
						valuetype = "Variant"
					},
					["MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MODE_READ"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["MODE_WRITE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Overload"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetParameters"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Function"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGameStateFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetExampleCode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRelated"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOverloads"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_BIT_DEBUG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_DEPRECATED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_VANILLA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FUNCTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_HOOK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_METHOD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["EnumSet"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetUnderlyingType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEnums"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Collection"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEnumSets"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDescription"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFunctions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMembers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRelated"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFullName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWikiURL"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDerivedFrom"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_BIT_BASE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_CLASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_LIBRARY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["console"] = {
		type = "lib",
		description = [[]],
		childs = {
			["register_variable"] = {
				type = "function",
				description = [[]],
				args = "(cmd: string,def: string,flags: enum ConVarFlags,help: string)",
				returns = "(console.Var)",
				valuetype = "Var"
			},
			["get_convar"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(console.Var)",
				valuetype = "Var"
			},
			["register_command"] = {
				type = "function",
				description = [[]],
				args = "(arg1: string,arg2: unknown)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_convar_bool"] = {
				type = "function",
				description = [[]],
				args = "(conVar: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_convar_int"] = {
				type = "function",
				description = [[]],
				args = "(conVar: string)",
				returns = "(int32)",
				valuetype = "int32"
			},
			["get_convar_string"] = {
				type = "function",
				description = [[]],
				args = "(conVar: string)",
				returns = "(string)",
				valuetype = "string"
			},
			["get_convar_float"] = {
				type = "function",
				description = [[]],
				args = "(conVar: string)",
				returns = "(float)",
				valuetype = "float"
			},
			["get_convar_flags"] = {
				type = "function",
				description = [[]],
				args = "(conVar: string)",
				returns = "(enum ConVarFlags)",
				valuetype = "enum ConVarFlags"
			},
			["register_override"] = {
				type = "function",
				description = [[]],
				args = "(src: string,dst: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["clear_override"] = {
				type = "function",
				description = [[]],
				args = "(src: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["Var"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetDefault"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetHelpText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetBool"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFloat"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["AddChangeCallback"] = {
						type = "method",
						description = [[]],
						args = "(arg2: unknown)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum ConVarFlags)",
						valuetype = "enum ConVarFlags"
					},
					["GetInt"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					}
				}
			},

		}
	},
	["matrix"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_look_at_matrix"] = {
				type = "function",
				description = [[]],
				args = "(arg0: vector.Vector,arg1: vector.Vector,arg2: vector.Vector)",
				returns = "(Mat4)",
				valuetype = "(Mat4)"
			},
			["calc_covariance_matrix"] = {
				type = "function",
				description = [[]],
				args = "(points: )",
				returns = "(math.Mat3)",
				valuetype = "Mat3"
			},
			["create_perspective_matrix"] = {
				type = "function",
				description = [[]],
				args = "(fov: float,aspectRatio: float,zNear: float,zFar: float)",
				returns = "(math.Mat4)",
				valuetype = "Mat4"
			},
			["calc_projection_depth_bias_offset"] = {
				type = "function",
				description = [[]],
				args = "(p: float,nearZ: float,farZ: float,d: float,delta: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["create_from_axis_angle"] = {
				type = "function",
				description = [[]],
				args = "(v: vector.Vector,ang: float)",
				returns = "(math.Mat4)",
				valuetype = "Mat4"
			},
			["create_from_axes"] = {
				type = "function",
				description = [[]],
				args = "(forward: vector.Vector,right: vector.Vector,up: vector.Vector)",
				returns = "(math.Mat4)",
				valuetype = "Mat4"
			},
			["create_orthogonal_matrix"] = {
				type = "function",
				description = [[]],
				args = "(left: float,right: float,bottom: float,top: float,zNear: float,zFar: float)",
				returns = "(math.Mat4)",
				valuetype = "Mat4"
			}
		}
	},
	["time"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_timer"] = {
				type = "function",
				description = [[]],
				args = "(delay: float,repetitions: int32,fc: any)",
				returns = "(time.Timer)",
				valuetype = "Timer"
			},
			["cur_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(float)",
				valuetype = "float"
			},
			["real_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(float)",
				valuetype = "float"
			},
			["create_simple_timer"] = {
				type = "function",
				description = [[]],
				args = "(delay: float,fc: any)",
				returns = "(time.Timer)",
				valuetype = "Timer"
			},
			["delta_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(float)",
				valuetype = "float"
			},
			["time_since_epoch"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["convert_duration"] = {
				type = "function",
				description = [[]],
				args = "(duration: int32,srcType: enum util::DurationType,dstType: enum util::DurationType)",
				returns = "(int32)",
				valuetype = "int32"
			},
			["frame_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(float)",
				valuetype = "float"
			},
			["server_time"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(float)",
				valuetype = "float"
			},
			["Timer"] = {
				type = "class",
				description = [[]],
				childs = {
					["Start"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Call"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRepetitions"] = {
						type = "method",
						description = [[]],
						args = "(reps: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Stop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Pause"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsPaused"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInterval"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetInterval"] = {
						type = "method",
						description = [[]],
						args = "(time: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRepetitionsLeft"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsRunning"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCall"] = {
						type = "method",
						description = [[]],
						args = "(o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTimeLeft"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},

		}
	},
	["nav"] = {
		type = "lib",
		description = [[]],
		childs = {
			["load"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([nav.Mesh])",
				valuetype = "Mesh"
			},
			["generate"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["Config"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PARTITION_TYPE_LAYERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARTITION_TYPE_MONOTONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PARTITION_TYPE_WATERSHED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["samplePartitionType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["characterHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["minRegionSize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["walkableRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["walkableSlopeAngle"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxClimbHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["cellSize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxEdgeLength"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxSimplificationError"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mergeRegionSize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["cellHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["vertsPerPoly"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["sampleDetailDist"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["sampleDetailMaxError"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["RayCast"] = {
						type = "method",
						description = [[]],
						args = "(start: vector.Vector,end: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(fname: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetConfig"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nav.Config)",
						valuetype = "Config"
					}
				}
			},

		}
	},
	["mesh"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["game"] = {
		type = "lib",
		description = [[]],
		childs = {
			["get_time_scale"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(float)",
				valuetype = "float"
			},
			["register_ammo_type"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["change_map"] = {
				type = "function",
				description = [[]],
				args = "(mapName: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["add_callback"] = {
				type = "function",
				description = [[]],
				args = "(identifier: string,function: unknown)",
				returns = "([util.Callback])",
				valuetype = "Callback"
			},
			["set_gravity"] = {
				type = "function",
				description = [[]],
				args = "(gravity: vector.Vector)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_gravity"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["load_sound_scripts"] = {
				type = "function",
				description = [[]],
				args = "(fileName: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["precache_model"] = {
				type = "function",
				description = [[]],
				args = "(mdlName: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["load_material"] = {
				type = "function",
				description = [[]],
				args = "(mat: string)",
				returns = "(game.Material)",
				valuetype = "Material"
			},
			["load_model"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(any)",
				valuetype = "any"
			},
			["get_model"] = {
				type = "function",
				description = [[]],
				args = "(mdlName: string)",
				returns = "(game.Model)",
				valuetype = "Model"
			},
			["set_time_scale"] = {
				type = "function",
				description = [[]],
				args = "(timeScale: float)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_light_color"] = {
				type = "function",
				description = [[]],
				args = "(pos: vector.Vector)",
				returns = "([vector.Vector])",
				valuetype = "Vector"
			},
			["call_callbacks"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(int32)",
				valuetype = "int32"
			},
			["is_map_loaded"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(bool)",
				valuetype = "bool"
			},
			["clear_callbacks"] = {
				type = "function",
				description = [[]],
				args = "(identifier: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_ammo_type_id"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "([uint32])",
				valuetype = "uint32"
			},
			["get_ammo_type_name"] = {
				type = "function",
				description = [[]],
				args = "(typeId: uint32)",
				returns = "([string])",
				valuetype = "string"
			},
			["get_game_mode"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([ents.BaseGamemodeComponent])",
				valuetype = "BaseGamemodeComponent"
			},
			["clear_unused_materials"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_sound_intensity"] = {
				type = "function",
				description = [[]],
				args = "(pos: vector.Vector)",
				returns = "(float)",
				valuetype = "float"
			},
			["is_game_mode_initialized"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_nav_mesh"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "([nav.Mesh])",
				valuetype = "Mesh"
			},
			["load_nav_mesh"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_material"] = {
				type = "function",
				description = [[]],
				args = "(identifier: string)",
				returns = "(game.Material)",
				valuetype = "Material"
			},
			["get_map_name"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(string)",
				valuetype = "string"
			},
			["get_game_state_flags"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(enum Game::GameFlags)",
				valuetype = "GameFlags"
			},
			["load_texture"] = {
				type = "function",
				description = [[]],
				args = "(file: file.File)",
				returns = "(prosper.Texture)",
				valuetype = "Texture"
			},
			["create_material"] = {
				type = "function",
				description = [[]],
				args = "(shader: string)",
				returns = "(game.Material)",
				valuetype = "Material"
			},
			["precache_material"] = {
				type = "function",
				description = [[]],
				args = "(mat: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_error_material"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(game.Material)",
				valuetype = "Material"
			},
			["precache_particle_system"] = {
				type = "function",
				description = [[]],
				args = "(particle: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["limits"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["SurfaceMaterial"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetSubsurfaceColor"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFriction"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRestitution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAudioHighFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetHardImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStaticFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetDynamicFriction"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetAudioLowFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetRestitution"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAudioScattering"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetFootstepSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetWavePropagation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetFootstepSound"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBulletImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetWavePropagation"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetImpactParticleEffect"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSubsurfaceRadiusMM"] = {
						type = "method",
						description = [[]],
						args = "(radiusMM: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetImpactParticleEffect"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetBulletImpactSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetHardImpactSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetWaveStiffness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetSubsurfaceScatterColor"] = {
						type = "method",
						description = [[]],
						args = "(radiusRGB: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftImpactSound"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetSoftImpactSound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetIOR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([float])",
						valuetype = "float"
					},
					["GetAudioLowFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetIOR"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearIOR"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAudioLowFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAudioMidFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAudioMidFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetSubsurfaceRadiusMM"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetAudioHighFrequencyAbsorption"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAudioScattering"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPBRRoughness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetAudioLowFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetWaveStiffness"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAudioMidFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAudioMidFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNavigationFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum pragma::nav::PolyFlags)",
						valuetype = "PolyFlags"
					},
					["SetNavigationFlags"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum pragma::nav::PolyFlags)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetSubsurfaceFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetSubsurfaceFactor"] = {
						type = "method",
						description = [[]],
						args = "(factor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSubsurfaceScatterColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetSubsurfaceColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["GetPBRMetalness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetAudioHighFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAudioHighFrequencyTransmission"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetDensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetLinearDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDensity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTorqueDragCoefficient"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					}
				}
			},
			["drone"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["BulletInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["spread"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["attacker"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["force"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["distance"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["damageType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["damage"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bulletCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["inflictor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerCount"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerColor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerLength"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerSpeed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerMaterial"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tracerBloom"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ammoType"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["direction"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["effectOrigin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DamageInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["ScaleDamage"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttacker"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["SetSource"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDamage"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint16)",
						valuetype = "uint16"
					},
					["SetAttacker"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInflictor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(ents.BaseEntityBase)",
						valuetype = "BaseEntityBase"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDamageTypes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetDamageType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum DAMAGETYPE)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddDamageType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum DAMAGETYPE)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsDamageType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum DAMAGETYPE)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetSource"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetForce"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetHitPosition"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHitPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["SetForce"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHitGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum HitGroup)",
						valuetype = "enum HitGroup"
					},
					["SetHitGroup"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum HitGroup)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveDamageType"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum DAMAGETYPE)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetInflictor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDamage"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddDamage"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint16)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Model"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(texIdx: uint32,name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterialIndex"] = {
						type = "method",
						description = [[]],
						args = "(mesh: Model.Mesh.Sub,skinId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterials"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIKController"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveHitbox"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionMeshCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTextureGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterialCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasFlag"] = {
						type = "method",
						description = [[]],
						args = "(flag: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "(min: vector.Vector,max: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(fname: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBodyGroupId"] = {
						type = "method",
						description = [[]],
						args = "(bodyGroupName: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBodyGroupCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveAnimation"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupAttachment"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddHitbox"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32,hitGroup: uint32,min: vector.Vector,max: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHitboxGroup"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHitboxBones"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddJoint"] = {
						type = "method",
						description = [[]],
						args = "(type: enum JointType,child: uint16,parent: uint16)",
						returns = "(Model.Joint)",
						valuetype = "Joint"
					},
					["SetHitboxGroup"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32,hitGroup: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "(copyFlags: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetHitboxBounds"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32,min: vector.Vector,max: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTextureGroupCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveAttachment"] = {
						type = "method",
						description = [[]],
						args = "(attId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddEyeball"] = {
						type = "method",
						description = [[]],
						args = "(eyeball: Model.Eyeball)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTextureGroup"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttachmentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearBaseMeshGroupIds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSubMeshCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaterialPaths"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearCollisionMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ExportAnimation"] = {
						type = "method",
						description = [[]],
						args = "(animName: string,exportInfo: Model.ExportInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIncludeModels"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupIKController"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSkeleton"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttachments"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearMeshGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttachment"] = {
						type = "method",
						description = [[]],
						args = "(attId: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAttachment"] = {
						type = "method",
						description = [[]],
						args = "(name: string,boneId: uint32,offset: vector.Vector,ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SelectFirstAnimation"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLODCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TranslateLODMeshes"] = {
						type = "method",
						description = [[]],
						args = "(lod: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFlags"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLODData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLOD"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexFormula"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcReferenceBonePose"] = {
						type = "method",
						description = [[]],
						args = "(boneIdx: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetJoints"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveMeshGroup"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearJoints"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBodyGroupMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcFlexWeight"] = {
						type = "method",
						description = [[]],
						args = "(flexId: uint32,oFc: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(bgId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBodyGroupMesh"] = {
						type = "method",
						description = [[]],
						args = "(bodyGroupId: uint32,bgValue: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveIKController"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexControllers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(scale: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupFlexController"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBaseMeshGroupIds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupFlex"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcReferenceAttachmentPose"] = {
						type = "method",
						description = [[]],
						args = "(attIdx: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(t: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIKControllers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddIKController"] = {
						type = "method",
						description = [[]],
						args = "(name: string,chainLength: uint32,type: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddIncludeModel"] = {
						type = "method",
						description = [[]],
						args = "(modelName: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPhonemeMap"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPhonemeMap"] = {
						type = "method",
						description = [[]],
						args = "(o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AssignDistinctMaterial"] = {
						type = "method",
						description = [[]],
						args = "(group: Model.MeshGroup,mesh: Model.Mesh,subMesh: Model.Mesh.Sub)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SelectWeightedAnimation"] = {
						type = "method",
						description = [[]],
						args = "(activity: uint32,animIgnore: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddBaseMeshGroupId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimationActivityWeight"] = {
						type = "method",
						description = [[]],
						args = "(anim: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimationActivity"] = {
						type = "method",
						description = [[]],
						args = "(anim: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimationDuration"] = {
						type = "method",
						description = [[]],
						args = "(anim: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasVertexWeights"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaterialPaths"] = {
						type = "method",
						description = [[]],
						args = "(o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["GetFlexAnimationNames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["GetFlexAnimationCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetFlexAnimationName"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(any)",
						valuetype = "any"
					},
					["AddFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: string,flexAnim: Model.FlexAnimation)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(any)",
						valuetype = "any"
					},
					["GetMaterialNames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(any)",
						valuetype = "any"
					},
					["ClearFlexAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBodyGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsRootBone"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupBlendController"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: game.Model)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHitboxCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHitboxBounds"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimation"] = {
						type = "method",
						description = [[]],
						args = "(animID: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLocalBoneTransform"] = {
						type = "method",
						description = [[]],
						args = "(animId: uint32,frameId: uint32,boneId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEyeballCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(mdlOther: game.Model)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexControllerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SaveLegacy"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBlendController"] = {
						type = "method",
						description = [[]],
						args = "(blendControllerId: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddMaterialPath"] = {
						type = "method",
						description = [[]],
						args = "(path: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMeshes"] = {
						type = "method",
						description = [[]],
						args = "(o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupBodyGroup"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMeshGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMeshCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEyeOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAttachmentData"] = {
						type = "method",
						description = [[]],
						args = "(attId: uint32,data: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetObjectAttachments"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveFlexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEyeballs"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsStatic"] = {
						type = "method",
						description = [[]],
						args = "(eyeballIndex: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlexController"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddTextureGroup"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAnimation"] = {
						type = "method",
						description = [[]],
						args = "(name: string,anim: Model.Animation)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearMaterials"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveMaterial"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveMaterialPath"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LoadMaterials"] = {
						type = "method",
						description = [[]],
						args = "(bReload: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMeshGroupCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBlendControllerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32,name: string,attachment: string,oKeyValues: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetObjectAttachmentCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LookupObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMeshGroup"] = {
						type = "method",
						description = [[]],
						args = "(mgId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateCollisionBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveObjectAttachment"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTriangleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBlendControllers"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimationCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PrecacheTextureGroup"] = {
						type = "method",
						description = [[]],
						args = "(group: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimationNames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnimationName"] = {
						type = "method",
						description = [[]],
						args = "(animID: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PrecacheTextureGroups"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetReferencePose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBaseMeshGroupIds"] = {
						type = "method",
						description = [[]],
						args = "(o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMeshGroupId"] = {
						type = "method",
						description = [[]],
						args = "(bodyGroupId: uint32,groupId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddMeshGroup"] = {
						type = "method",
						description = [[]],
						args = "(meshGroup: Model.MeshGroup)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMass"] = {
						type = "method",
						description = [[]],
						args = "(mass: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(min: vector.Vector,max: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCollisionMesh"] = {
						type = "method",
						description = [[]],
						args = "(colMesh: Model.CollisionMesh)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddMaterial"] = {
						type = "method",
						description = [[]],
						args = "(textureGroup: uint32,name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Export"] = {
						type = "method",
						description = [[]],
						args = "(exportInfo: Model.ExportInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexAnimationBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FUPDATE_VERTEX_ANIMATION_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_VERTEX_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBJECT_ATTACHMENT_TYPE_MODEL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OBJECT_ATTACHMENT_TYPE_PARTICLE_SYSTEM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_ALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_ALL_DATA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_INDEX_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_ALPHA_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_BUFFERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_BOUNDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_COLLISION_SHAPES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_CHILDREN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_PRIMITIVE_COUNTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_TANGENTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FUPDATE_WEIGHT_BUFFER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_DEEP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_SHALLOW"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_ALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_HITBOXES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_ATTACHMENTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_JOINTS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_BLEND_CONTROLLERS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_COLLISION_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FMERGE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_COLLISION_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_FLEX_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FCOPY_BIT_VERTEX_ANIMATIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_INANIMATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_DONT_PRECACHE_TEXTURE_GROUPS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_BIT_STATIC"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Material"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["IsTranslucent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDataBlock"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.DataBlock)",
						valuetype = "DataBlock"
					},
					["IsLoaded"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetShaderName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetData"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum AlphaMode)",
						valuetype = "enum AlphaMode"
					},
					["GetTextureInfo"] = {
						type = "method",
						description = [[]],
						args = "(textureID: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsError"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetSpriteSheetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetShader"] = {
						type = "method",
						description = [[]],
						args = "(shader: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAlphaCutoff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(fname: string)",
						returns = "(variantstring|bool)",
						valuetype = "variant<string,bool>"
					},
					["UpdateTextures"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearSpriteSheetAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTexture"] = {
						type = "method",
						description = [[]],
						args = "(textureID: string,hTex: prosper.Texture,name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeShaderDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DETAIL_BLEND_MODE_TRANSLUCENT_BASE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_TRANSLUCENT_DETAIL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_BASE_MASK_VIA_DETAIL_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_ADDITIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_MULTIPLY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_BLEND_FACTOR_FADE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_INVALID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_SELF_SHADOWED_BUMPMAP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_DECAL_MODULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_SSBUMP_ALBEDO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_TWO_PATTERN_DECAL_MODULATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_UNLIT_ADDITIVE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DETAIL_BLEND_MODE_UNLIT_ADDITIVE_THRESHOLD_FADE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_OPAQUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_BLEND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["ALPHA_MODE_MASK"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SpriteSheetAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetSequenceCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(uint32)",
								valuetype = "uint32"
							},
							["GetSequence"] = {
								type = "method",
								description = [[]],
								args = "(seqIdx: uint32)",
								returns = "(game.Material.SpriteSheetAnimation.Sequence)",
								valuetype = "Sequence"
							},
							["GetSequences"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(tablegame.Material.SpriteSheetAnimation.Sequence)",
								valuetype = "Sequence>"
							},
							["Sequence"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetDuration"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(float)",
										valuetype = "float"
									},
									["GetFrameCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(uint32)",
										valuetype = "uint32"
									},
									["GetInterpolatedFrameData"] = {
										type = "method",
										description = [[]],
										args = "(ptTime: float)",
										returns = "([uint32[,uint32[,float])",
										valuetype = "uint32"
									},
									["GetFrameOffset"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(uint32)",
										valuetype = "uint32"
									},
									["GetFrame"] = {
										type = "method",
										description = [[]],
										args = "(frameIdx: uint32)",
										returns = "(game.Material.SpriteSheetAnimation.Sequence.Frame)",
										valuetype = "Frame"
									},
									["GetFrames"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(tablegame.Material.SpriteSheetAnimation.Sequence.Frame)",
										valuetype = "Frame>"
									},
									["IsLooping"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(bool)",
										valuetype = "bool"
									},
									["Frame"] = {
										type = "class",
										description = [[]],
										childs = {
											["GetUVBounds"] = {
												type = "method",
												description = [[]],
												args = "()",
												returns = "(math.Vector2,math.Vector2)",
												valuetype = "Vector2"
											},
											["GetDuration"] = {
												type = "method",
												description = [[]],
												args = "()",
												returns = "(float)",
												valuetype = "float"
											}
										}
									},

								}
							},

						}
					},

				}
			},
			["GibletCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PHYS_SHAPE_BOX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_CYLINDER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_SPHERE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_MODEL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PHYS_SHAPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["angularVelocity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physShape"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physTranslationOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physRotationOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["physHeight"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["model"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["skin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["scale"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mass"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["lifetime"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["rotation"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["velocity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DrawSceneInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEntityRenderFilter"] = {
						type = "method",
						description = [[]],
						args = "(f: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEntityPrepassFilter"] = {
						type = "method",
						description = [[]],
						args = "(f: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_DISABLE_RENDER_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_FLIP_VERTICALLY_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["outputLayerId"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["commandBuffer"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["flags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["renderFlags"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["scene"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["toneMapping"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["outputImage"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["renderTarget"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["clearColor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["renderStats"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderStats"] = {
				type = "class",
				description = [[]],
				childs = {
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: game.RenderStats)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTime"] = {
						type = "method",
						description = [[]],
						args = "(timer: enum RenderStats::RenderStage)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetPassStats"] = {
						type = "method",
						description = [[]],
						args = "(pass: enum RenderStats::RenderPass)",
						returns = "(game.RenderPassStats)",
						valuetype = "RenderPassStats"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.RenderStats)",
						valuetype = "RenderStats"
					},
					["TIMER_POST_PROCESSING_GPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_TONE_MAPPING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_BLOOM"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_FOG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_FXAA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_GPU_SSAO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_LIGHTING_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_LIGHTING_PASS_TRANSLUCENT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_UPDATE_RENDER_BUFFERS_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_PREPASS_EXECUTION_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_POST_PROCESSING_EXECUTION_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_LIGHTING_PASS_EXECUTION_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_LIGHT_CULLING_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_LIGHT_CULLING_GPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_SHADOW_PASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_PREPASS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DepthStageRenderProcessor"] = {
				type = "class",
				inherits = "game.BaseRenderProcessor",
				description = [[]],
				childs = {
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(renderQueue: game.RenderQueue)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["RenderQueue"] = {
				type = "class",
				description = [[]],
				childs = {
					["IsComplete"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["WaitForCompletion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["WorldEnvironment"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFogStart"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFogDensity"] = {
						type = "method",
						description = [[]],
						args = "(density: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShaderQualityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogEnd"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFogEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFogColor"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsFogEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogDensity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFogType"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogFarDistance"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAmbientColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetUnlitProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShadowResolutionProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShadowResolution"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetFogStartProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogEndProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetShaderQuality"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogMaxDensityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogTypeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFogEnabledProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAmbientColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4)",
						valuetype = "Vector4"
					},
					["GetShaderQuality"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["IsUnlit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetFogStart"] = {
						type = "method",
						description = [[]],
						args = "(start: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetUnlit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetShadowResolution"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFogEnd"] = {
						type = "method",
						description = [[]],
						args = "(end: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FOG_TYPE_LINEAR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOG_TYPE_EXPONENTIAL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FOG_TYPE_EXPONENTIAL2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["RenderPassStats"] = {
				type = "class",
				description = [[]],
				childs = {
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: game.RenderPassStats)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTime"] = {
						type = "method",
						description = [[]],
						args = "(timer: enum RenderPassStats::Timer)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCount"] = {
						type = "method",
						description = [[]],
						args = "(counter: enum RenderPassStats::Counter)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.RenderPassStats)",
						valuetype = "RenderPassStats"
					},
					["TIMER_CPU_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_CPU_END"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_CPU_EXECUTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_CPU_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_ENTITY_BUFFER_UPDATES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_ENTITY_STATE_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCED_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCED_SKIPPED_RENDER_ITEMS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCE_SETS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_INSTANCE_SET_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_END"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_EXECUTION"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_GPU_START"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAWN_MESHES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAWN_TRIANGLES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAWN_VERTICES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_DRAW_CALLS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_ENTITIES_WITHOUT_INSTANCING"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_SHADER_STATE_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["COUNTER_MATERIAL_STATE_CHANGES"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_ENTITY_BIND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_COUNT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_DRAW_CALL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_RENDER_THREAD_WAIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_MATERIAL_BIND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TIMER_SHADER_BIND"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseRenderProcessor"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(d: float,delta: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["LightingStageRenderProcessor"] = {
				type = "class",
				inherits = "game.BaseRenderProcessor",
				description = [[]],
				childs = {
					["Render"] = {
						type = "method",
						description = [[]],
						args = "(renderQueue: game.RenderQueue)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},

		}
	},
	["steamworks"] = {
		type = "lib",
		description = [[]],
		childs = {
			["workshop"] = {
				type = "lib",
				description = [[]],
				childs = {
					["create_item"] = {
						type = "function",
						description = [[]],
						args = "(oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["add_item_dependency"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint32,itemIdOther: uint32,callback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["add_item_app_dependency"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint32,appId: uint32,callback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["remove_item_dependency"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint32,itemIdOther: uint32,callback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["remove_item_app_dependency"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint32,appId: uint32,callback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["subscribe_item"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint32,callback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["get_subscribed_items"] = {
						type = "function",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["unsubscribe_item"] = {
						type = "function",
						description = [[]],
						args = "(itemId: uint32,callback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["register_callback"] = {
						type = "function",
						description = [[]],
						args = "(callbackId: uint32,oCallback: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["get_item"] = {
						type = "function",
						description = [[]],
						args = "(fileId: uint32,oCallback: any,language: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Item"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetAddonContent"] = {
								type = "method",
								description = [[]],
								args = "(addonDirectory: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetUpdateLanguage"] = {
								type = "method",
								description = [[]],
								args = "(language: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetURL"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetDescription"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetStateFlags"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["PublishChanges"] = {
								type = "method",
								description = [[]],
								args = "(callback: any,changeLog: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Download"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetDownloadInfo"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetInstallInfo"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTimeCreated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetScore"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetPreviewImage"] = {
								type = "method",
								description = [[]],
								args = "(imagePath: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetDownVoteCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["IsValid"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetType"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetChildCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTimeAddedToUserList"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetCategoryFlags"] = {
								type = "method",
								description = [[]],
								args = "(categoryFlags: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["AreTagsTruncated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetTitle"] = {
								type = "method",
								description = [[]],
								args = "(title: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTitle"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetSteamIdOwner"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetId"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["IsBanned"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetProgress"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVisibility"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetFileSize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetPreviewFileSize"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTimeUpdated"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetUpVoteCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTags"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetDescription"] = {
								type = "method",
								description = [[]],
								args = "(desc: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetTags"] = {
								type = "method",
								description = [[]],
								args = "(tTags: any)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetCategoryFlags"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVisibility"] = {
								type = "method",
								description = [[]],
								args = "(visibility: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["TYPE_COMMUNITY"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_ART"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_STEAM_VIDEO"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_CONCEPT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_MICROTRANSACTION"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_COLLECTION"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_GAME"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_CONTROLLER_BINDING"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_INTEGRATED_GUIDE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_GAME_MANAGED_ITEM"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_MERCH"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_SCREENSHOT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_SOFTWARE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_STEAMWORKS_ACCESS_INVITE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_VIDEO"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["TYPE_WEB_GUIDE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_SUBSCRIBED_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_DOWNLOAD_PENDING_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_DOWNLOADING_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_NONE"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_INSTALLED_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_LEGACY_ITEM_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["STATE_FLAG_NEEDS_UPDATE_BIT"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},

		}
	},
	["vector"] = {
		type = "lib",
		description = [[]],
		childs = {
			["calc_best_fitting_plane"] = {
				type = "function",
				description = [[]],
				args = "(points: ,ang: float,outNormal: vector.Vector,outDistance: float)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["calc_linear_velocity_from_angular"] = {
				type = "function",
				description = [[]],
				args = "(refPos: vector.Vector,angVel: vector.Vector,tgtPos: vector.Vector)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["random"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["to_min_max"] = {
				type = "function",
				description = [[]],
				args = "(inOutA: math.Vector4,inOutB: math.Vector4,c: math.Vector4)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["create_from_string"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["get_min_max"] = {
				type = "function",
				description = [[]],
				args = "(t: ,outMin: math.Vector4,outMax: math.Vector4)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["random2D"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(math.Vector2)",
				valuetype = "Vector2"
			},
			["calc_average"] = {
				type = "function",
				description = [[]],
				args = "(points: )",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(b: vector.Vector)",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(n: vector.Vector)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetAngle"] = {
						type = "method",
						description = [[]],
						args = "(b: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["PlanarDistance"] = {
						type = "method",
						description = [[]],
						args = "(p1: vector.Vector,n: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["PlanarDistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: vector.Vector,n: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "(vecB: vector.Vector)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(b: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(orientation: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RotateAround"] = {
						type = "method",
						description = [[]],
						args = "(origin: vector.Vector,ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vecB: vector.Vector,factor: float)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Equals"] = {
						type = "method",
						description = [[]],
						args = "(b: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SnapToGrid"] = {
						type = "method",
						description = [[]],
						args = "(gridSize: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["ProjectToPlane"] = {
						type = "method",
						description = [[]],
						args = "(n: vector.Vector,d: float)",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetPerpendicular"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToScreenUv"] = {
						type = "method",
						description = [[]],
						args = "(vp: math.Mat4)",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OuterProduct"] = {
						type = "method",
						description = [[]],
						args = "(v1: vector.Vector)",
						returns = "(math.Mat3)",
						valuetype = "Mat3"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Slerp"] = {
						type = "method",
						description = [[]],
						args = "(b: vector.Vector,factor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetYaw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Mul"] = {
						type = "method",
						description = [[]],
						args = "(b: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["math"] = {
		type = "lib",
		description = [[]],
		childs = {
			["is_finite"] = {
				type = "function",
				description = [[]],
				args = "(val: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["Quaternion"] = {
				type = "function",
				description = [[]],
				args = "(forward: vector.Vector,up: vector.Vector)",
				returns = "(math.QuaternionInternal)",
				valuetype = "QuaternionInternal"
			},
			["is_nan"] = {
				type = "function",
				description = [[]],
				args = "(val: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["map_value_to_range"] = {
				type = "function",
				description = [[]],
				args = "(value: float,lower: float,upper: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_ballistic_time_of_flight"] = {
				type = "function",
				description = [[]],
				args = "(start: vector.Vector,end: vector.Vector,vel: vector.Vector,gravity: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["smoother_step"] = {
				type = "function",
				description = [[]],
				args = "(edge0: float,edge1: float,x: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["map_value_to_fraction"] = {
				type = "function",
				description = [[]],
				args = "(v: float,c: float,i: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_fov_from_focal_length"] = {
				type = "function",
				description = [[]],
				args = "(focalLength: float,sensorSize: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["float_to_half_float"] = {
				type = "function",
				description = [[]],
				args = "(f: float)",
				returns = "(int16)",
				valuetype = "int16"
			},
			["randomf"] = {
				type = "function",
				description = [[]],
				args = "(min: float,max: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["clamp"] = {
				type = "function",
				description = [[]],
				args = "(val: float,min: float,max: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_ballistic_position"] = {
				type = "function",
				description = [[]],
				args = "(start: vector.Vector,vel: vector.Vector,gravity: float,t: float)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["calc_ballistic_velocity"] = {
				type = "function",
				description = [[]],
				args = "(start: vector.Vector,end: vector.Vector,angle: float,gravity: float)",
				returns = "([vector.Vector])",
				valuetype = "Vector"
			},
			["smooth_step"] = {
				type = "function",
				description = [[]],
				args = "(edge0: float,edge1: float,x: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["half_float_to_float"] = {
				type = "function",
				description = [[]],
				args = "(v: int16)",
				returns = "(float)",
				valuetype = "float"
			},
			["approach_angle"] = {
				type = "function",
				description = [[]],
				args = "(angA: float,angB: float,amount: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["approach"] = {
				type = "function",
				description = [[]],
				args = "(val: float,tgt: float,inc: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_focal_length_from_fov"] = {
				type = "function",
				description = [[]],
				args = "(hfov: float,sensorSize: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_horizontal_fov"] = {
				type = "function",
				description = [[]],
				args = "(focalLengthInMM: float,width: float,height: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_vertical_fov"] = {
				type = "function",
				description = [[]],
				args = "(focalLengthInMM: float,width: float,height: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_hermite_spline_position"] = {
				type = "function",
				description = [[]],
				args = "(p0: vector.Vector,p1: vector.Vector,p2: vector.Vector,p3: vector.Vector,s: float,curvature: float)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["solve_ballistic_arc"] = {
				type = "function",
				description = [[]],
				args = "(projPos: vector.Vector,projSpeed: float,tgt: vector.Vector,gravity: float)",
				returns = "(tablevector.Vector)",
				valuetype = "Vector>"
			},
			["solve_ballistic_arc_lateral"] = {
				type = "function",
				description = [[]],
				args = "(projPos: vector.Vector,lateralSpeed: float,tgt: vector.Vector,maxHeight: float)",
				returns = "([vector.Vector[,float])",
				valuetype = "Vector"
			},
			["calc_diagonal_fov"] = {
				type = "function",
				description = [[]],
				args = "(focalLengthInMM: float,width: float,height: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["ease_in"] = {
				type = "function",
				description = [[]],
				args = "(t: float,type: enum umath::EaseType)",
				returns = "(float)",
				valuetype = "float"
			},
			["ease_out"] = {
				type = "function",
				description = [[]],
				args = "(t: float,type: enum umath::EaseType)",
				returns = "(float)",
				valuetype = "float"
			},
			["get_next_power_of_2"] = {
				type = "function",
				description = [[]],
				args = "(v: uint32)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["calc_ballistic_angle_of_reach"] = {
				type = "function",
				description = [[]],
				args = "(val: float,tgt: float,inc: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["normalize_angle"] = {
				type = "function",
				description = [[]],
				args = "(angle: float,base: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["ease_in_out"] = {
				type = "function",
				description = [[]],
				args = "(t: float,type: enum umath::EaseType)",
				returns = "(float)",
				valuetype = "float"
			},
			["sign"] = {
				type = "function",
				description = [[]],
				args = "(n: float)",
				returns = "(int32)",
				valuetype = "int32"
			},
			["perlin_noise"] = {
				type = "function",
				description = [[]],
				args = "(v: vector.Vector)",
				returns = "(float)",
				valuetype = "float"
			},
			["horizontal_fov_to_vertical_fov"] = {
				type = "function",
				description = [[]],
				args = "(fovDeg: float,widthOrAspectRatio: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["lerp"] = {
				type = "function",
				description = [[]],
				args = "(a: float,b: float,f: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["round"] = {
				type = "function",
				description = [[]],
				args = "(f: float)",
				returns = "(int32)",
				valuetype = "int32"
			},
			["calc_average_rotation"] = {
				type = "function",
				description = [[]],
				args = "(t: )",
				returns = "(math.QuaternionInternal)",
				valuetype = "QuaternionInternal"
			},
			["snap_to_grid"] = {
				type = "function",
				description = [[]],
				args = "(f: float,gridSize: uint32)",
				returns = "(int32)",
				valuetype = "int32"
			},
			["calc_hermite_spline"] = {
				type = "function",
				description = [[]],
				args = "(p0: vector.Vector,p1: vector.Vector,p2: vector.Vector,p3: vector.Vector,segmentCount: uint32,curvature: float)",
				returns = "(tablevector.Vector)",
				valuetype = "Vector>"
			},
			["is_in_range"] = {
				type = "function",
				description = [[]],
				args = "(v: float,min: float,max: float)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_angle_difference"] = {
				type = "function",
				description = [[]],
				args = "(angA: float,angB: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["normalize_uv_coordinates"] = {
				type = "function",
				description = [[]],
				args = "(uv: math.Vector2)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["is_inf"] = {
				type = "function",
				description = [[]],
				args = "(val: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["clamp_angle"] = {
				type = "function",
				description = [[]],
				args = "(ang: float,min: float,max: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["is_angle_in_range"] = {
				type = "function",
				description = [[]],
				args = "(ang: float,min: float,max: float)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["calc_fov_from_lens"] = {
				type = "function",
				description = [[]],
				args = "(sensorSize: float,focalLength: float,aspectRatio: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["get_frustum_plane_point"] = {
				type = "function",
				description = [[]],
				args = "(pos: vector.Vector,forward: vector.Vector,right: vector.Vector,up: vector.Vector,fovRad: float,aspectRatio: float,uv: math.Vector2,z: float)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["get_previous_power_of_2"] = {
				type = "function",
				description = [[]],
				args = "(v: uint32)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["calc_aperture_size_from_fstop"] = {
				type = "function",
				description = [[]],
				args = "(fstop: float,focalLength: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["calc_ballistic_range"] = {
				type = "function",
				description = [[]],
				args = "(speed: float,gravity: float,initialHeight: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["set_flag"] = {
				type = "function",
				description = [[]],
				args = "(flags: int32,flag: int32,set: bool)",
				returns = "(int32)",
				valuetype = "int32"
			},
			["get_frustum_plane_center"] = {
				type = "function",
				description = [[]],
				args = "(pos: vector.Vector,forward: vector.Vector,z: float)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["calc_dielectric_specular_reflection"] = {
				type = "function",
				description = [[]],
				args = "(ior: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["get_frustum_plane_size"] = {
				type = "function",
				description = [[]],
				args = "(fovRad: float,aspectRatio: float,z: float)",
				returns = "(float,float)",
				valuetype = "float"
			},
			["get_frustum_plane_boundaries"] = {
				type = "function",
				description = [[]],
				args = "(pos: vector.Vector,forward: vector.Vector,up: vector.Vector,fovRad: float,aspectRatio: float,z: float)",
				returns = "(tablevector.Vector,float,float)",
				valuetype = "Vector>"
			},
			["vertical_fov_to_horizontal_fov"] = {
				type = "function",
				description = [[]],
				args = "(fovDeg: float,widthOrAspectRatio: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["diagonal_fov_to_vertical_fov"] = {
				type = "function",
				description = [[]],
				args = "(diagonalFov: float,aspectRatio: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["cot"] = {
				type = "function",
				description = [[]],
				args = "(x: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["NoiseModule"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(v: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(float: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Displace"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Exponent"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Power"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["TranslatePoint"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Invert"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Voronoi"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(frequency: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(seed: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetDisplacement"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetDisplacement"] = {
								type = "method",
								description = [[]],
								args = "(displacement: float)",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},
					["Curve"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Checkerboard"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Multiply"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Terrace"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Cache"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["ScaleBias"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Select"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["ScalePoint"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Spheres"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Perlin"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["SetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(lacunarity: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(quality: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(octaveCount: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetPersistence"] = {
								type = "method",
								description = [[]],
								args = "(persistence: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(seed: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetPersistence"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(frequency: float)",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},
					["Min"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["RidgedMulti"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["SetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(lacunarity: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(quality: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(octaveCount: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(seed: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(frequency: float)",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},
					["RotatePoint"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Abs"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Billow"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {
							["SetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "(lacunarity: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetFrequency"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "(quality: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "(octaveCount: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetPersistence"] = {
								type = "method",
								description = [[]],
								args = "(persistence: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetSeed"] = {
								type = "method",
								description = [[]],
								args = "(seed: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetLacunarity"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetNoiseQuality"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetOctaveCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetPersistence"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetSeed"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetFrequency"] = {
								type = "method",
								description = [[]],
								args = "(frequency: float)",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},
					["Turbulance"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Blend"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Clamp"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Const"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Cylinders"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},
					["Max"] = {
						type = "class",
						inherits = "math.NoiseModule",
						description = [[]],
						childs = {

						}
					},

				}
			},
			["Vectori"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vectori)",
						valuetype = "Vectori"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vectori)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector4i"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32,arg4: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4i)",
						valuetype = "Vector4i"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["w"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mat2x4"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat3x4"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3x4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat4x3"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["EulerAngles"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetOrientation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector,vector.Vector,vector.Vector)",
						valuetype = "Vector"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["ToQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Equals"] = {
						type = "method",
						description = [[]],
						args = "(b: math.EulerAngles)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,value: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(float)",
						valuetype = "float"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["p"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mat3"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcEigenValues"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Vector4"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(n: math.Vector4)",
						returns = "(math.Vector4)",
						valuetype = "Vector4"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector4)",
						returns = "(float)",
						valuetype = "float"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(x: float,y: float,z: float,w: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector4)",
						returns = "(float)",
						valuetype = "float"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4)",
						valuetype = "Vector4"
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector4)",
						returns = "(float)",
						valuetype = "float"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vecB: math.Vector4,factor: float)",
						returns = "(math.Vector4)",
						valuetype = "Vector4"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector4)",
						valuetype = "Vector4"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["a"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["w"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector)",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["Mul"] = {
						type = "method",
						description = [[]],
						args = "(b: phys.ScaledTransform)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["PlanarDistance"] = {
						type = "method",
						description = [[]],
						args = "(p1: math.Vector,n: math.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetAngle"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(n: math.Vector)",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["PlanarDistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: math.Vector,n: math.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "(vecB: math.Vector)",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(orientation: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vecB: math.Vector,factor: float)",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["Equals"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Slerp"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector,factor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetYaw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToScreenUv"] = {
						type = "method",
						description = [[]],
						args = "(vp: math.Mat4)",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ProjectToPlane"] = {
						type = "method",
						description = [[]],
						args = "(n: math.Vector,d: float)",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["GetPerpendicular"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector)",
						valuetype = "Vector"
					},
					["OuterProduct"] = {
						type = "method",
						description = [[]],
						args = "(v1: math.Vector)",
						returns = "(math.Mat3)",
						valuetype = "Mat3"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["SnapToGrid"] = {
						type = "method",
						description = [[]],
						args = "(gridSize: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPitch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(p1: math.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["RotateAround"] = {
						type = "method",
						description = [[]],
						args = "(origin: math.Vector,ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["r"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["b"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["g"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector2"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Cross"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector2)",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["LengthSqr"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector2)",
						returns = "(float)",
						valuetype = "float"
					},
					["DistanceSqr"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector2)",
						returns = "(float)",
						valuetype = "float"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(b: math.Vector2)",
						returns = "(float)",
						valuetype = "float"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RotateAround"] = {
						type = "method",
						description = [[]],
						args = "(origin: math.Vector2,ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(vecB: math.Vector2,factor: float)",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["Project"] = {
						type = "method",
						description = [[]],
						args = "(n: math.Vector2)",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(x: float,y: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Vector2i"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Transform"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetPosition"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(scale: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPosition"] = {
						type = "method",
						description = [[]],
						args = "(pos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRotation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRotation"] = {
						type = "method",
						description = [[]],
						args = "(rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["UpdateMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTransformationMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat2x3"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["QuaternionInternal"] = {
				type = "class",
				description = [[]],
				childs = {
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.EulerAngles)",
						valuetype = "EulerAngles"
					},
					["Length"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Distance"] = {
						type = "method",
						description = [[]],
						args = "(q1: math.QuaternionInternal)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetUp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(ang: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetForward"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DotProduct"] = {
						type = "method",
						description = [[]],
						args = "(q2: math.QuaternionInternal)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetConjugate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["Lerp"] = {
						type = "method",
						description = [[]],
						args = "(q2: math.QuaternionInternal,factor: float)",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["ToMatrix"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Mat4)",
						valuetype = "Mat4"
					},
					["Mul"] = {
						type = "method",
						description = [[]],
						args = "(b: phys.ScaledTransform)",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["Normalize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOrientation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector,vector.Vector,vector.Vector)",
						valuetype = "Vector"
					},
					["__unm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["ToAxisAngle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector,float)",
						valuetype = "Vector"
					},
					["RotateX"] = {
						type = "method",
						description = [[]],
						args = "(ang: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RotateY"] = {
						type = "method",
						description = [[]],
						args = "(ang: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RotateZ"] = {
						type = "method",
						description = [[]],
						args = "(ang: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApproachDirection"] = {
						type = "method",
						description = [[]],
						args = "(up: vector.Vector,targetDir: vector.Vector,rotAmount: math.Vector2)",
						returns = "(math.QuaternionInternal,math.Vector2)",
						valuetype = "QuaternionInternal"
					},
					["ClampRotation"] = {
						type = "method",
						description = [[]],
						args = "(bounds: math.EulerAngles)",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Slerp"] = {
						type = "method",
						description = [[]],
						args = "(q2: math.QuaternionInternal,factor: float)",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32,value: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.QuaternionInternal)",
						valuetype = "QuaternionInternal"
					},
					["x"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["y"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["w"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["z"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Mat2"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat3x2"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat3x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat4"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToQuaternion"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToEulerAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetInverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Inverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SwapRows"] = {
						type = "method",
						description = [[]],
						args = "(rowSrc: uint32,rowDst: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(axis: vector.Vector,ang: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Decompose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ApplyProjectionDepthBiasOffset"] = {
						type = "method",
						description = [[]],
						args = "(nearZ: float,farZ: float,d: float,delta: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(pos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(scale: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MulRow"] = {
						type = "method",
						description = [[]],
						args = "(rowIndex: uint32,factor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MulCol"] = {
						type = "method",
						description = [[]],
						args = "(colIndex: uint32,factor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SwapColumns"] = {
						type = "method",
						description = [[]],
						args = "(colSrc: uint32,colDst: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Mat4x2"] = {
				type = "class",
				description = [[]],
				childs = {
					["__div"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Get"] = {
						type = "method",
						description = [[]],
						args = "(arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Mat4x3)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Set"] = {
						type = "method",
						description = [[]],
						args = "(mat2: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTranspose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__mul"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__add"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__sub"] = {
						type = "method",
						description = [[]],
						args = "(1: math.Mat4x2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transpose"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Plane"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Transform"] = {
						type = "method",
						description = [[]],
						args = "(transform: math.Mat4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDistance"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCenterPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetNormal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["MoveToPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.EulerAngles)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["NoiseMap"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "(x: int32,y: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["PIDController"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Calculate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float)",
						returns = "(float)",
						valuetype = "float"
					},
					["ClearRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMin"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetIntegralTerm"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMax"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetProportionalTerm"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTerms"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float,arg4: float,arg5: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDerivativeTerm"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTerms"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetProportionalTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetIntegralTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetDerivativeTerm"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					}
				}
			},

		}
	},
	["light"] = {
		type = "lib",
		description = [[]],
		childs = {
			["lumens_to_watts"] = {
				type = "function",
				description = [[]],
				args = "(lumen: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["irradiance_to_lux"] = {
				type = "function",
				description = [[]],
				args = "(irradiance: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["watts_to_lumens"] = {
				type = "function",
				description = [[]],
				args = "(watt: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["get_luminous_efficacy"] = {
				type = "function",
				description = [[]],
				args = "(type: enum ulighting::LightSourceType)",
				returns = "(float)",
				valuetype = "float"
			},
			["lux_to_irradiance"] = {
				type = "function",
				description = [[]],
				args = "(lux: float)",
				returns = "(float)",
				valuetype = "float"
			},
			["convert_light_intensity"] = {
				type = "function",
				description = [[]],
				args = "(intensity: float,srcType: enum pragma::BaseEnvLightComponent::LightIntensityType,dstType: enum pragma::BaseEnvLightComponent::LightIntensityType)",
				returns = "(float)",
				valuetype = "float"
			},
			["get_color_temperature"] = {
				type = "function",
				description = [[]],
				args = "(arg0: enum ulighting::NaturalLightType,arg1: uint32,arg2: uint32)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_average_color_temperature"] = {
				type = "function",
				description = [[]],
				args = "(type: enum ulighting::NaturalLightType)",
				returns = "(uint32)",
				valuetype = "uint32"
			},
			["color_temperature_to_color"] = {
				type = "function",
				description = [[]],
				args = "(temperature: uint32)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			},
			["wavelength_to_color"] = {
				type = "function",
				description = [[]],
				args = "(wavelength: uint32)",
				returns = "(vector.Vector)",
				valuetype = "Vector"
			}
		}
	},
	["import"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["Model"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Joint"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetChildBoneId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParentBoneId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "(keyValues: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetType"] = {
						type = "method",
						description = [[]],
						args = "(type: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetKeyValues"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionMeshId"] = {
						type = "method",
						description = [[]],
						args = "(meshId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetParentCollisionMeshId"] = {
						type = "method",
						description = [[]],
						args = "(meshId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetArgs"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["SetArgs"] = {
						type = "method",
						description = [[]],
						args = "(t: )",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetKeyValue"] = {
						type = "method",
						description = [[]],
						args = "(key: string,val: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCollisionsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetType"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TYPE_BALLSOCKET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_FIXED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_CONETWIST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_DOF"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_HINGE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["TYPE_SLIDER"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["collide"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["MeshGroup"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMeshCount"] = {
						type = "method",
						description = [[]],
						args = "(index: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: Model.Mesh)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: Model.MeshGroup)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMesh"] = {
						type = "method",
						description = [[]],
						args = "(index: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMeshes"] = {
						type = "method",
						description = [[]],
						args = "(tMeshes: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["VertexAnimation"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetMeshAnimations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(rot: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MeshAnimation"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetFrames"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetMesh"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(rot: math.QuaternionInternal)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Frame"] = {
								type = "class",
								description = [[]],
								childs = {
									["GetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetVertices"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["SetDeltaValue"] = {
										type = "method",
										description = [[]],
										args = "(vertId: uint32,value: float)",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(vertIdx: uint32)",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(vertIdx: uint32)",
										returns = "(nil)",
										valuetype = "nil"
									},
									["SetVertexCount"] = {
										type = "method",
										description = [[]],
										args = "(numVerts: uint32)",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetDeltaValue"] = {
										type = "method",
										description = [[]],
										args = "(vertId: uint32)",
										returns = "(nil)",
										valuetype = "nil"
									},
									["SetVertexNormal"] = {
										type = "method",
										description = [[]],
										args = "(vertIdx: uint32,n: vector.Vector)",
										returns = "(nil)",
										valuetype = "nil"
									},
									["SetVertexPosition"] = {
										type = "method",
										description = [[]],
										args = "(vertIdx: uint32,pos: vector.Vector)",
										returns = "(nil)",
										valuetype = "nil"
									},
									["SetFlags"] = {
										type = "method",
										description = [[]],
										args = "(flags: uint32)",
										returns = "(nil)",
										valuetype = "nil"
									},
									["GetFlags"] = {
										type = "method",
										description = [[]],
										args = "()",
										returns = "(nil)",
										valuetype = "nil"
									},
									["Rotate"] = {
										type = "method",
										description = [[]],
										args = "(rot: math.QuaternionInternal)",
										returns = "(nil)",
										valuetype = "nil"
									},
									["FLAG_BIT_HAS_DELTA_VALUES"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									},
									["FLAG_NONE"] = {
										type = "value",
										description = [[]],
										valuetype = ""
									}
								}
							},

						}
					},

				}
			},
			["Vertex"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(Model.Vertex)",
						valuetype = "Vertex"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBiTangent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: Model.Vertex)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["uv"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normal"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["tangent"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["position"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Animation"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetBoneList"] = {
						type = "method",
						description = [[]],
						args = "(o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFrames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetFrame"] = {
						type = "method",
						description = [[]],
						args = "(ID: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFrameCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneWeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(float)",
						valuetype = "float"
					},
					["AddFrame"] = {
						type = "method",
						description = [[]],
						args = "(frame: Model.Animation.Frame)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(assetData: udm.AssetData)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearFrames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEventArgs"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,idx: uint32,oArgs: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SaveLegacy"] = {
						type = "method",
						description = [[]],
						args = "(f: file.File)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBlendController"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CalcRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(mdl: game.Model)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneList"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableuint16)",
						valuetype = "table<uint16>"
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetActivityName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["Reverse"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBoneWeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneId"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetActivity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum Activity)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFlags"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum FAnim)",
						valuetype = "enum FAnim"
					},
					["GetActivityWeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint8)",
						valuetype = "uint8"
					},
					["SetFlags"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum FAnim)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddFlags"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum FAnim)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveFlags"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum FAnim)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDuration"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["AddEvent"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,eventId: uint32,args: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEvents"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEventCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFadeInTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetFadeOutTime"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: Model.Skeleton,arg2: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderBounds"] = {
						type = "method",
						description = [[]],
						args = "(game.Model)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFadeOutTime"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveEvent"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddBoneId"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetEventData"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,idx: uint32,type: uint32,oArgs: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEventType"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,idx: uint32,type: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFadeInTime"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoneWeights"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetActivity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum Activity)",
						valuetype = "enum Activity"
					},
					["SetFPS"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFPS"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint8)",
						valuetype = "uint8"
					},
					["SetActivityWeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: Model.Skeleton,arg2: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_MOVEZ"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_AUTOPLAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_GESTURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_LOOP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_MOVEX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_NOREPEAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["Frame"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetBonePose"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetLocalBoneTransform"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: Model.Skeleton,boneId: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetFlexControllerIds"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Localize"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: Model.Skeleton)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetBonePosition"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32,pos: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetBoneRotation"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32,rot: math.QuaternionInternal)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Globalize"] = {
								type = "method",
								description = [[]],
								args = "(skeleton: Model.Skeleton)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["CalcRenderBounds"] = {
								type = "method",
								description = [[]],
								args = "(anim: Model.Animation,mdl: game.Model)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetBoneScale"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32,scale: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetMoveTranslation"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Scale"] = {
								type = "method",
								description = [[]],
								args = "(scale: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetMoveTranslationX"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetMoveTranslationZ"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetFlexControllerWeights"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetMoveTranslation"] = {
								type = "method",
								description = [[]],
								args = "(x: float,z: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetFlexControllerWeights"] = {
								type = "method",
								description = [[]],
								args = "(object: any)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetMoveTranslationX"] = {
								type = "method",
								description = [[]],
								args = "(x: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetBoneTransform"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32,pos: vector.Vector,rot: math.QuaternionInternal)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetBoneRotation"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetMoveTranslationZ"] = {
								type = "method",
								description = [[]],
								args = "(z: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetBoneCount"] = {
								type = "method",
								description = [[]],
								args = "(boneCount: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetBonePose"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32,pose: phys.Transform)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetBoneCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(anim: Model.Animation,skeleton: Model.Skeleton,t: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetBoneScale"] = {
								type = "method",
								description = [[]],
								args = "(boneId: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(anim: Model.Animation,skeleton: Model.Skeleton,rot: math.QuaternionInternal)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetBoneMatrix"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetBoneTransform"] = {
								type = "method",
								description = [[]],
								args = "(boneID: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},

				}
			},
			["Skeleton"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetRootBones"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(mapuint32|Model.Skeleton.Bone)",
						valuetype = "Bone>"
					},
					["GetBone"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(Model.Skeleton.Bone)",
						valuetype = "Bone"
					},
					["ClearBones"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddBone"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(Model.Skeleton.Bone)",
						valuetype = "Bone"
					},
					["MakeRootBone"] = {
						type = "method",
						description = [[]],
						args = "(bone: Model.Skeleton.Bone)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["LookupBone"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetBoneHierarchy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(mapuint16|tablenil)",
						valuetype = "map<uint16,table<nil>>"
					},
					["GetBoneCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Merge"] = {
						type = "method",
						description = [[]],
						args = "(arg1: Model.Skeleton)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsRootBone"] = {
						type = "method",
						description = [[]],
						args = "(boneId: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetBones"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableModel.Skeleton.Bone)",
						valuetype = "Bone>"
					},
					["Bone"] = {
						type = "class",
						description = [[]],
						childs = {
							["IsDescendantOf"] = {
								type = "method",
								description = [[]],
								args = "(arg1: Model.Skeleton.Bone)",
								returns = "(bool)",
								valuetype = "bool"
							},
							["GetParent"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(Model.Skeleton.Bone)",
								valuetype = "Bone"
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearParent"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetID"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(uint16)",
								valuetype = "uint16"
							},
							["SetParent"] = {
								type = "method",
								description = [[]],
								args = "(parent: Model.Skeleton.Bone)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(string)",
								valuetype = "string"
							},
							["SetName"] = {
								type = "method",
								description = [[]],
								args = "(name: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetChildren"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(mapuint16|Model.Skeleton.Bone)",
								valuetype = "Bone>"
							},
							["IsAncestorOf"] = {
								type = "method",
								description = [[]],
								args = "(arg1: Model.Skeleton.Bone)",
								returns = "(bool)",
								valuetype = "bool"
							}
						}
					},

				}
			},
			["FlexAnimation"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetFlexControllerIds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["AddFlexControllerId"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetFlexControllerIds"] = {
						type = "method",
						description = [[]],
						args = "(tIds: )",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveFrame"] = {
						type = "method",
						description = [[]],
						args = "(idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SaveLegacy"] = {
						type = "method",
						description = [[]],
						args = "(f: file.File)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetFlexControllerCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["LookupLocalFlexControllerIndex"] = {
						type = "method",
						description = [[]],
						args = "(id: uint32)",
						returns = "(any)",
						valuetype = "any"
					},
					["AddFrame"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(Model.FlexAnimation.Frame)",
						valuetype = "Frame"
					},
					["ClearFrames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Save"] = {
						type = "method",
						description = [[]],
						args = "(assetData: udm.AssetData)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFlexControllerValue"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32,id: uint32,val: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFps"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetFps"] = {
						type = "method",
						description = [[]],
						args = "(fps: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFrames"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["GetFrame"] = {
						type = "method",
						description = [[]],
						args = "(frameId: uint32)",
						returns = "(Model.FlexAnimation.Frame)",
						valuetype = "Frame"
					},
					["GetFrameCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["Frame"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetFlexControllerValue"] = {
								type = "method",
								description = [[]],
								args = "(id: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetFlexControllerValueCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(uint32)",
								valuetype = "uint32"
							},
							["SetFlexControllerValue"] = {
								type = "method",
								description = [[]],
								args = "(id: uint32,val: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetFlexControllerValues"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(any)",
								valuetype = "any"
							},
							["SetFlexControllerValues"] = {
								type = "method",
								description = [[]],
								args = "(t: )",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},

				}
			},
			["Flex"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetOperations"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "(anim: Model.VertexAnimation)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFrameIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexAnimation"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OP_TWO_WAY0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_TWO_WAY1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DME_LOWER_EYELID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DME_UPPER_EYELID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_ADD"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_CONST"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DOMINATE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_DIV"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_CLOSE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_COMBO"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_EXP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_COMMA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_MIN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_FETCH"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_FETCH2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_MAX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_MUL"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_NEG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_OPEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_N_WAY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["OP_SUB"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["Operation"] = {
						type = "class",
						description = [[]],
						childs = {
							["GetName"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["value"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["index"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["type"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["Mesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddSubMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: Model.Mesh.Sub)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveSubMesh"] = {
						type = "method",
						description = [[]],
						args = "(i: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "(flags: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTriangleVertexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Centralize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTriangleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSubMeshes"] = {
						type = "method",
						description = [[]],
						args = "(tSubMeshes: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCenter"] = {
						type = "method",
						description = [[]],
						args = "(center: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSubMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(rotation: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSubMeshCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSubMesh"] = {
						type = "method",
						description = [[]],
						args = "(index: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: Model.Mesh)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(translation: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Scale"] = {
						type = "method",
						description = [[]],
						args = "(scale: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearSubMeshes"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetReferenceId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Sub"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetGeometryType"] = {
								type = "method",
								description = [[]],
								args = "(geometryType: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearAlphas"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["AddLine"] = {
								type = "method",
								description = [[]],
								args = "(idx0: uint32,idx1: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["AddPoint"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Rotate"] = {
								type = "method",
								description = [[]],
								args = "(rotation: math.QuaternionInternal)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVertexUV"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,uv: math.Vector2)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVertexNormal"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,normal: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearExtendedVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["AddVertex"] = {
								type = "method",
								description = [[]],
								args = "(v: Model.Vertex)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Update"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearUVSets"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["HasUVSet"] = {
								type = "method",
								description = [[]],
								args = "(uvSetName: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertex"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetCenter"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTriangleCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTriangles"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClipAgainstPlane"] = {
								type = "method",
								description = [[]],
								args = "(n: vector.Vector,d: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ReserveVertexWeights"] = {
								type = "method",
								description = [[]],
								args = "(numVerts: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GenerateNormals"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ReserveTriangles"] = {
								type = "method",
								description = [[]],
								args = "(numTris: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTriangleVertexCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearVertices"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["AddTriangle"] = {
								type = "method",
								description = [[]],
								args = "(a: uint32,b: uint32,c: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertices"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetUVSetNames"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(any)",
								valuetype = "any"
							},
							["ReserveVertices"] = {
								type = "method",
								description = [[]],
								args = "(numVerts: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVertexCount"] = {
								type = "method",
								description = [[]],
								args = "(n: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Transform"] = {
								type = "method",
								description = [[]],
								args = "(pose: phys.ScaledTransform)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetSkinTextureIndex"] = {
								type = "method",
								description = [[]],
								args = "(texture: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVertexAlpha"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,alpha: math.Vector2)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearVertexData"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVertexPosition"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,pos: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertexNormal"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetPose"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ClearTriangles"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetPose"] = {
								type = "method",
								description = [[]],
								args = "(pose: phys.ScaledTransform)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Translate"] = {
								type = "method",
								description = [[]],
								args = "(translation: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Copy"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(Model.Mesh.Sub)",
								valuetype = "Sub"
							},
							["FlipTriangleWindingOrder"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["__eq"] = {
								type = "method",
								description = [[]],
								args = "(1: Model.Mesh.Sub)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Scale"] = {
								type = "method",
								description = [[]],
								args = "(scale: vector.Vector)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["__tostring"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertexPosition"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetSkinTextureIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetIndexCount"] = {
								type = "method",
								description = [[]],
								args = "(n: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["AddUVSet"] = {
								type = "method",
								description = [[]],
								args = "(uvSetName: string)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetUVs"] = {
								type = "method",
								description = [[]],
								args = "(uvSetName: string)",
								returns = "(any)",
								valuetype = "any"
							},
							["GetNormals"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVertexWeight"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,weight: Model.VertexWeight)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetReferenceId"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetBounds"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVertex"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,v: Model.Vertex)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertexUV"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertexAlpha"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertexWeight"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["Optimize"] = {
								type = "method",
								description = [[]],
								args = "(arg1: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["NormalizeUVCoordinates"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["ApplyUVMapping"] = {
								type = "method",
								description = [[]],
								args = "(nu: vector.Vector,nv: vector.Vector,w: uint32,h: uint32,ou: float,ov: float,su: float,sv: float)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetVertexTangent"] = {
								type = "method",
								description = [[]],
								args = "(idx: uint32,t: math.Vector4)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetGeometryType"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetTangents"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetBiTangents"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertexBuffer"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetVertexWeightBuffer"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetAlphaBuffer"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetIndexBuffer"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetSceneMesh"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GEOMETRY_TYPE_LINES"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["GEOMETRY_TYPE_POINTS"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["GEOMETRY_TYPE_TRIANGLES"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["Eyeball"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetUpperLidFlexIndices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["GetUpperLidFlexAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["GetLowerLidFlexIndices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["GetLowerLidFlexIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetLowerLidFlexAngles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(any)",
						valuetype = "any"
					},
					["GetUpperLidFlexIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["boneIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["zOffset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["forward"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["up"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["irisMaterialIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["maxDilationFactor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["irisScale"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["irisUvRadius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["origin"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["name"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["radius"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["VertexWeight"] = {
				type = "class",
				description = [[]],
				childs = {
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(Model.VertexWeight)",
						valuetype = "VertexWeight"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: Model.VertexWeight)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["boneIds"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["weights"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["CollisionMesh"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetSurfaceMaterialId"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBoneParentId"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Copy"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(Model.CollisionMesh)",
						valuetype = "CollisionMesh"
					},
					["SetTriangles"] = {
						type = "method",
						description = [[]],
						args = "(tTriangles: tableuint16)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Centralize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddVertex"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClipAgainstPlane"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector,arg2: float,arg3: Model.CollisionMesh,arg4: Model.CollisionMesh)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearSoftBodyAnchors"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTriangles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftBodyTriangles"] = {
						type = "method",
						description = [[]],
						args = "(o: tableuint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["AddTriangle"] = {
						type = "method",
						description = [[]],
						args = "(idx0: uint32,idx1: uint32,idx2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablevector.Vector)",
						valuetype = "Vector>"
					},
					["GetVolume"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["ClearVertices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddSoftBodyAnchor"] = {
						type = "method",
						description = [[]],
						args = "(vertIdx: uint32,boneIdx: uint32)",
						returns = "([uint32])",
						valuetype = "uint32"
					},
					["SetVolume"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearTriangles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetVertices"] = {
						type = "method",
						description = [[]],
						args = "(tVertices: tablevector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftBody"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsSoftBody"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Translate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftBodyMesh"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSoftBodyMesh"] = {
						type = "method",
						description = [[]],
						args = "(subMesh: Model.Mesh.Sub)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsConvex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetSoftBodyInfo"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftBodyTriangles"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([tableuint32])",
						valuetype = "table<uint32>"
					},
					["RemoveSoftBodyAnchor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSoftBodyAnchors"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablenil)",
						valuetype = "table<nil>"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAABB"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector,vector.Vector)",
						valuetype = "Vector"
					},
					["GetBoneParentId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetShape"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "([phys.Shape])",
						valuetype = "Shape"
					},
					["SetConvex"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSurfaceMaterialId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetSurfaceMaterialIds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tableint32)",
						valuetype = "table<int32>"
					},
					["IntersectAABB"] = {
						type = "method",
						description = [[]],
						args = "(min: vector.Vector,max: vector.Vector)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetAABB"] = {
						type = "method",
						description = [[]],
						args = "(min: vector.Vector,max: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOrigin"] = {
						type = "method",
						description = [[]],
						args = "(arg1: vector.Vector)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOrigin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(vector.Vector)",
						valuetype = "Vector"
					},
					["Rotate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.QuaternionInternal)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FSOFTBODY_ANCHOR_DISABLE_COLLISIONS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FSOFTBODY_ANCHOR_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FSOFTBODY_ANCHOR_RIGID"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["ExportInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["SetAnimationList"] = {
						type = "method",
						description = [[]],
						args = "(oTable: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IMAGE_FORMAT_JPG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_BMP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_DDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_HDR"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_KTX"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_PNG"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["IMAGE_FORMAT_TGA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEVICE_CPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DEVICE_GPU"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["saveAsBinary"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["verbose"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["generateAo"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["mergeMeshesByMaterial"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aoSamples"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aoResolution"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["scale"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["imageFormat"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["aoDevice"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["exportAnimations"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["exportSkinnedMeshData"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["exportMorphTargets"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["exportImages"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["embedAnimations"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["fullExport"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["normalizeTextureNames"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["enableExtendedDDS"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["openvr"] = {
		type = "lib",
		description = [[]],
		childs = {
			["ControllerState"] = {
				type = "class",
				description = [[]],
				childs = {
					["axis1"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["packetNum"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["axis2"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["axis3"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["buttonTouched"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["axis4"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["buttonPressed"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["axis0"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TrackedDevicePose"] = {
				type = "class",
				description = [[]],
				childs = {
					["trackingResult"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["deviceToAbsoluteTracking"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["velocity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["deviceIsConnected"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["angularVelocity"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["poseIsValid"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Eye"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetProjectionMatrix"] = {
						type = "method",
						description = [[]],
						args = "(arg2: float,arg3: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetViewMatrix"] = {
						type = "method",
						description = [[]],
						args = "(arg2: ents.CameraComponent)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},

		}
	},
	["vrp"] = {
		type = "lib",
		description = [[]],
		childs = {
			["Version"] = {
				type = "class",
				description = [[]],
				childs = {
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToString"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: vrp.Version)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__lt"] = {
						type = "method",
						description = [[]],
						args = "(1: vrp.Version)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Reset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__le"] = {
						type = "method",
						description = [[]],
						args = "(1: vrp.Version)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["minor"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["revision"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["major"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},

		}
	},
	["sfm"] = {
		type = "lib",
		description = [[]],
		childs = {

		}
	},
	["pfm"] = {
		type = "lib",
		description = [[]],
		childs = {
			["math"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["impl"] = {
				type = "lib",
				description = [[]],
				childs = {
					["projects"] = {
						type = "lib",
						description = [[]],
						childs = {

						}
					},

				}
			},

		}
	},
	["shader"] = {
		type = "lib",
		description = [[]],
		childs = {
			["ShaderEntity"] = {
				type = "class",
				inherits = "shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindInstanceDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(descSet: prosper.DescriptorSet)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordDrawMesh"] = {
						type = "method",
						description = [[]],
						args = "(mesh: Model.Mesh.Sub)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindEntity"] = {
						type = "method",
						description = [[]],
						args = "(ent: ents.BaseEntityBase)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindVertexAnimationOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBoundEntity"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["BindVertexAnimationOffset"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["SceneLit3D"] = {
				type = "class",
				inherits = "shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindLights"] = {
						type = "method",
						description = [[]],
						args = "(dsLights: prosper.DescriptorSet)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindScene"] = {
						type = "method",
						description = [[]],
						args = "(scene: ents.SceneComponent,renderer: ents.RasterizationRendererComponent,bView: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["BaseImageProcessing"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DESCRIPTOR_SET_TEXTURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DESCRIPTOR_SET_TEXTURE_BINDING_TEXTURE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseGraphicsModule"] = {
				type = "class",
				inherits = "shader.BaseModule",
				description = [[]],
				childs = {

				}
			},
			["GUITextured"] = {
				type = "class",
				inherits = "shader.Graphics shader.Shader",
				description = [[]],
				childs = {

				}
			},
			["ComputePipelineCreateInfo"] = {
				type = "class",
				inherits = "shader.BasePipelineCreateInfo",
				description = [[]],
				childs = {
					["AddSpecializationConstant"] = {
						type = "method",
						description = [[]],
						args = "(constantId: uint32,ds: util.DataStream)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["BaseParticle2D"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PUSH_CONSTANTS_SIZE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PUSH_CONSTANTS_USER_DATA_OFFSET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Scene3D"] = {
				type = "class",
				inherits = "shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindSceneCamera"] = {
						type = "method",
						description = [[]],
						args = "(scene: ents.SceneComponent,renderer: ents.RasterizationRendererComponent,bView: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindRenderSettings"] = {
						type = "method",
						description = [[]],
						args = "(descSet: prosper.DescriptorSet)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RENDER_PASS_BLOOM_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_COLOR_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["RENDER_PASS_DEPTH_FORMAT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BasePbr"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.TexturedLit3D shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["InitializeGfxPipelinePushConstantRanges"] = {
						type = "method",
						description = [[]],
						args = "(arg1: shader.BasePipelineCreateInfo,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnBindMaterial"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.Material)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeGfxPipelineDescriptorSets"] = {
						type = "method",
						description = [[]],
						args = "(arg1: shader.BasePipelineCreateInfo,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnBindEntity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: class util::TWeakSharedHandle<class BaseEntity>)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: Model.Mesh.Sub)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["OnBindScene"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.RasterizationRendererComponent,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnBeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: prosper.CommandBuffer,arg2: math.Vector4,arg3: uint32,arg4: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnEndDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeGfxPipelineVertexAttributes"] = {
						type = "method",
						description = [[]],
						args = "(arg1: shader.BasePipelineCreateInfo,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["BindMaterialParameters"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.Material)",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["VertexBinding"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["inputRate"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["stride"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Graphics"] = {
				type = "class",
				inherits = "shader.Shader",
				description = [[]],
				childs = {
					["RecordDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRenderPass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordDrawIndexed"] = {
						type = "method",
						description = [[]],
						args = "(indexCount: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindVertexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(buffer: prosper.Buffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: prosper.CommandBuffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordEndDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindIndexBuffer"] = {
						type = "method",
						description = [[]],
						args = "(indexBuffer: prosper.Buffer,indexType: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindVertexBuffers"] = {
						type = "method",
						description = [[]],
						args = "(buffers: any)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["BaseCompute"] = {
				type = "class",
				inherits = "shader.BaseComputeModule shader.Compute shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Compute"] = {
				type = "class",
				inherits = "shader.Shader",
				description = [[]],
				childs = {
					["RecordDispatch"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBeginCompute"] = {
						type = "method",
						description = [[]],
						args = "(hCommandBuffer: prosper.CommandBuffer)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordEndCompute"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordCompute"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["DescriptorSetBinding"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["shaderStages"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["bindingIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["type"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["descriptorArraySize"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseTexturedLit3D"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.TexturedLit3D shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["InitializeGfxPipelinePushConstantRanges"] = {
						type = "method",
						description = [[]],
						args = "(arg1: shader.BasePipelineCreateInfo,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnBindMaterial"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.Material)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeGfxPipelineDescriptorSets"] = {
						type = "method",
						description = [[]],
						args = "(arg1: shader.BasePipelineCreateInfo,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnBindEntity"] = {
						type = "method",
						description = [[]],
						args = "(arg1: class util::TWeakSharedHandle<class BaseEntity>)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: Model.Mesh.Sub)",
						returns = "(int32)",
						valuetype = "int32"
					},
					["OnBindScene"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.RasterizationRendererComponent,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnBeginDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: prosper.CommandBuffer,arg2: math.Vector4,arg3: uint32,arg4: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnEndDraw"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializeGfxPipelineVertexAttributes"] = {
						type = "method",
						description = [[]],
						args = "(arg1: shader.BasePipelineCreateInfo,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["BindMaterialParameters"] = {
						type = "method",
						description = [[]],
						args = "(arg1: game.Material)",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["TexturedLit3D"] = {
				type = "class",
				inherits = "shader.GameWorld shader.ShaderEntity shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["RecordBindMaterial"] = {
						type = "method",
						description = [[]],
						args = "(mat: game.Material)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindClipPlane"] = {
						type = "method",
						description = [[]],
						args = "(clipPlane: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["PUSH_CONSTANTS_SIZE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["PUSH_CONSTANTS_USER_DATA_OFFSET"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Info"] = {
				type = "class",
				description = [[]],
				childs = {
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					}
				}
			},
			["BasePostProcessing"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["GraphicsPipelineCreateInfo"] = {
				type = "class",
				inherits = "shader.BasePipelineCreateInfo",
				description = [[]],
				childs = {
					["SetDepthWritesEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSampleMask"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLogicOpEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDepthTestState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSampleCount"] = {
						type = "method",
						description = [[]],
						args = "(sampleCount: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPrimitiveRestartEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMultisamplingProperties"] = {
						type = "method",
						description = [[]],
						args = "(sampleCount: uint32,sampleShading: float,sampleMask: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStencilTestEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDepthBoundsState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexAttributeCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMinSampleShading"] = {
						type = "method",
						description = [[]],
						args = "(minSampleShading: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMinDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLogicOpProperties"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool,logicOp: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRasterizerDiscardEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSampleMask"] = {
						type = "method",
						description = [[]],
						args = "(sampleMask: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBlendingProperties"] = {
						type = "method",
						description = [[]],
						args = "(blendingProperties: math.Vector4)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCommonAlphaBlendProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetColorBlendAttachmentProperties"] = {
						type = "method",
						description = [[]],
						args = "(attId: uint32,blendingEnabled: bool,blendOpColor: uint32,blendOpAlpha: uint32,srcColorBlendFactor: uint32,dstColorBlendFactor: uint32,srcAlphaBlendFactor: uint32,dstAlphaBlendFactor: uint32,channelWriteMask: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSampleShadingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSampleMaskEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSampleShadingState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDynamicScissorBoxesCount"] = {
						type = "method",
						description = [[]],
						args = "(numDynamicScissorBoxes: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDynamicViewportsCount"] = {
						type = "method",
						description = [[]],
						args = "(numDynamicViewports: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDynamicScissorBoxesCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDynamicStates"] = {
						type = "method",
						description = [[]],
						args = "(states: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPrimitiveTopology"] = {
						type = "method",
						description = [[]],
						args = "(primitiveTopology: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRasterizationProperties"] = {
						type = "method",
						description = [[]],
						args = "(polygonMode: uint32,cullMode: uint32,frontFace: uint32,lineWidth: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDepthClamp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPolygonMode"] = {
						type = "method",
						description = [[]],
						args = "(polygonMode: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetViewportCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCullMode"] = {
						type = "method",
						description = [[]],
						args = "(cullMode: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFrontFace"] = {
						type = "method",
						description = [[]],
						args = "(frontFace: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDepthBiasSlopeFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(lineWidth: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSubpassId"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetScissorBoxProperties"] = {
						type = "method",
						description = [[]],
						args = "(iScissorBox: uint32,x: int32,y: int32,w: uint32,h: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaxDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStencilTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(updateFrontFaceState: bool,stencilFailOp: uint32,stencilPassOp: uint32,stencilDepthFailOp: uint32,stencilCompareOp: uint32,stencilCompareMask: uint32,stencilWriteMask: uint32,stencilReference: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetViewportProperties"] = {
						type = "method",
						description = [[]],
						args = "(iViewport: uint32,originX: float,originY: float,w: float,h: float,minDepth: float,maxDepth: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AreDepthWritesEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetBlendingProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetColorBlendAttachmentProperties"] = {
						type = "method",
						description = [[]],
						args = "(attId: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddSpecializationConstant"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32,constantId: uint32,ds: util.DataStream)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetScissorBoxProperties"] = {
						type = "method",
						description = [[]],
						args = "(iScissor: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthBoundsTestEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDepthBiasState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDepthBiasConstantFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDynamicStateEnabled"] = {
						type = "method",
						description = [[]],
						args = "(state: uint32,bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDepthBiasClamp"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMultisamplingProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDynamicStates"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDynamicViewportsCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetScissorCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthTestEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLogicOpState"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSampleCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsAlphaToOneEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMinSampleShading"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetScissorBoxesCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRasterizationProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetViewportsCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPrimitiveTopology"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPushConstantRanges"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPolygonMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCullMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFrontFace"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStencilTestProperties"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool,compareOp: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthClampEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(maxDepthBounds: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMinDepthBounds"] = {
						type = "method",
						description = [[]],
						args = "(minDepthBounds: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthBoundsTestProperties"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool,minDepthBounds: float,maxDepthBounds: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthBiasSlopeFactor"] = {
						type = "method",
						description = [[]],
						args = "(depthBiasSlopeFactor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthBiasClamp"] = {
						type = "method",
						description = [[]],
						args = "(depthBiasClamp: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthBiasConstantFactor"] = {
						type = "method",
						description = [[]],
						args = "(depthBiasConstantFactor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthBiasProperties"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool,depthBiasConstantFactor: float,depthBiasClamp: float,depthBiasSlopeFactor: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDepthBiasEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAlphaToOneEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAlphaToCoverageEnabled"] = {
						type = "method",
						description = [[]],
						args = "(bEnabled: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVertexAttributeProperties"] = {
						type = "method",
						description = [[]],
						args = "(iVerexInputAttribute: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetViewportProperties"] = {
						type = "method",
						description = [[]],
						args = "(iViewport: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsAlphaToCoverageEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsDepthClampEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsPrimitiveRestartEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsRasterizerDiscardEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsSampleMaskEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AttachVertexAttribute"] = {
						type = "method",
						description = [[]],
						args = "(binding: shader.VertexBinding,attributes: any)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Glow"] = {
				type = "class",
				inherits = "shader.TexturedLit3D shader.ShaderEntity shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {

				}
			},
			["BaseComputeModule"] = {
				type = "class",
				inherits = "shader.BaseModule",
				description = [[]],
				childs = {

				}
			},
			["BaseGraphics"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["GameWorld"] = {
				type = "class",
				inherits = "shader.ShaderEntity shader.SceneLit3D shader.Scene3D shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["SetDepthBias"] = {
						type = "method",
						description = [[]],
						args = "(depthBias: math.Vector2)",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["ComposeRMA"] = {
				type = "class",
				inherits = "shader.Graphics shader.Shader",
				description = [[]],
				childs = {
					["ComposeRMA"] = {
						type = "method",
						description = [[]],
						args = "(roughnessMap: prosper.Texture,metalnessMap: prosper.Texture,aoMap: prosper.Texture,flags: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FLAG_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["FLAG_USE_SPECULAR_WORKFLOW_BIT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["VertexAttribute"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["format"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["offset"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["location"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DescriptorSetInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "(arg1: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["setIndex"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["BaseGUITextured"] = {
				type = "class",
				inherits = "shader.BaseGraphicsModule shader.GUITextured shader.Graphics shader.Shader shader.BaseModule",
				description = [[]],
				childs = {
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["BasePipelineCreateInfo"] = {
				type = "class",
				description = [[]],
				childs = {
					["AttachPushConstantRange"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32,size: uint32,shaderStages: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AttachDescriptorSetInfo"] = {
						type = "method",
						description = [[]],
						args = "(descSetInfo: shader.DescriptorSetInfo)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["BaseModule"] = {
				type = "class",
				description = [[]],
				childs = {
					["OnPipelineInitialized"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetShaderSource"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32,fpath: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnPipelinesInitialized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPipelineCount"] = {
						type = "method",
						description = [[]],
						args = "(pipelineCount: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCurrentCommandBuffer"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InitializePipeline"] = {
						type = "method",
						description = [[]],
						args = "(arg1: shader.BasePipelineCreateInfo,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnInitialized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Shader"] = {
				type = "class",
				description = [[]],
				childs = {
					["RecordPushConstants"] = {
						type = "method",
						description = [[]],
						args = "(ds: util.DataStream)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEntrypointName"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CreateDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(setIdx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPipelineInfo"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32,pipelineIdx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsGraphicsShader"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetGlslSourceCode"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32,pipelineIdx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsComputeShader"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPipelineBindPoint"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIdentifier"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSourceFilePaths"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetSourceFilePath"] = {
						type = "method",
						description = [[]],
						args = "(shaderStage: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindDescriptorSets"] = {
						type = "method",
						description = [[]],
						args = "(descSets: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RecordBindDescriptorSet"] = {
						type = "method",
						description = [[]],
						args = "(ds: prosper.DescriptorSet)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},

		}
	},
	["gui"] = {
		type = "lib",
		description = [[]],
		childs = {
			["create_label"] = {
				type = "function",
				description = [[]],
				args = "(str: string)",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["get_element_under_cursor"] = {
				type = "function",
				description = [[]],
				args = "(window: prosper.Window)",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["inject_char_input"] = {
				type = "function",
				description = [[]],
				args = "(c: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["create_button"] = {
				type = "function",
				description = [[]],
				args = "(text: string)",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["get_base_element"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["create_checkbox"] = {
				type = "function",
				description = [[]],
				args = "(label: string)",
				returns = "([gui.Element[,gui.Element[,gui.Element])",
				valuetype = "Element"
			},
			["get_primary_window"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(prosper.Window)",
				valuetype = "Window"
			},
			["get_element_at_position"] = {
				type = "function",
				description = [[]],
				args = "(arg1: prosper.Window,arg2: gui.Element,arg3: int32,arg4: int32,arg5: unknown)",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["find_focused_window"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(prosper.Window)",
				valuetype = "Window"
			},
			["skin_exists"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["find_elements_by_class"] = {
				type = "function",
				description = [[]],
				args = "(className: string)",
				returns = "(tablegui.Element)",
				valuetype = "Element>"
			},
			["create"] = {
				type = "function",
				description = [[]],
				args = "(game: class CGame,name: string)",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["find_window_under_cursor"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(prosper.Window)",
				valuetype = "Window"
			},
			["set_cursor_input_mode"] = {
				type = "function",
				description = [[]],
				args = "(mode: enum GLFW::CursorMode)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_focused_element"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["register_skin"] = {
				type = "function",
				description = [[]],
				args = "(skin: string,vars: tablenil,skinData: tablenil,baseName: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_window_size"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(math.Vector2i)",
				valuetype = "Vector2i"
			},
			["find_elements_by_name"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(tablegui.Element)",
				valuetype = "Element>"
			},
			["load_skin"] = {
				type = "function",
				description = [[]],
				args = "(skinName: string)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["get_base_elements"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(tablegui.Element)",
				valuetype = "Element>"
			},
			["set_skin"] = {
				type = "function",
				description = [[]],
				args = "(skin: string)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_cursor"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(enum GLFW::Cursor::Shape)",
				valuetype = "Shape"
			},
			["set_cursor"] = {
				type = "function",
				description = [[]],
				args = "(shape: enum GLFW::Cursor::Shape)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_cursor_input_mode"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(enum GLFW::CursorMode)",
				valuetype = "CursorMode"
			},
			["close_console"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(nil)",
				valuetype = "nil"
			},
			["inject_mouse_input"] = {
				type = "function",
				description = [[]],
				args = "(button: enum GLFW::MouseButton,state: enum GLFW::KeyState,mods: enum GLFW::Modifier)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["inject_keyboard_input"] = {
				type = "function",
				description = [[]],
				args = "(key: enum GLFW::Key,state: enum GLFW::KeyState,mods: enum GLFW::Modifier)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["add_base_element"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["inject_scroll_input"] = {
				type = "function",
				description = [[]],
				args = "(offset: math.Vector2)",
				returns = "(bool)",
				valuetype = "bool"
			},
			["find_element_by_name"] = {
				type = "function",
				description = [[]],
				args = "(name: string)",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["find_element_by_index"] = {
				type = "function",
				description = [[]],
				args = "(idx: uint32)",
				returns = "(gui.Element)",
				valuetype = "Element"
			},
			["is_console_open"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(bool)",
				valuetype = "bool"
			},
			["register"] = {
				type = "function",
				description = [[]],
				args = "(className: string,classData: classObject)",
				returns = "(nil)",
				valuetype = "nil"
			},
			["get_console"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(gui.Console)",
				valuetype = "Console"
			},
			["open_console"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(gui.Console)",
				valuetype = "Console"
			},
			["get_render_scissor_rect"] = {
				type = "function",
				description = [[]],
				args = "()",
				returns = "(uint32,uint32,uint32,uint32)",
				valuetype = "uint32"
			},
			["Element"] = {
				type = "class",
				description = [[]],
				childs = {
					["SizeToContents"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool,arg2: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPos"] = {
						type = "method",
						description = [[]],
						args = "(x: float,y: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetSizeProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Vector2iProperty)",
						valuetype = "Vector2iProperty"
					},
					["IsFadingIn"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetScale"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAlwaysUpdate"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddCallback"] = {
						type = "method",
						description = [[]],
						args = "(name: string,o: unknown)",
						returns = "(util.Callback)",
						valuetype = "Callback"
					},
					["__tostring"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetScale"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["KillFocus"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetKeyboardInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetCenter"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["__eq"] = {
						type = "method",
						description = [[]],
						args = "(1: gui.Element)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetName"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetName"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSkin"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsUpdateScheduled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["CenterToParentX"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.Element)",
						valuetype = "Element"
					},
					["GetZPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetScrollInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ClearParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVisibilityProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::BoolProperty)",
						valuetype = "BoolProperty"
					},
					["SetParent"] = {
						type = "method",
						description = [[]],
						args = "(hParent: gui.Element,index: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["RequestFocus"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPosProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Vector2iProperty)",
						valuetype = "Vector2iProperty"
					},
					["IsVisible"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetVisible"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMouseInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetChild"] = {
						type = "method",
						description = [[]],
						args = "(className: string,idx: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetZPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetKeyboardInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetScrollInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFirstChild"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(gui.Element)",
						valuetype = "Element"
					},
					["IsPosInBounds"] = {
						type = "method",
						description = [[]],
						args = "(pos: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasFocus"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetAlpha"] = {
						type = "method",
						description = [[]],
						args = "(alpha: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FadeOut"] = {
						type = "method",
						description = [[]],
						args = "(tFade: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["TrapFocus"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetIndex"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["IsFocusTrapped"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetX"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsHidden"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetAlpha"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCursorPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsParentVisible"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetAutoSizeToContents"] = {
						type = "method",
						description = [[]],
						args = "(x: bool,y: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetColorProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::ColorProperty)",
						valuetype = "ColorProperty"
					},
					["GetMouseInputEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Draw"] = {
						type = "method",
						description = [[]],
						args = "(drawInfo: gui.CommandLineEntry.DrawInfo)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCursorMovementCheckEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCursorMovementCheckEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Resize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAbsolutePos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["SetAbsolutePos"] = {
						type = "method",
						description = [[]],
						args = "(x: float,y: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMouseInBoundsProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::BoolProperty)",
						valuetype = "BoolProperty"
					},
					["SetColorRGB"] = {
						type = "method",
						description = [[]],
						args = "(color: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSize"] = {
						type = "method",
						description = [[]],
						args = "(x: float,y: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Wrap"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.Element)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["InjectMouseInput"] = {
						type = "method",
						description = [[]],
						args = "(mousePos: math.Vector2,button: int32,action: int32)",
						returns = "(enum util::EventReply)",
						valuetype = "EventReply"
					},
					["SetWidth"] = {
						type = "method",
						description = [[]],
						args = "(w: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsCursorInBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["CenterToParent"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetY"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetX"] = {
						type = "method",
						description = [[]],
						args = "(x: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetY"] = {
						type = "method",
						description = [[]],
						args = "(y: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindChildByName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FadeIn"] = {
						type = "method",
						description = [[]],
						args = "(tFadeIn: float,alphaTarget: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsFading"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetStyleClasses"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablestring)",
						valuetype = "table<string>"
					},
					["IsFadingOut"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Think"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DisableThinking"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InjectMouseMoveInput"] = {
						type = "method",
						description = [[]],
						args = "(mousePos: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InjectMouseClick"] = {
						type = "method",
						description = [[]],
						args = "(mousePos: math.Vector2,button: int32)",
						returns = "(enum util::EventReply)",
						valuetype = "EventReply"
					},
					["InjectKeyboardInput"] = {
						type = "method",
						description = [[]],
						args = "(key: int32,action: int32)",
						returns = "(enum util::EventReply)",
						valuetype = "EventReply"
					},
					["InjectKeyPress"] = {
						type = "method",
						description = [[]],
						args = "(key: int32)",
						returns = "(enum util::EventReply)",
						valuetype = "EventReply"
					},
					["ApplySkin"] = {
						type = "method",
						description = [[]],
						args = "(arg1: class WISkin)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InjectCharInput"] = {
						type = "method",
						description = [[]],
						args = "(c: string)",
						returns = "(enum util::EventReply)",
						valuetype = "EventReply"
					},
					["IsClippingEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["CenterToParentY"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InjectScrollInput"] = {
						type = "method",
						description = [[]],
						args = "(mousePos: math.Vector2,offset: math.Vector2)",
						returns = "(enum util::EventReply)",
						valuetype = "EventReply"
					},
					["IsDescendant"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.Element)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsAncestor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.Element)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["FindChildrenByName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAutoAlignToParent"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAutoAlignToParentX"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetAutoAlignToParentY"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ScheduleUpdate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ResetSkin"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddStyleClass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCursor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum GLFW::Cursor::Shape)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCursor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum GLFW::Cursor::Shape)",
						valuetype = "Shape"
					},
					["RemoveElementOnRemoval"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.Element)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTooltip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetScaleProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Vector2Property)",
						valuetype = "Vector2Property"
					},
					["SetTooltip"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasTooltip"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetLeft"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetTop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetBottom"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetHeight"] = {
						type = "method",
						description = [[]],
						args = "(h: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetClippingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBounds"] = {
						type = "method",
						description = [[]],
						args = "(start: math.Vector2,end: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBackgroundElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttachmentPosProperty"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(class util::Vector2iProperty)",
						valuetype = "Vector2iProperty"
					},
					["IsBackgroundElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["FindDescendantByName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(gui.Element)",
						valuetype = "Element"
					},
					["FindDescendantsByName"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(tablegui.Element)",
						valuetype = "Element>"
					},
					["SetLeft"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasAnchor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetRight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTop"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAnchor"] = {
						type = "method",
						description = [[]],
						args = "(left: float,top: float,right: float,bottom: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetBottom"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["EnableThinking"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetThinkingEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAttachmentPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string,arg2: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAttachmentPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["GetAbsoluteAttachmentPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["IsDescendantOf"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.Element)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetAnchorLeft"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAnchorRight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetAnchorTop"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAnchorBottom"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearAnchor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAnchor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float,arg4: float)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetRemoveOnParentRemoval"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCenterX"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetCenterY"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetHalfHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetHalfWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetChildren"] = {
						type = "method",
						description = [[]],
						args = "(className: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsAncestorOf"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.Element)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RemoveStyleClass"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearStyleClasses"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindChildIndex"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.Element)",
						returns = "([uint32])",
						valuetype = "uint32"
					},
					["GetRootElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.Element)",
						valuetype = "Element"
					},
					["GetRootWindow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Window)",
						valuetype = "Window"
					},
					["IsValid"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["Remove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetCenterPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetClass"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["GetHalfSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["GetSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["GetFocusProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::BoolProperty)",
						valuetype = "BoolProperty"
					},
					["GetWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["RemoveSafely"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddAttachment"] = {
						type = "method",
						description = [[]],
						args = "(name: string)",
						returns = "(class WIAttachment)",
						valuetype = "class WIAttachment"
					},
					["CallCallbacks"] = {
						type = "method",
						description = [[]],
						args = "(name: string,o1: any,o2: any,o3: any,o4: any,o5: any,o6: any,o7: any,o8: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEndPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["Update"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					}
				}
			},
			["impl"] = {
				type = "lib",
				description = [[]],
				childs = {

				}
			},
			["ProgressBar"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetValue"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(min: float,max: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPostFix"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetProgress"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["GetRange"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class std::array<float,3>)",
						valuetype = "array<float,3>"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetOptions"] = {
						type = "method",
						description = [[]],
						args = "(arg1: tablestring)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddOption"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetProgress"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Table"] = {
				type = "class",
				inherits = "gui.Container gui.Element",
				description = [[]],
				childs = {
					["GetRowCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetSelectableMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum WITable::SelectableMode)",
						valuetype = "SelectableMode"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRowHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetRowHeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSelectableMode"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum WITable::SelectableMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddRow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.Table.Row)",
						valuetype = "Row"
					},
					["SetColumnWidth"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddHeaderRow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.Table.Row)",
						valuetype = "Row"
					},
					["SetSortable"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsSortable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetScrollable"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsScrollable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetRow"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(gui.Table.Row)",
						valuetype = "Row"
					},
					["GetSelectedRows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablegui.Table.Row)",
						valuetype = "Row>"
					},
					["GetRows"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(tablegui.Table.Row)",
						valuetype = "Row>"
					},
					["RemoveRow"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MoveRow"] = {
						type = "method",
						description = [[]],
						args = "(a: gui.Table.Row,pos: gui.Table.Row)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SelectRow"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.Table.Row)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetFirstSelectedRow"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.Element)",
						valuetype = "Element"
					},
					["SELECTABLE_MODE_MULTI"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTABLE_MODE_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["SELECTABLE_MODE_SINGLE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["Row"] = {
						type = "class",
						inherits = "gui.Container gui.Element",
						description = [[]],
						childs = {
							["SetValue"] = {
								type = "method",
								description = [[]],
								args = "(arg1: uint32,arg2: string)",
								returns = "(gui.Element)",
								valuetype = "Element"
							},
							["InsertElement"] = {
								type = "method",
								description = [[]],
								args = "(arg1: uint32,arg2: gui.Element)",
								returns = "(gui.Table.Cell)",
								valuetype = "Cell"
							},
							["Select"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetValue"] = {
								type = "method",
								description = [[]],
								args = "(arg1: uint32)",
								returns = "(string)",
								valuetype = "string"
							},
							["IsSelected"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(bool)",
								valuetype = "bool"
							},
							["Deselect"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetCellCount"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(uint32)",
								valuetype = "uint32"
							},
							["SetCellWidth"] = {
								type = "method",
								description = [[]],
								args = "(arg1: uint32,arg2: int32)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetCell"] = {
								type = "method",
								description = [[]],
								args = "(arg1: uint32)",
								returns = "(gui.Table.Cell)",
								valuetype = "Cell"
							},
							["GetRowIndex"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(uint32)",
								valuetype = "uint32"
							}
						}
					},
					["Cell"] = {
						type = "class",
						inherits = "gui.Container gui.Element",
						description = [[]],
						childs = {
							["GetFirstElement"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(gui.Element)",
								valuetype = "Element"
							},
							["GetColSpan"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(int32)",
								valuetype = "int32"
							},
							["SetColSpan"] = {
								type = "method",
								description = [[]],
								args = "(arg1: int32)",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},

				}
			},
			["Frame"] = {
				type = "class",
				inherits = "gui.Transformable gui.Element",
				description = [[]],
				childs = {
					["SetTitle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetTitle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetCloseButtonEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["TextEntry"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetTextElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.Text)",
						valuetype = "Text"
					},
					["IsNumeric"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsMultiLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsEditable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetEditable"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxLength"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetSelectable"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaxLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetMultiLine"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsSelectable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetCaretElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class WIRect)",
						valuetype = "class WIRect"
					},
					["GetValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class std::basic_string_view<char,struct std::char_traits<char> >)",
						valuetype = "char_traits<char> >"
					},
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: class std::basic_string_view<char,struct std::char_traits<char> >)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class std::basic_string_view<char,struct std::char_traits<char> >)",
						valuetype = "char_traits<char> >"
					}
				}
			},
			["Shape"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["AddVertex"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2)",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["SetVertexPos"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvertVertexPositions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearVertices"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Arrow"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetDirection"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum WIArrow::Direction)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["DIRECTION_RIGHT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DIRECTION_DOWN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DIRECTION_LEFT"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["DIRECTION_UP"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["TreeList"] = {
				type = "class",
				inherits = "gui.Table gui.Element",
				description = [[]],
				childs = {
					["AddItem"] = {
						type = "method",
						description = [[]],
						args = "(text: string,void: unknown)",
						returns = "(gui.Element)",
						valuetype = "Element"
					},
					["ExpandAll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CollapseAll"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetRootItem"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.TreeList.Element)",
						valuetype = "Element"
					},
					["Element"] = {
						type = "class",
						inherits = "gui.Table.Row gui.Element",
						description = [[]],
						childs = {
							["AddItem"] = {
								type = "method",
								description = [[]],
								args = "(text: string,void: unknown)",
								returns = "(gui.Element)",
								valuetype = "Element"
							},
							["Expand"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							},
							["GetItems"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(tableclass util::TWeakSharedHandle<class WIBase>)",
								valuetype = "TWeakSharedHandle<class WIBase>>"
							},
							["Collapse"] = {
								type = "method",
								description = [[]],
								args = "()",
								returns = "(nil)",
								valuetype = "nil"
							}
						}
					},

				}
			},
			["Container"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetPaddingBottom"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPaddingTop"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPaddingLeft"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPadding"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class std::array<int,4>)",
						valuetype = "array<int,4>"
					},
					["GetPaddingTop"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetPaddingBottom"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetPaddingRight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["SetPadding"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32,arg4: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetPaddingRight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetPaddingLeft"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					}
				}
			},
			["Base"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["OnDraw"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.CommandLineEntry.DrawInfo,arg2: math.Mat4,arg3: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["__init"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnInitialize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CharCallback"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnRemove"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnThink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnInitialThink"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["KeyboardCallback"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32,arg4: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MouseCallback"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32,arg3: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ScrollCallback"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnUpdate"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnVisibilityChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnSizeChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnColorChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float,arg2: float,arg3: float,arg4: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnAlphaChanged"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnCursorEntered"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnCursorExited"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnFocusGained"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OnFocusKilled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["OutlinedRect"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetOutlineWidth"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOutlineWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["CommandLineEntry"] = {
				type = "class",
				inherits = "gui.TextEntry gui.Element",
				description = [[]],
				childs = {
					["SetAutoCompleteEntryLimit"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAutoCompleteEntryLimit"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["DrawInfo"] = {
						type = "class",
						description = [[]],
						childs = {
							["SetPostTransform"] = {
								type = "method",
								description = [[]],
								args = "(t: math.Mat4)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["__init"] = {
								type = "method",
								description = [[]],
								args = "(arg1: prosper.CommandBuffer)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["SetColor"] = {
								type = "method",
								description = [[]],
								args = "(color: util.Color)",
								returns = "(nil)",
								valuetype = "nil"
							},
							["offset"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["commandBuffer"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["size"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["transform"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							},
							["useScissor"] = {
								type = "value",
								description = [[]],
								valuetype = ""
							}
						}
					},

				}
			},
			["NumericTextEntry"] = {
				type = "class",
				inherits = "gui.TextEntry gui.Element",
				description = [[]],
				childs = {
					["SetMinValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRange"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMinValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetMaxValue"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					}
				}
			},
			["SilkIcon"] = {
				type = "class",
				inherits = "gui.Icon gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetIcon"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["TexturedShape"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["GetTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(prosper.Texture)",
						valuetype = "Texture"
					},
					["GetMaterial"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(game.Material)",
						valuetype = "Material"
					},
					["GetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(enum AlphaMode)",
						valuetype = "enum AlphaMode"
					},
					["SetShader"] = {
						type = "method",
						description = [[]],
						args = "(arg1: shader.GUITextured)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaterial"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAlphaMode"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum AlphaMode)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTexture"] = {
						type = "method",
						description = [[]],
						args = "(tex: prosper.Texture)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetAlphaCutoff"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetChannelSwizzle"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum wgui::ShaderTextured::Channel)",
						returns = "(enum wgui::ShaderTextured::Channel)",
						valuetype = "Channel"
					},
					["SetVertexUVCoord"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InvertVertexUVCoordinates"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SizeToTexture"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetAlphaCutoff"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["CHANNEL_ALPHA"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_BLUE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_RED"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["CHANNEL_GREEN"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["Slider"] = {
				type = "class",
				inherits = "gui.ProgressBar gui.Element",
				description = [[]],
				childs = {
					["IsBeingDragged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["SnapArea"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetTriggerArea"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.Element)",
						valuetype = "Element"
					}
				}
			},
			["DebugDepthTexture"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetTexture"] = {
						type = "method",
						description = [[]],
						args = "(arg1: prosper.Texture)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["ScrollContainer"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetAutoStickToBottom"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsContentsHeightFixed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["ShouldAutoStickToBottom"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsContentsWidthFixed"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetContentsWidthFixed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetContentsHeightFixed"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetScrollAmountY"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetVerticalScrollBar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.ScrollBar)",
						valuetype = "ScrollBar"
					},
					["GetHorizontalScrollBar"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.ScrollBar)",
						valuetype = "ScrollBar"
					},
					["SetScrollAmount"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32,arg2: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetScrollAmountX"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Icon"] = {
				type = "class",
				inherits = "gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetClipping"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32,arg3: uint32,arg4: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Console"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["AppendText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(class std::basic_string_view<char,struct std::char_traits<char> >)",
						valuetype = "char_traits<char> >"
					},
					["GetTextLogElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.TextEntry)",
						valuetype = "TextEntry"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetCommandLineEntryElement"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.CommandLineEntry)",
						valuetype = "CommandLineEntry"
					},
					["SetMaxLogLineCount"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaxLogLineCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetFrame"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.Frame)",
						valuetype = "Frame"
					},
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					}
				}
			},
			["Transformable"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetDraggable"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetDragBounds"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2i,arg2: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetDragArea"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(gui.Element)",
						valuetype = "Element"
					},
					["SetMaxHeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetResizable"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsDraggable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetMinSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMinHeight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsResizable"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetMinWidth"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMinWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetMinHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["GetMaxSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["IsBeingDragged"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetMinSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i)",
						valuetype = "Vector2i"
					},
					["SetResizeRatioLocked"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxWidth"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetMaxSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: math.Vector2i)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaxWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["IsBeingResized"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetDragBounds"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2i,math.Vector2i)",
						valuetype = "Vector2i"
					},
					["IsResizeRatioLocked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AddSnapTarget"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.SnapArea)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetMaxHeight"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["Close"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Line"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetEndColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["SetStartPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStartPos"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["SetEndPos"] = {
						type = "method",
						description = [[]],
						args = "(pos: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetStartColor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetEndColor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetStartColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["GetStartPosProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Vector2iProperty)",
						valuetype = "Vector2iProperty"
					},
					["GetEndPosProperty"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class util::Vector2iProperty)",
						valuetype = "Vector2iProperty"
					},
					["GetLineWidth"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					}
				}
			},
			["Text"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					},
					["SetAutoBreakMode"] = {
						type = "method",
						description = [[]],
						args = "(arg1: enum WIText::AutoBreak)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetLineCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetTextLength"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetLine"] = {
						type = "method",
						description = [[]],
						args = "(lineIndex: int32)",
						returns = "([string])",
						valuetype = "string"
					},
					["PopFrontLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetShadowColor"] = {
						type = "method",
						description = [[]],
						args = "(col: util.Color)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTagArgument"] = {
						type = "method",
						description = [[]],
						args = "(label: string,argIdx: uint32,o: any)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetTagsEnabled"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["MoveText"] = {
						type = "method",
						description = [[]],
						args = "(lineIdx: uint32,startOffset: uint32,len: uint32,targetLineIdx: uint32,targetCharOffset: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AreTagsEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["PopBackLine"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["RemoveText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["RemoveLine"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["InsertText"] = {
						type = "method",
						description = [[]],
						args = "(text: string,lineIdx: uint32,charOffset: uint32)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["AppendText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: class std::basic_string_view<char,struct std::char_traits<char> >)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AppendLine"] = {
						type = "method",
						description = [[]],
						args = "(line: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Substr"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(string)",
						valuetype = "string"
					},
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(text: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["Clear"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetFont"] = {
						type = "method",
						description = [[]],
						args = "(font: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShadowXOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["EnableShadow"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetShadowXOffset"] = {
						type = "method",
						description = [[]],
						args = "(x: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsShadowEnabled"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetShadowOffset"] = {
						type = "method",
						description = [[]],
						args = "(pos: math.Vector2)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetShadowYOffset"] = {
						type = "method",
						description = [[]],
						args = "(y: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShadowColor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(util.Color)",
						valuetype = "Color"
					},
					["GetShadowOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(math.Vector2)",
						valuetype = "Vector2"
					},
					["GetShadowYOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetShadowAlpha"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShadowAlpha"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetShadowBlurSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetShadowBlurSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["AUTO_BREAK_ANY"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AUTO_BREAK_NONE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					},
					["AUTO_BREAK_WHITESPACE"] = {
						type = "value",
						description = [[]],
						valuetype = ""
					}
				}
			},
			["DebugSSAO"] = {
				type = "class",
				inherits = "gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetUseBlurredSSAOImage"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["RoundedTexturedRect"] = {
				type = "class",
				inherits = "gui.TexturedShape gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetRoundness"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsTopRightRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRoundBottomLeft"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsTopLeftRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetRoundBottomRight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsBottomLeftRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsBottomRightRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetRoundness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int8)",
						valuetype = "int8"
					},
					["SetRoundTopLeft"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRoundTopRight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["RoundedRect"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["SetRoundness"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int8)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsTopRightRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRoundBottomLeft"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsTopLeftRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetCornerSize"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetRoundBottomRight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsBottomLeftRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["IsBottomRightRound"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetRoundness"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int8)",
						valuetype = "int8"
					},
					["SetRoundTopLeft"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetRoundTopRight"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["DebugShadowMap"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "(arg1: float)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetContrastFactor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(float)",
						valuetype = "float"
					},
					["SetShadowMapSize"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetLightSource"] = {
						type = "method",
						description = [[]],
						args = "(arg1: ents.LightComponent)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["Checkbox"] = {
				type = "class",
				inherits = "gui.Shape gui.Element",
				description = [[]],
				childs = {
					["Toggle"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetChecked"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsChecked"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					}
				}
			},
			["ScrollBar"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["GetScrollAmount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetScrollOffset"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["IsHorizontal"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetScrollOffset"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetHorizontal"] = {
						type = "method",
						description = [[]],
						args = "(arg1: bool)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["IsVertical"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["SetScrollAmount"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetUp"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddScrollOffset"] = {
						type = "method",
						description = [[]],
						args = "(arg1: int32)",
						returns = "(nil)",
						valuetype = "nil"
					}
				}
			},
			["GridPanel"] = {
				type = "class",
				inherits = "gui.Table gui.Element",
				description = [[]],
				childs = {
					["GetColumnCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["AddItem"] = {
						type = "method",
						description = [[]],
						args = "(arg1: gui.Element,arg2: uint32,arg3: uint32)",
						returns = "(gui.Table.Cell)",
						valuetype = "Cell"
					}
				}
			},
			["Button"] = {
				type = "class",
				inherits = "gui.Element",
				description = [[]],
				childs = {
					["SetText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetText"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(string)",
						valuetype = "string"
					}
				}
			},
			["DropDownMenu"] = {
				type = "class",
				inherits = "gui.TextEntry gui.Element",
				description = [[]],
				childs = {
					["SelectOption"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ClearOptions"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SelectOptionByText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOptionText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(class std::basic_string_view<char,struct std::char_traits<char> >)",
						valuetype = "char_traits<char> >"
					},
					["GetOptionCount"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(uint32)",
						valuetype = "uint32"
					},
					["GetOptionValue"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(string)",
						valuetype = "string"
					},
					["SetOptionText"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["SetOptionValue"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32,arg2: string)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["OpenMenu"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["HasOption"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(bool)",
						valuetype = "bool"
					},
					["CloseMenu"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ScrollToOption"] = {
						type = "method",
						description = [[]],
						args = "(offset: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["ToggleMenu"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["GetOptionElement"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(class WIDropDownMenuOption)",
						valuetype = "class WIDropDownMenuOption"
					},
					["IsMenuOpen"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(bool)",
						valuetype = "bool"
					},
					["GetSelectedOption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(int32)",
						valuetype = "int32"
					},
					["ClearSelectedOption"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(nil)",
						valuetype = "nil"
					},
					["FindOptionSelectedByCursor"] = {
						type = "method",
						description = [[]],
						args = "()",
						returns = "(class WIDropDownMenuOption)",
						valuetype = "class WIDropDownMenuOption"
					},
					["SetListItemCount"] = {
						type = "method",
						description = [[]],
						args = "(arg1: uint32)",
						returns = "(nil)",
						valuetype = "nil"
					},
					["AddOption"] = {
						type = "method",
						description = [[]],
						args = "(arg1: string)",
						returns = "(class WIDropDownMenuOption)",
						valuetype = "class WIDropDownMenuOption"
					}
				}
			},

		}
	},
}