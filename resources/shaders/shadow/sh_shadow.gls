#ifndef F_SH_SHADOW_GLS
#define F_SH_SHADOW_GLS

#include "../modules/sh_export.gls"
#include "../modules/sh_vertex_data_locations.gls"

struct VertexData
{
	vec3 vert_pos_ws; // Vertex Position in world space
	vec4 light_pos_ws; // Light Position in world space; 4th component stores the distance
};
layout(location = SHADER_VERTEX_DATA_LOCATION) EXPORT_VS VertexData
#ifdef GLS_FRAGMENT_SHADER
	fs_in
#else
	vs_out
#endif
;

#define FRENDER_USE_EXTENDED_VERTEX_WEIGHTS 1

layout(LAYOUT_PUSH_CONSTANTS()) uniform pushConstants {
	mat4 depthMVP;
	vec4 lightPos; // 4th component stores the distance
	uint flags;
} u_pushConstants;

bool is_weighted_ext() {return (u_pushConstants.flags &FRENDER_USE_EXTENDED_VERTEX_WEIGHTS) != 0;}

#endif
