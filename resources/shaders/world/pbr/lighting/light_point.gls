#ifndef F_FS_PBR_LIGHTING_LIGHT_POINT_GLS
#define F_FS_PBR_LIGHTING_LIGHT_POINT_GLS

#include "light_shared.gls"
#include "/lighting/fs_lighting_point.gls"

vec3 apply_point_light(LightSourceData light, uint lightIndex, MaterialInfo materialInfo, vec3 normal, vec3 view)
{
	vec3 pointToLight = light.position.xyz - fs_in.vert_pos_ws.xyz;
	float distance = length(pointToLight);
	pointToLight /= distance;
	float attenuation = calc_light_falloff(distance,light.position.w);
	attenuation = pow(attenuation,light.falloffExponent);
	vec3 shade = get_point_shade(pointToLight, materialInfo, normal, view);

	float shadowFactor = are_shadows_enabled() ? get_point_light_shadow_factor(lightIndex,true) : 1.0;
	return attenuation * light.color.a * light.color.rgb * shade *shadowFactor;
}

#endif
