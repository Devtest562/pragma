#ifndef F_FS_PBR_DEBUG_GLS
#define F_FS_PBR_DEBUG_GLS

#define DEBUG_MODE_NONE 0
#define DEBUG_MODE_AO (DEBUG_MODE_NONE +1)
#define DEBUG_MODE_ALBEDO (DEBUG_MODE_AO +1)
#define DEBUG_MODE_METALNESS (DEBUG_MODE_ALBEDO +1)
#define DEBUG_MODE_ROUGHNESS (DEBUG_MODE_METALNESS +1)
#define DEBUG_MODE_DIFFUSE (DEBUG_MODE_ROUGHNESS +1)
#define DEBUG_MODE_NORMAL (DEBUG_MODE_DIFFUSE +1)
#define DEBUG_MODE_NORMAL_MAP (DEBUG_MODE_NORMAL +1)
#define DEBUG_MODE_REFLECTANCE (DEBUG_MODE_NORMAL_MAP +1)
#define DEBUG_MODE_IBL_PREFILTER_MAP (DEBUG_MODE_REFLECTANCE +1)
#define DEBUG_MODE_IBL_IRRADIANCE_MAP (DEBUG_MODE_IBL_PREFILTER_MAP +1)
#define DEBUG_MODE_EMISSION_MAP (DEBUG_MODE_IBL_IRRADIANCE_MAP +1)
#define DEBUG_MODE_LIGHTMAP (DEBUG_MODE_EMISSION_MAP +1)
#define DEBUG_MODE_LIGHTMAP_UV (DEBUG_MODE_LIGHTMAP +1)

vec4 apply_debug_mode(uint debugMode,vec4 outputColor,vec2 texCoords,vec3 diffuseColor,float metallic,float roughness,float aoFactor,float reflectance)
{
	vec4 finalColor = outputColor;
	switch(debugMode)
	{
		case DEBUG_MODE_AO:
			float ao = texture(u_rmaMap,texCoords)[RMA_CHANNEL_AO];
			finalColor = mix(vec4(1,1,1,1),vec4(ao,ao,ao,1.0),aoFactor);
			break;
		case DEBUG_MODE_ALBEDO:
			finalColor = texture(u_albedoMap,texCoords);
			break;
		case DEBUG_MODE_METALNESS:
			finalColor = vec4(metallic,metallic,metallic,1.0);
			break;
		case DEBUG_MODE_ROUGHNESS:
			finalColor = vec4(roughness,roughness,roughness,1.0);
			break;
		case DEBUG_MODE_DIFFUSE:
			finalColor = vec4(diffuseColor,1.0);
			break;
		case DEBUG_MODE_NORMAL:
			finalColor = vec4(get_normal_from_map(texCoords),1.0);
			break;
		case DEBUG_MODE_NORMAL_MAP:
			finalColor = texture(u_normalMap,texCoords);
			break;
		case DEBUG_MODE_REFLECTANCE:
			finalColor = vec4(reflectance,reflectance,reflectance,1.0);
			break;
		case DEBUG_MODE_IBL_PREFILTER_MAP:
			finalColor = texture(u_prefilterMap,normalize(fs_in.vert_pos_ws.xyz -u_renderSettings.posCam));
			break;
		case DEBUG_MODE_IBL_IRRADIANCE_MAP:
			finalColor = texture(u_irradianceMap,normalize(fs_in.vert_pos_ws.xyz -u_renderSettings.posCam));
			break;
		case DEBUG_MODE_EMISSION_MAP:
			finalColor = texture(u_glowMap,texCoords);
			break;
		case DEBUG_MODE_LIGHTMAP:
			if(is_light_map_enabled())
			{
				vec4 colLightMap = texture(u_lightMap,fs_in.vert_uv_lightmap.xy);
				colLightMap.rgb /= 255.0;
				finalColor = colLightMap.rgba;
			}
			else
				finalColor = vec4(0,0,0,1);
			break;
		case DEBUG_MODE_LIGHTMAP_UV:
			if(is_light_map_enabled())
				finalColor = vec4(fs_in.vert_uv_lightmap.xy,0,1);
			else
				finalColor = vec4(0,0,0,1);
			break;
	}
	finalColor = debug_get_csm_cascade_color(finalColor);
	return finalColor;
}

#endif
