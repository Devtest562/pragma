#version 440

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#include "sh_prepass.gls"
#include "sh_prepass_vertex_data.gls"
#include "../../modules/sh_rendersettings.gls"
#include "../../modules/vs_weighted.gls"
#include "../../modules/vs_vertex_animation.gls"
#include "../../modules/vs_instanced_entity_data.gls"
#include "../../math/depth_bias.gls"

layout(location = SHADER_VERTEX_BUFFER_LOCATION) in vec3 in_vert_pos;
layout(location = SHADER_UV_BUFFER_LOCATION) in vec2 in_vert_uv;
layout(location = SHADER_NORMAL_BUFFER_LOCATION) in vec3 in_vert_normal;

layout(constant_id = SPECIALIZATION_CONSTANT_ENABLE_ANIMATION) const uint CSPEC_ENABLE_ANIMATION = 1;
layout(constant_id = SPECIALIZATION_CONSTANT_ENABLE_MORPH_TARGET_ANIMATION) const uint CSPEC_ENABLE_MORPH_TARGET_ANIMATION = 1;

void main()
{
	mat4 mdlMatrix = get_instanced_model_matrix();
	mat4 V = get_view_matrix();
	
	vec3 vertPos = in_vert_pos.xyz;
	vec4 weightedVertPos = vec4(vertPos,1.0);
	vec3 normal = in_vert_normal.xyz;
	if(CSPEC_ENABLE_ANIMATION == 1)
	{
		if(CSPEC_ENABLE_MORPH_TARGET_ANIMATION == 1)
		{
			uint vertexAnimOffset = (u_pushConstants.scene.vertexAnimInfo<<16)>>16;
			uint vertexAnimCount = u_pushConstants.scene.vertexAnimInfo>>16;
			for(uint i=0;i<vertexAnimCount;++i)
			{
				uint offset = vertexAnimOffset +i;
				VertexAnimationFrameData frameData = vaFrameData.data[offset];

				vec3 vpos0;
				vec3 vnorm0;
				float vwrinkle0;
				get_vertex_anim_vertex_position(frameData.srcFrameOffset,vpos0,vnorm0,vwrinkle0);

				vec3 vpos1;
				vec3 vnorm1;
				float vwrinkle1;
				get_vertex_anim_vertex_position(frameData.srcFrameOffset,vpos1,vnorm1,vwrinkle1);

				vertPos += vpos0 *frameData.blend;//v0 +(v1 -v0) *frameData.blend;
			}
		}
		mat4 mBone = calc_bone_matrix(is_instanced_weighted(),is_weighted_ext());
		weightedVertPos = mBone *weightedVertPos;
		normal = normalize((mBone *vec4(normal.xyz,0.0)).xyz);
	}

	vec4 vposWs = mdlMatrix *weightedVertPos;
	if(is_3d_sky())
	{
		vposWs.xyz -= u_pushConstants.scene.drawOrigin.xyz;
		vposWs.xyz *= u_pushConstants.scene.drawOrigin.w;
	}

	mat4 P = u_camera.P;
	if(u_pushConstants.scene.depthBias.x > 0.0)
		apply_projection_depth_bias_offset(P,u_renderSettings.nearZ,u_renderSettings.farZ,u_pushConstants.scene.depthBias[0],u_pushConstants.scene.depthBias[1]);
	gl_Position = API_DEPTH_TRANSFORM(P) *V *vposWs;

	vposWs.xyz /= vposWs.w;
	vposWs.w = 1.0;

	if(length_sqr(u_pushConstants.scene.clipPlane.xyz) > 0.0)
		gl_ClipDistance[0] = dot(vec4(vposWs.xyz,1.0),u_pushConstants.scene.clipPlane);
	else
		gl_ClipDistance[0] = 1.0;

	vs_out.vert_normal_cs = (V *mdlMatrix *vec4(normal,0)).xyz;
	vs_out.vert_uv = in_vert_uv.xy;
}
