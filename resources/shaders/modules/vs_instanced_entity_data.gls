#ifndef F_VS_INSTANCED_ENTITY_DATA_GLS
#define F_VS_INSTANCED_ENTITY_DATA_GLS

#include "sh_global_entity_instance_buffer.gls"
#include "vs_buffer_locations.gls"
#include "sh_math.gls"

layout(location = SHADER_RENDER_BUFFER_INDEX_BUFFER_LOCATION) in uint in_render_buffer_index;

#define SINGLE_INSTANCE_RENDER_BUFFER_INDEX MAX_UINT
EntityInstanceData get_instance_data() {return (in_render_buffer_index != SINGLE_INSTANCE_RENDER_BUFFER_INDEX) ? u_instances.data[in_render_buffer_index].entData : u_instance.data;}
mat4 get_instanced_model_matrix() {return get_instance_data().M;}
vec4 get_instanced_instance_color() {return get_instance_data().color;}
bool is_instanced_weighted() {return (get_instance_data().flags.x &FINSTANCE_WEIGHTED) != 0;}

#endif
