#ifndef F_SH_INSTANCE_INFO_GLS
#define F_SH_INSTANCE_INFO_GLS

#include "sh_uniform_locations.gls"
#include "sh_entity_info.gls"

#ifndef PUSH_USER_CONSTANTS
	#define PUSH_USER_CONSTANTS
#endif

#define ENABLE_MATERIAL_PARAMETERS 1

// Note: To maximize efficiency with OpenGL, these should generally not change between individual meshes!
#define FRENDER_LIGHTMAP_ENABLED 1
#define FRENDER_NO_IBL (FRENDER_LIGHTMAP_ENABLED<<1)
#define FRENDER_USE_EXTENDED_VERTEX_WEIGHTS (FRENDER_NO_IBL<<1)
#define FRENDER_3D_SKY (FRENDER_USE_EXTENDED_VERTEX_WEIGHTS<<1)
#define FRENDER_DISABLE_SHADOWS (FRENDER_3D_SKY<<1)

layout(LAYOUT_PUSH_CONSTANTS()) uniform PushConstants
{
	vec4 clipPlane;
	vec4 drawOrigin; // w is scale
	vec2 depthBias;
	uint vertexAnimInfo;
	uint flags;
	uint debugMode;
	float reflectionProbeIntensity;
	vec2 padding;
	PUSH_USER_CONSTANTS
} u_pushConstants;

bool is_light_map_enabled() {return (u_pushConstants.flags &FRENDER_LIGHTMAP_ENABLED) != 0;}
bool is_ibl_enabled() {return (u_pushConstants.flags &FRENDER_NO_IBL) == 0;}
bool is_weighted_ext() {return (u_pushConstants.flags &FRENDER_USE_EXTENDED_VERTEX_WEIGHTS) != 0;}
bool is_3d_sky() {return (u_pushConstants.flags &FRENDER_3D_SKY) != 0;}
bool are_shadows_enabled() {return (u_pushConstants.flags &FRENDER_DISABLE_SHADOWS) == 0;}
float get_reflection_probe_intensity() {return u_pushConstants.reflectionProbeIntensity;}

#endif
